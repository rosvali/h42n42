// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Cohttp__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Cohttp = [0];
   runtime.caml_register_global(0, Cohttp, "Cohttp__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Accept_types
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_AnyCharset = "AnyCharset",
    cst_AnyEncoding = "AnyEncoding",
    cst_AnyLanguage = "AnyLanguage",
    cst_AnyMedia = "AnyMedia",
    cst_AnyMediaSubtype = "AnyMediaSubtype",
    cst_Charset = "Charset",
    cst_Compress = "Compress",
    cst_Deflate = "Deflate",
    cst_Encoding = "Encoding",
    cst_Gzip = "Gzip",
    cst_Identity = "Identity",
    cst_Language = "Language",
    cst_MediaType = "MediaType",
    cst_anyCharset = "anyCharset",
    cst_anyEncoding = "anyEncoding",
    cst_anyLanguage = "anyLanguage",
    cst_anyMedia = "anyMedia",
    cst_anyMediaSubtype = "anyMediaSubtype",
    cst_charset = "charset",
    cst_compress = "compress",
    cst_deflate = "deflate",
    cst_encoding = "encoding",
    cst_gzip = "gzip",
    cst_identity = "identity",
    cst_language = "language",
    cst_mediaType = "mediaType",
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_007 = "cohttp/src/accept_types.ml.p",
    error_source_014 = "cohttp/src/accept_types.ml.media_range",
    error_source_036 = "cohttp/src/accept_types.ml.charset",
    error_source_047 = "cohttp/src/accept_types.ml.encoding",
    error_source_058 = "cohttp/src/accept_types.ml.language",
    error_source_075 = "cohttp/src/accept_types.ml.qlist",
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    _l_ = [0, cst_Language],
    _m_ = [0, cst_AnyLanguage],
    _f_ = [0, cst_Gzip],
    _g_ = [0, cst_Compress],
    _h_ = [0, cst_Deflate],
    _i_ = [0, cst_Identity],
    _j_ = [0, cst_AnyEncoding],
    _k_ = [0, cst_Encoding],
    _d_ = [0, cst_Charset],
    _e_ = [0, cst_AnyCharset],
    _a_ = [0, cst_AnyMedia],
    _b_ = [0, cst_MediaType],
    _c_ = [0, cst_AnyMediaSubtype];
   function p_of_sexp(sexp_006){
    if(1 === sexp_006[0]){
     var _G_ = sexp_006[1];
     if(_G_){
      var _H_ = _G_[2];
      if(_H_ && ! _H_[2]){
       var
        arg1_003 = _H_[1],
        arg0_002 = _G_[1],
        res0_004 = caml_call1(Sexplib0_Sexp_conv[31], arg0_002),
        res1_005 = caml_call1(Sexplib0_Sexp_conv[31], arg1_003);
       return [0, res0_004, res1_005];
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[2], error_source_007, 2, sexp_006);
   }
   function sexp_of_p(param){
    var
     arg1_009 = param[2],
     arg0_008 = param[1],
     res0_010 = caml_call1(Sexplib0_Sexp_conv[7], arg0_008),
     res1_011 = caml_call1(Sexplib0_Sexp_conv[7], arg1_009);
    return [1, [0, res0_010, [0, res1_011, 0]]];
   }
   function media_range_of_sexp(sexp_016){
    a:
    {
     if(0 === sexp_016[0]){
      var _C_ = sexp_016[1];
      b:
      if(caml_string_notequal(_C_, cst_AnyMedia)){
       c:
       if(caml_string_notequal(_C_, cst_AnyMediaSubtype)){
        if(caml_string_notequal(_C_, cst_MediaType)){
         if(! caml_string_notequal(_C_, cst_anyMedia)) break b;
         if(! caml_string_notequal(_C_, cst_anyMediaSubtype)) break c;
         if(caml_string_notequal(_C_, cst_mediaType)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_014, sexp_016);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_014, sexp_016);
      }
      return 0;
     }
     var _D_ = sexp_016[1];
     if(! _D_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_014, sexp_016);
     var _E_ = _D_[1];
     if(0 !== _E_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_014, sexp_016);
     var tag_017 = _E_[1];
     b:
     if(caml_string_notequal(tag_017, cst_AnyMedia)){
      c:
      if(caml_string_notequal(tag_017, cst_AnyMediaSubtype)){
       if(caml_string_notequal(tag_017, cst_MediaType)){
        if(! caml_string_notequal(tag_017, cst_anyMedia)) break b;
        if(! caml_string_notequal(tag_017, cst_anyMediaSubtype)) break c;
        if(caml_string_notequal(tag_017, cst_mediaType)) break a;
       }
       var sexp_args_018 = _D_[2];
       if(sexp_args_018){
        var _F_ = sexp_args_018[2];
        if(_F_ && ! _F_[2]){
         var
          arg1_020 = _F_[1],
          arg0_019 = sexp_args_018[1],
          res0_021 = caml_call1(Sexplib0_Sexp_conv[31], arg0_019),
          res1_022 = caml_call1(Sexplib0_Sexp_conv[31], arg1_020);
         return [0, res0_021, res1_022];
        }
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_014,
                tag_017,
                sexp_016);
      }
      var sexp_args_025 = _D_[2];
      if(sexp_args_025 && ! sexp_args_025[2]){
       var
        arg0_026 = sexp_args_025[1],
        res0_027 = caml_call1(Sexplib0_Sexp_conv[31], arg0_026);
       return [1, res0_027];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_014,
               tag_017,
               sexp_016);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_014, sexp_016);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_014, sexp_016);
   }
   function sexp_of_media_range(param){
    if(typeof param === "number") return _a_;
    if(0 === param[0]){
     var
      arg1_029 = param[2],
      arg0_028 = param[1],
      res0_030 = caml_call1(Sexplib0_Sexp_conv[7], arg0_028),
      res1_031 = caml_call1(Sexplib0_Sexp_conv[7], arg1_029);
     return [1, [0, _b_, [0, res0_030, [0, res1_031, 0]]]];
    }
    var
     arg0_032 = param[1],
     res0_033 = caml_call1(Sexplib0_Sexp_conv[7], arg0_032);
    return [1, [0, _c_, [0, res0_033, 0]]];
   }
   function charset_of_sexp(sexp_038){
    a:
    {
     if(0 === sexp_038[0]){
      var _z_ = sexp_038[1];
      b:
      if(caml_string_notequal(_z_, cst_AnyCharset)){
       if(caml_string_notequal(_z_, cst_Charset)){
        if(! caml_string_notequal(_z_, cst_anyCharset)) break b;
        if(caml_string_notequal(_z_, cst_charset)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_036, sexp_038);
      }
      return 0;
     }
     var _A_ = sexp_038[1];
     if(! _A_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_036, sexp_038);
     var _B_ = _A_[1];
     if(0 !== _B_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_036, sexp_038);
     var tag_039 = _B_[1];
     b:
     if(caml_string_notequal(tag_039, cst_AnyCharset)){
      if(caml_string_notequal(tag_039, cst_Charset)){
       if(! caml_string_notequal(tag_039, cst_anyCharset)) break b;
       if(caml_string_notequal(tag_039, cst_charset)) break a;
      }
      var sexp_args_040 = _A_[2];
      if(sexp_args_040 && ! sexp_args_040[2]){
       var
        arg0_041 = sexp_args_040[1],
        res0_042 = caml_call1(Sexplib0_Sexp_conv[31], arg0_041);
       return [0, res0_042];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_036,
               tag_039,
               sexp_038);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_036, sexp_038);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_036, sexp_038);
   }
   function sexp_of_charset(param){
    if(! param) return _e_;
    var
     arg0_043 = param[1],
     res0_044 = caml_call1(Sexplib0_Sexp_conv[7], arg0_043);
    return [1, [0, _d_, [0, res0_044, 0]]];
   }
   function encoding_of_sexp(sexp_049){
    a:
    {
     if(0 === sexp_049[0]){
      var _u_ = sexp_049[1], _v_ = caml_string_compare(_u_, cst_anyEncoding);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           if(0 <= _v_){
            if(0 < _v_){
             if(! caml_string_notequal(_u_, cst_compress)) break f;
             if(! caml_string_notequal(_u_, cst_deflate)) break e;
             if(! caml_string_notequal(_u_, cst_encoding)) break d;
             if(! caml_string_notequal(_u_, cst_gzip)) break c;
             if(caml_string_notequal(_u_, cst_identity)) break a;
             break b;
            }
           }
           else if(caml_string_notequal(_u_, cst_AnyEncoding)){
            if(! caml_string_notequal(_u_, cst_Compress)) break f;
            if(! caml_string_notequal(_u_, cst_Deflate)) break e;
            if(! caml_string_notequal(_u_, cst_Encoding)) break d;
            if(! caml_string_notequal(_u_, cst_Gzip)) break c;
            if(caml_string_notequal(_u_, cst_Identity)) break a;
            break b;
           }
           return 4;
          }
          return 1;
         }
         return 2;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_047, sexp_049);
       }
       return 0;
      }
      return 3;
     }
     var _w_ = sexp_049[1];
     if(! _w_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_047, sexp_049);
     var _x_ = _w_[1];
     if(0 !== _x_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_047, sexp_049);
     var
      tag_050 = _x_[1],
      _y_ = caml_string_compare(tag_050, cst_anyEncoding);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          if(0 <= _y_){
           if(0 < _y_){
            if(! caml_string_notequal(tag_050, cst_compress)) break f;
            if(! caml_string_notequal(tag_050, cst_deflate)) break e;
            if(! caml_string_notequal(tag_050, cst_encoding)) break d;
            if(! caml_string_notequal(tag_050, cst_gzip)) break c;
            if(caml_string_notequal(tag_050, cst_identity)) break a;
            break b;
           }
          }
          else if(caml_string_notequal(tag_050, cst_AnyEncoding)){
           if(! caml_string_notequal(tag_050, cst_Compress)) break f;
           if(! caml_string_notequal(tag_050, cst_Deflate)) break e;
           if(! caml_string_notequal(tag_050, cst_Encoding)) break d;
           if(! caml_string_notequal(tag_050, cst_Gzip)) break c;
           if(caml_string_notequal(tag_050, cst_Identity)) break a;
           break b;
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_047, sexp_049);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_047, sexp_049);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_047, sexp_049);
       }
       var sexp_args_051 = _w_[2];
       if(sexp_args_051 && ! sexp_args_051[2]){
        var
         arg0_052 = sexp_args_051[1],
         res0_053 = caml_call1(Sexplib0_Sexp_conv[31], arg0_052);
        return [0, res0_053];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_047,
                tag_050,
                sexp_049);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_047, sexp_049);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_047, sexp_049);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_047, sexp_049);
   }
   function sexp_of_encoding(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _f_;
       case 1:
        return _g_;
       case 2:
        return _h_;
       case 3:
        return _i_;
       default: return _j_;
     }
    var
     arg0_054 = param[1],
     res0_055 = caml_call1(Sexplib0_Sexp_conv[7], arg0_054);
    return [1, [0, _k_, [0, res0_055, 0]]];
   }
   function language_of_sexp(sexp_060){
    a:
    {
     if(0 === sexp_060[0]){
      var _r_ = sexp_060[1];
      b:
      if(caml_string_notequal(_r_, cst_AnyLanguage)){
       if(caml_string_notequal(_r_, cst_Language)){
        if(! caml_string_notequal(_r_, cst_anyLanguage)) break b;
        if(caml_string_notequal(_r_, cst_language)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_058, sexp_060);
      }
      return 0;
     }
     var _s_ = sexp_060[1];
     if(! _s_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_058, sexp_060);
     var _t_ = _s_[1];
     if(0 !== _t_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_058, sexp_060);
     var tag_061 = _t_[1];
     b:
     if(caml_string_notequal(tag_061, cst_AnyLanguage)){
      if(caml_string_notequal(tag_061, cst_Language)){
       if(! caml_string_notequal(tag_061, cst_anyLanguage)) break b;
       if(caml_string_notequal(tag_061, cst_language)) break a;
      }
      var sexp_args_062 = _s_[2];
      if(sexp_args_062 && ! sexp_args_062[2]){
       var
        arg0_063 = sexp_args_062[1],
        res0_064 =
          caml_call2(Sexplib0_Sexp_conv[44], Sexplib0_Sexp_conv[31], arg0_063);
       return [0, res0_064];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_058,
               tag_061,
               sexp_060);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_058, sexp_060);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_058, sexp_060);
   }
   function sexp_of_language(param){
    if(! param) return _m_;
    var
     arg0_065 = param[1],
     res0_066 =
       caml_call2(Sexplib0_Sexp_conv[20], Sexplib0_Sexp_conv[7], arg0_065);
    return [1, [0, _l_, [0, res0_066, 0]]];
   }
   var q_of_sexp = Sexplib0_Sexp_conv[34], sexp_of_q = Sexplib0_Sexp_conv[10];
   function qlist_of_sexp(of_a_068, x_076){
    function _o_(sexp_074){
     if(1 === sexp_074[0]){
      var _p_ = sexp_074[1];
      if(_p_){
       var _q_ = _p_[2];
       if(_q_ && ! _q_[2]){
        var
         arg1_071 = _q_[1],
         arg0_070 = _p_[1],
         res0_072 = caml_call1(q_of_sexp, arg0_070),
         res1_073 = caml_call1(of_a_068, arg1_071);
        return [0, res0_072, res1_073];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[2], error_source_075, 2, sexp_074);
    }
    return caml_call2(Sexplib0_Sexp_conv[44], _o_, x_076);
   }
   function sexp_of_qlist(of_a_077, x_082){
    function _n_(param){
     var
      arg1_079 = param[2],
      arg0_078 = param[1],
      res0_080 = caml_call1(sexp_of_q, arg0_078),
      res1_081 = caml_call1(of_a_077, arg1_079);
     return [1, [0, res0_080, [0, res1_081, 0]]];
    }
    return caml_call2(Sexplib0_Sexp_conv[20], _n_, x_082);
   }
   var
    Cohttp_Accept_types =
      [0,
       p_of_sexp,
       sexp_of_p,
       media_range_of_sexp,
       sexp_of_media_range,
       charset_of_sexp,
       sexp_of_charset,
       encoding_of_sexp,
       sexp_of_encoding,
       language_of_sexp,
       sexp_of_language,
       q_of_sexp,
       sexp_of_q,
       qlist_of_sexp,
       sexp_of_qlist];
   runtime.caml_register_global
    (73, Cohttp_Accept_types, "Cohttp__Accept_types");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Accept_parser
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Parsing, Stdlib__String, Stringext
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    yylhs =
      "\xff\xff\x05\0\x05\0\x06\0\x06\0\x07\0\x07\0\x07\0\x01\0\x01\0\x01\0\b\0\b\0\x02\0\x02\0\t\0\t\0\x03\0\x03\0\x03\0\n\0\n\0\x04\0\x04\0\0\0\0\0\0\0\0\0",
    yylen =
      "\x02\0\x04\0\x04\0\x02\0\0\0\x04\0\x04\0\x04\0\x02\0\x03\0\x01\0\x02\0\x02\0\x02\0\x03\0\x02\0\x02\0\x02\0\x03\0\x01\0\x02\0\x02\0\x02\0\x03\0\x02\0\x02\0\x02\0\x02\0",
    yydefred =
      "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\0\0\x18\0\0\0\0\0\0\0\x19\0\0\0\0\0\x13\0\0\0\x1a\0\0\0\0\0\0\0\x1b\0\0\0\0\0\0\0\0\0\b\0\0\0\0\0\f\0\x0b\0\0\0\r\0\x10\0\x0f\0\0\0\x11\0\x15\0\x14\0\0\0\x16\0\0\0\0\0\0\0\t\0\0\0\x03\0\x0e\0\x12\0\x17\0\x05\0\x06\0\x07\0\0\0\x02\0\x01\0",
    yydgoto = "\x05\0\t\0\r\0\x12\0\x16\0\x1d\0\x1e\0\n\0\x0e\0\x13\0\x17\0",
    yysindex =
      "\x14\0\0\xff\x0b\xff\t\xff\f\xff\0\0\x1b\xff\0\0#\xff\0\0\xfe\xfe\b\xff\b\xff\0\0\x15\xff\b\xff\0\0\b\xff\0\0\x16\xff\b\xff\b\xff\0\0\x1d\xff'\xff\r\xff\0\xff\0\0\"\xff\b\xff\0\0\0\0\x0b\xff\0\0\0\0\0\0\t\xff\0\0\0\0\0\0\f\xff\0\0\b\xff\b\xff\b\xff\0\0%\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\xff\0\0\0\0",
    yyrindex =
      "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\xff\x1e\xff\0\0\0\0\x1e\xff\0\0\x1e\xff\0\0\0\0\x1e\xff\x1e\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1e\xff\x1e\xff\x1e\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
    yygindex = "\0\0\x11\0\f\0\t\0\x06\0\0\0\xf4\xff\0\0\0\0\0\0\0\0",
    yytable =
      "\x1f\0\x06\0\x1a\0\"\0\x1b\0#\0\x07\0\b\0&\0'\0\x0f\0\x1c\0\x0b\0\x14\0+\0\x10\0\x11\0/\0\f\0\x15\0,\0\x01\0\x02\0\x03\0\x04\0 \0$\0!\0%\0\x18\x003\x004\x005\0(\0\x04\0)\0\x04\0\x19\x007\x008\0*\0.\x006\0-\x000\x001\x002\0",
    yycheck =
      "\f\0\x01\x01\x04\x01\x0f\0\x06\x01\x11\0\x06\x01\x07\x01\x14\0\x15\0\x01\x01\x03\x01\x01\x01\x01\x01\x01\x01\x06\x01\x07\x01\x1d\0\x07\x01\x07\x01\x07\x01\x01\0\x02\0\x03\0\x04\0\x04\x01\x04\x01\x06\x01\x06\x01\x02\x01*\0+\0,\0\x04\x01\x04\x01\x06\x01\x06\x01\x02\x01\x07\x01\b\x01\x01\x01\x07\x01\x05\x01\x1a\0 \0$\0(\0",
    yynames_const = "STAR\0SLASH\0SEMI\0COMMA\0EQUAL\0EOI\0",
    yynames_block = "TOK\0QS\0",
    Stdlib_Parsing = global_data.Stdlib__Parsing,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stringext = global_data.Stringext,
    Stdlib_List = global_data.Stdlib__List,
    cst_parser = "parser",
    _a_ = [0, 257, 258, 259, 260, 261, 262, 0];
   function get_q(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 1000;
     var match = param$0[1];
     if(0 === match[0]){var q = match[1]; return q;}
     var r = param$0[2], param$0 = r;
    }
   }
   function get_rest(pl){
    var _T_ = 0;
    function _U_(param){
     if(0 === param[0]) return function(l){return l;};
     var p = param[1];
     return function(l){return [0, p, l];};
    }
    return caml_call3(Stdlib_List[26], _U_, pl, _T_);
   }
   var
    yytransl_const = _a_.slice(),
    yytransl_block = [0, 263, 264, 0],
    yytablesize = 46;
   function _b_(caml_parser_env){
    var _S_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _S_], 1);
   }
   function _c_(caml_parser_env){
    var _R_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _R_], 1);
   }
   function _d_(caml_parser_env){
    var _Q_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _Q_], 1);
   }
   function _e_(caml_parser_env){
    var _P_ = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    throw caml_maybe_attach_backtrace([0, Stdlib_Parsing[12], _P_], 1);
   }
   function _f_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 2),
     _3 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1, _3];
   }
   function _g_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return [0, _1, 0];
   }
   function _h_(caml_parser_env){
    var _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, get_q(_2), 0];
   }
   function _i_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     _N_ = caml_call1(Stdlib_String[26], _1),
     _O_ = [0, caml_call3(Stringext[3], 0, _N_, 45)];
    return [0, get_q(_2), _O_];
   }
   function _j_(caml_parser_env){return 0;}
   function _k_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 2),
     _3 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1, _3];
   }
   function _l_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return [0, _1, 0];
   }
   function _m_(caml_parser_env){
    var _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, get_q(_2), 4];
   }
   function _n_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     enc = caml_call1(Stdlib_String[26], _1),
     _M_ =
       caml_string_notequal(enc, "compress")
        ? caml_string_notequal
           (enc, "deflate")
          ? caml_string_notequal
             (enc, "gzip")
            ? caml_string_notequal(enc, "identity") ? [0, enc] : 3
            : 0
          : 2
        : 1;
    return [0, get_q(_2), _M_];
   }
   function _o_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 2),
     _3 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1, _3];
   }
   function _p_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return [0, _1, 0];
   }
   function _q_(caml_parser_env){
    var _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, get_q(_2), 0];
   }
   function _r_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     _L_ = [0, caml_call1(Stdlib_String[26], _1)];
    return [0, get_q(_2), _L_];
   }
   function _s_(caml_parser_env){return 0;}
   function _t_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 2),
     _3 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1, _3];
   }
   function _u_(caml_parser_env){
    var _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1);
    return [0, _1, 0];
   }
   function _v_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 3),
     _3 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _4 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     _I_ = get_rest(_4),
     _J_ = caml_call1(Stdlib_String[26], _3),
     _K_ = [0, [0, caml_call1(Stdlib_String[26], _1), _J_], _I_];
    return [0, get_q(_4), _K_];
   }
   function _w_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 3),
     _4 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     _G_ = get_rest(_4),
     _H_ = [0, [1, caml_call1(Stdlib_String[26], _1)], _G_];
    return [0, get_q(_4), _H_];
   }
   function _x_(caml_parser_env){
    var
     _4 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0),
     _F_ = [0, 0, get_rest(_4)];
    return [0, get_q(_4), _F_];
   }
   function _y_(caml_parser_env){return 0;}
   function _z_(caml_parser_env){
    var
     _1 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 1),
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [0, _1, _2];
   }
   function _A_(caml_parser_env){
    var
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 2),
     _4 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    if(! runtime.caml_string_equal(_2, "q")) return [1, [0, _2, _4]];
    try{
     var _D_ = [0, 1000. * runtime.caml_float_of_string(_4) | 0];
     return _D_;
    }
    catch(_E_){
     var _C_ = caml_wrap_exception(_E_);
     if(_C_[1] === Stdlib[7])
      throw caml_maybe_attach_backtrace(Stdlib_Parsing[10], 1);
     throw caml_maybe_attach_backtrace(_C_, 0);
    }
   }
   function _B_(caml_parser_env){
    var
     _2 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 2),
     _4 = caml_call2(Stdlib_Parsing[14], caml_parser_env, 0);
    return [1, [0, _2, _4]];
   }
   var
    yyact =
      [0,
       function(param){return caml_call1(Stdlib[2], cst_parser);},
       _B_,
       _A_,
       _z_,
       _y_,
       _x_,
       _w_,
       _v_,
       _u_,
       _t_,
       _s_,
       _r_,
       _q_,
       _p_,
       _o_,
       _n_,
       _m_,
       _l_,
       _k_,
       _j_,
       _i_,
       _h_,
       _g_,
       _f_,
       _e_,
       _d_,
       _c_,
       _b_],
    yytables =
      [0,
       yyact,
       yytransl_const,
       yytransl_block,
       yylhs,
       yylen,
       yydefred,
       yydgoto,
       yysindex,
       yyrindex,
       yygindex,
       yytablesize,
       yytable,
       yycheck,
       Stdlib_Parsing[16],
       yynames_const,
       yynames_block];
   function media_ranges(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 1, lexfun, lexbuf);
   }
   function charsets(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 2, lexfun, lexbuf);
   }
   function encodings(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 3, lexfun, lexbuf);
   }
   function languages(lexfun, lexbuf){
    return caml_call4(Stdlib_Parsing[13], yytables, 4, lexfun, lexbuf);
   }
   var
    Cohttp_Accept_parser = [0, media_ranges, charsets, encodings, languages];
   runtime.caml_register_global
    (24, Cohttp_Accept_parser, "Cohttp__Accept_parser");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Accept_lexer
//# unitInfo: Requires: Stdlib, Stdlib__Lexing, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = '"',
    ocaml_lex_tables =
      [0,
       "\0\0\xf7\xff\xf8\xff$\0\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xffH\0\t\0\x01\0\xfe\xff\x02\0\xff\xff",
       "\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x02\0\xff\xff",
       "\x03\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0b\0\x0b\0\0\0\x0b\0\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\x04\0\xff\xff\x0e\0\0\0\0\0\0\0\xff\xff\xff\xff\t\0\f\0\x06\0\xff\xff\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\x07\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\0\0\0\0\xff\xff\0\0\0\0\xff\xff\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\x0b\0\r\0\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\n\0\0\0\x03\0\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\xff\xff\xff\xff\x03\0\t\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\n\0\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\xff\xff\xff\xff\t\0\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\0\0\xff\xff\0\0\xff\xff\x03\0\x03\0\x03\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x0b\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0",
       cst$1,
       cst$1,
       cst$1,
       cst$1,
       cst$1,
       cst$1],
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List;
   function header_value$0(counter, lexbuf){
    var _e_ = 0;
    if(counter >= 50)
     return caml_trampoline_return
             (ocaml_lex_header_value_rec$0, [0, lexbuf, _e_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_header_value_rec$0(counter$0, lexbuf, _e_);
   }
   function ocaml_lex_header_value_rec$0(counter, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(8 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         return 0;
        case 1:
         return 1;
        case 2:
         return 2;
        case 3:
         return 3;
        case 4:
         return 4;
        case 5:
         var _d_ = qs(0, lexbuf);
         return [1, caml_call3(Stdlib_List[26], Stdlib[28], _d_, cst)];
        case 6:
         var
          tok = caml_call3(Stdlib_Lexing[16], lexbuf, lexbuf[5], lexbuf[6]);
         return [0, tok];
        case 7:
         if(counter >= 50)
          return caml_trampoline_return(header_value$0, [0, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return header_value$0(counter$0, lexbuf);
        default: return 5;
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function header_value(lexbuf){
    return caml_trampoline(header_value$0(0, lexbuf));
   }
   function ocaml_lex_header_value_rec(lexbuf, ocaml_lex_state){
    return caml_trampoline
            (ocaml_lex_header_value_rec$0(0, lexbuf, ocaml_lex_state));
   }
   function qs$0(counter, sl, lexbuf){
    var _c_ = 10;
    if(counter >= 50)
     return caml_trampoline_return(ocaml_lex_qs_rec$0, [0, sl, lexbuf, _c_]);
    var counter$0 = counter + 1 | 0;
    return ocaml_lex_qs_rec$0(counter$0, sl, lexbuf, _c_);
   }
   function ocaml_lex_qs_rec$0(counter, sl, lexbuf, ocaml_lex_state){
    var ocaml_lex_state$0 = ocaml_lex_state;
    for(;;){
     var
      ocaml_lex_state$1 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(2 >= ocaml_lex_state$1 >>> 0)
      switch(ocaml_lex_state$1){
        case 0:
         var _a_ = [0, cst$0, sl];
         if(counter >= 50)
          return caml_trampoline_return(qs$0, [0, _a_, lexbuf]);
         var counter$0 = counter + 1 | 0;
         return qs$0(counter$0, _a_, lexbuf);
        case 1:
         return sl;
        default:
         var
          s = caml_call3(Stdlib_Lexing[16], lexbuf, lexbuf[5], lexbuf[6]),
          _b_ = [0, s, sl];
         if(counter >= 50)
          return caml_trampoline_return(qs$0, [0, _b_, lexbuf]);
         var counter$1 = counter + 1 | 0;
         return qs$0(counter$1, _b_, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state$0 = ocaml_lex_state$1;
    }
   }
   function qs(sl, lexbuf){return caml_trampoline(qs$0(0, sl, lexbuf));}
   function ocaml_lex_qs_rec(sl, lexbuf, ocaml_lex_state){
    return caml_trampoline(ocaml_lex_qs_rec$0(0, sl, lexbuf, ocaml_lex_state));
   }
   var
    Cohttp_Accept_lexer =
      [0,
       ocaml_lex_tables,
       header_value,
       ocaml_lex_header_value_rec,
       qs,
       ocaml_lex_qs_rec];
   runtime.caml_register_global
    (6, Cohttp_Accept_lexer, "Cohttp__Accept_lexer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Accept
//# unitInfo: Requires: Cohttp__Accept_lexer, Cohttp__Accept_parser, Cohttp__Accept_types, Stdlib, Stdlib__Lexing, Stdlib__List, Stdlib__Printf, Stdlib__String, Stringext
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst$8 = "*",
    cst_qvalue = "qvalue ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$7,
    cst$5 = ",",
    cst$6 = cst$7,
    cst$3 = "-",
    cst$4 = cst$8,
    cst$2 = cst$8,
    cst$1 = cst$8,
    cst$0 = "*/*",
    Stringext = global_data.Stringext,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Cohttp_Accept_parser = global_data.Cohttp__Accept_parser,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Cohttp_Accept_lexer = global_data.Cohttp__Accept_lexer,
    Stdlib_List = global_data.Stdlib__List,
    Cohttp_Accept_types = global_data.Cohttp__Accept_types,
    p_of_sexp = Cohttp_Accept_types[1],
    sexp_of_p = Cohttp_Accept_types[2],
    media_range_of_sexp = Cohttp_Accept_types[3],
    sexp_of_media_range = Cohttp_Accept_types[4],
    charset_of_sexp = Cohttp_Accept_types[5],
    sexp_of_charset = Cohttp_Accept_types[6],
    encoding_of_sexp = Cohttp_Accept_types[7],
    sexp_of_encoding = Cohttp_Accept_types[8],
    language_of_sexp = Cohttp_Accept_types[9],
    sexp_of_language = Cohttp_Accept_types[10],
    q_of_sexp = Cohttp_Accept_types[11],
    sexp_of_q = Cohttp_Accept_types[12],
    qlist_of_sexp = Cohttp_Accept_types[13],
    sexp_of_qlist = Cohttp_Accept_types[14],
    _e_ = [0, [12, 59, [2, 0, [12, 61, [2, 0, [2, 0, 0]]]]], ";%s=%s%s"],
    _f_ =
      [0,
       [12, 59, [2, 0, [11, '="', [2, 0, [12, 34, [2, 0, 0]]]]]],
       ';%s="%s"%s'],
    cst_gzip = "gzip",
    cst_compress = "compress",
    cst_deflate = "deflate",
    cst_identity = "identity",
    _k_ = [0, [2, 0, [12, 47, [2, 0, 0]]], "%s/%s"],
    _l_ = [0, [2, 0, [11, "/*", 0]], "%s/*"],
    _j_ = [0, [2, 0, [11, ";q=", [2, 0, [2, 0, 0]]]], "%s;q=%s%s"],
    _i_ =
      [0,
       [11, cst_qvalue, [4, 0, 0, 0, [11, " must be positive", 0]]],
       "qvalue %d must be positive"],
    _g_ =
      [0,
       [11, cst_qvalue, [4, 0, 0, 0, [11, " must be less than 1000", 0]]],
       "qvalue %d must be less than 1000"],
    _h_ = [0, [11, "0.", [4, 0, [0, 2, 3], 0, 0]], "0.%03d"],
    cst_1 = "1",
    _d_ = [0, [0, 1000, 0], 0],
    _c_ = [0, [0, 1000, 4], 0],
    _b_ = [0, [0, 1000, 0], 0],
    _a_ = [0, [0, 1000, [0, 0, 0]], 0];
   function qsort(l){
    function compare(param, _X_){
     var i = _X_[1], i$0 = param[1];
     return runtime.caml_int_compare(i, i$0);
    }
    return caml_call2(Stdlib_List[57], compare, l);
   }
   function parse_using(p, s){
    var _W_ = caml_call2(Stdlib_Lexing[3], 0, s);
    return caml_call2(p, Cohttp_Accept_lexer[2], _W_);
   }
   function media_ranges(param){
    if(! param) return _a_;
    var s = param[1];
    return parse_using(Cohttp_Accept_parser[1], s);
   }
   function charsets(param){
    if(! param) return _b_;
    var s = param[1];
    return parse_using(Cohttp_Accept_parser[2], s);
   }
   function encodings(param){
    if(! param) return _c_;
    var s = param[1];
    return parse_using(Cohttp_Accept_parser[3], s);
   }
   function languages(param){
    if(! param) return _d_;
    var s = param[1];
    return parse_using(Cohttp_Accept_parser[4], s);
   }
   function string_of_pl(param){
    if(! param) return cst;
    var
     r = param[2],
     match = param[1],
     v = match[2],
     k = match[1],
     e = caml_call1(Stringext[2], v);
    if(runtime.caml_string_equal(v, e)){
     var _U_ = string_of_pl(r);
     return caml_call4(Stdlib_Printf[4], _e_, k, v, _U_);
    }
    var _V_ = string_of_pl(r);
    return caml_call4(Stdlib_Printf[4], _f_, k, e, _V_);
   }
   function accept_el(el, pl, q){
    var _S_ = string_of_pl(pl);
    if(0 <= q)
     if(1000 < q)
      var
       _Q_ = caml_call2(Stdlib_Printf[4], _g_, q),
       _T_ = caml_call1(Stdlib[1], _Q_);
     else
      var _T_ = 1000 === q ? cst_1 : caml_call2(Stdlib_Printf[4], _h_, q);
    else
     var
      _R_ = caml_call2(Stdlib_Printf[4], _i_, q),
      _T_ = caml_call1(Stdlib[1], _R_);
    return caml_call4(Stdlib_Printf[4], _j_, el, _T_, _S_);
   }
   function string_of_media_range(param){
    var match = param[1];
    if(typeof match === "number"){
     var pl = param[2];
     return function(_P_){return accept_el(cst$0, pl, _P_);};
    }
    if(0 === match[0]){
     var
      pl$0 = param[2],
      st = match[2],
      t = match[1],
      _L_ = caml_call3(Stdlib_Printf[4], _k_, t, st);
     return function(_O_){return accept_el(_L_, pl$0, _O_);};
    }
    var
     pl$1 = param[2],
     t$0 = match[1],
     _M_ = caml_call2(Stdlib_Printf[4], _l_, t$0);
    return function(_N_){return accept_el(_M_, pl$1, _N_);};
   }
   function string_of_charset(param){
    if(param){
     var c = param[1], _H_ = 0;
     return function(_K_){return accept_el(c, _H_, _K_);};
    }
    var _I_ = 0;
    return function(_J_){return accept_el(cst$1, _I_, _J_);};
   }
   function string_of_encoding(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        var _v_ = 0;
        return function(_G_){return accept_el(cst_gzip, _v_, _G_);};
       case 1:
        var _w_ = 0;
        return function(_F_){return accept_el(cst_compress, _w_, _F_);};
       case 2:
        var _x_ = 0;
        return function(_E_){return accept_el(cst_deflate, _x_, _E_);};
       case 3:
        var _y_ = 0;
        return function(_D_){return accept_el(cst_identity, _y_, _D_);};
       default:
        var _z_ = 0; return function(_C_){return accept_el(cst$2, _z_, _C_);};
     }
    var e = param[1], _A_ = 0;
    return function(_B_){return accept_el(e, _A_, _B_);};
   }
   function string_of_language(param){
    if(param){
     var
      langl = param[1],
      _q_ = 0,
      _r_ = caml_call2(Stdlib_String[6], cst$3, langl);
     return function(_u_){return accept_el(_r_, _q_, _u_);};
    }
    var _s_ = 0;
    return function(_t_){return accept_el(cst$4, _s_, _t_);};
   }
   function string_of_list(s_of_el){
    return function(param$0){
     var s = cst$6, param = param$0;
     for(;;){
      if(! param) return s;
      var _m_ = param[1], q = _m_[1];
      if(! param[2]){
       var el$0 = _m_[2], _p_ = caml_call2(s_of_el, el$0, q);
       return caml_call2(Stdlib[28], s, _p_);
      }
      var
       r = param[2],
       el = _m_[2],
       _n_ = caml_call2(s_of_el, el, q),
       _o_ = caml_call2(Stdlib[28], _n_, cst$5),
       s$0 = caml_call2(Stdlib[28], s, _o_),
       s = s$0,
       param = r;
     }};
   }
   var
    string_of_media_ranges = string_of_list(string_of_media_range),
    string_of_charsets = string_of_list(string_of_charset),
    string_of_encodings = string_of_list(string_of_encoding),
    string_of_languages = string_of_list(string_of_language),
    Cohttp_Accept =
      [0,
       sexp_of_q,
       q_of_sexp,
       sexp_of_qlist,
       qlist_of_sexp,
       qsort,
       sexp_of_p,
       p_of_sexp,
       sexp_of_media_range,
       media_range_of_sexp,
       sexp_of_charset,
       charset_of_sexp,
       sexp_of_encoding,
       encoding_of_sexp,
       sexp_of_language,
       language_of_sexp,
       media_ranges,
       charsets,
       encodings,
       languages,
       string_of_media_range,
       string_of_charset,
       string_of_encoding,
       string_of_language,
       string_of_media_ranges,
       string_of_charsets,
       string_of_encodings,
       string_of_languages];
   runtime.caml_register_global(34, Cohttp_Accept, "Cohttp__Accept");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Auth
//# unitInfo: Requires: Base64, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib, Stdlib__Printf, Stdlib__Scanf, Stringext
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Basic$1 = "Basic",
    cst_Basic$0 = "Basic ",
    cst_Other = "Other",
    cst_cohttp_src_auth_ml_challen = "cohttp/src/auth.ml.challenge",
    cst_cohttp_src_auth_ml_credent = "cohttp/src/auth.ml.credential",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_009 = cst_cohttp_src_auth_ml_challen,
    error_source_011 = cst_cohttp_src_auth_ml_challen,
    error_source_021 = cst_cohttp_src_auth_ml_credent,
    error_source_031 = cst_cohttp_src_auth_ml_credent,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Base64 = global_data.Base64,
    Stringext = global_data.Stringext,
    Stdlib = global_data.Stdlib,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    _g_ = [0, [11, 'Basic realm="', [2, 0, [12, 34, 0]]], 'Basic realm="%s"'],
    _e_ = [0, [11, cst_Basic$0, [2, 0, 0]], "Basic %s"],
    _f_ = [0, 2],
    _d_ = [0, [2, 0, [12, 58, [2, 0, 0]]], "%s:%s"],
    cst_Basic = cst_Basic$0,
    _b_ = [0, cst_Other],
    _c_ = [0, cst_Basic$1],
    _a_ = [0, cst_Basic$1];
   function challenge_of_sexp(sexp_004){
    if(0 === sexp_004[0]){
     var atom_002 = sexp_004[1];
     return caml_string_notequal(atom_002, cst_Basic$1)
             ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
             : caml_call2
               (Sexplib0_Sexp_conv_error[23], error_source_009, sexp_004);
    }
    var _x_ = sexp_004[1];
    if(! _x_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_009, sexp_004);
    var match = _x_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_009, sexp_004);
    var sexp_args_005 = _x_[2], atom_002$0 = match[1];
    if(caml_string_notequal(atom_002$0, cst_Basic$1))
     return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
    if(sexp_args_005 && ! sexp_args_005[2]){
     var
      arg0_007 = sexp_args_005[1],
      res0_008 = caml_call1(Sexplib0_Sexp_conv[31], arg0_007);
     return [0, -1058563442, res0_008];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[22],
             error_source_009,
             atom_002$0,
             sexp_004);
   }
   function challenge_of_sexp$0(sexp_010){
    try{var _v_ = challenge_of_sexp(sexp_010); return _v_;}
    catch(_w_){
     var _u_ = caml_wrap_exception(_w_);
     if(_u_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_011, sexp_010);
     throw caml_maybe_attach_backtrace(_u_, 0);
    }
   }
   function sexp_of_challenge(param){
    var v_012 = param[2];
    return [1, [0, _a_, [0, caml_call1(Sexplib0_Sexp_conv[7], v_012), 0]]];
   }
   function credential_of_sexp(sexp_016){
    if(0 === sexp_016[0]){
     var atom_014 = sexp_016[1];
     return caml_string_notequal(atom_014, cst_Basic$1)
             ? caml_string_notequal
                (atom_014, cst_Other)
               ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[23], error_source_021, sexp_016)
             : caml_call2
               (Sexplib0_Sexp_conv_error[23], error_source_021, sexp_016);
    }
    var _r_ = sexp_016[1];
    if(! _r_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_021, sexp_016);
    var match = _r_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_021, sexp_016);
    var sexp_args_017 = _r_[2], atom_014$0 = match[1];
    if(caml_string_notequal(atom_014$0, cst_Basic$1)){
     if(caml_string_notequal(atom_014$0, cst_Other))
      return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
     if(sexp_args_017 && ! sexp_args_017[2]){
      var
       arg0_019 = sexp_args_017[1],
       res0_020 = caml_call1(Sexplib0_Sexp_conv[31], arg0_019);
      return [0, -912009552, res0_020];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[22],
              error_source_021,
              atom_014$0,
              sexp_016);
    }
    if(sexp_args_017 && ! sexp_args_017[2]){
     var arg0_028 = sexp_args_017[1];
     a:
     {
      if(1 === arg0_028[0]){
       var _s_ = arg0_028[1];
       if(_s_){
        var _t_ = _s_[2];
        if(_t_ && ! _t_[2]){
         var
          arg1_024 = _t_[1],
          arg0_023 = _s_[1],
          res0_025 = caml_call1(Sexplib0_Sexp_conv[31], arg0_023),
          res1_026 = caml_call1(Sexplib0_Sexp_conv[31], arg1_024),
          res0_029 = [0, res0_025, res1_026];
         break a;
        }
       }
      }
      var
       res0_029 =
         caml_call3
          (Sexplib0_Sexp_conv_error[2], error_source_021, 2, arg0_028);
     }
     return [0, -1058563442, res0_029];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[22],
             error_source_021,
             atom_014$0,
             sexp_016);
   }
   function credential_of_sexp$0(sexp_030){
    try{var _p_ = credential_of_sexp(sexp_030); return _p_;}
    catch(_q_){
     var _o_ = caml_wrap_exception(_q_);
     if(_o_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_031, sexp_030);
     throw caml_maybe_attach_backtrace(_o_, 0);
    }
   }
   function sexp_of_credential(param){
    if(-912009552 <= param[1]){
     var v_037 = param[2];
     return [1, [0, _b_, [0, caml_call1(Sexplib0_Sexp_conv[7], v_037), 0]]];
    }
    var
     v_032 = param[2],
     arg1_034 = v_032[2],
     arg0_033 = v_032[1],
     res0_035 = caml_call1(Sexplib0_Sexp_conv[7], arg0_033),
     res1_036 = caml_call1(Sexplib0_Sexp_conv[7], arg1_034);
    return [1, [0, _c_, [0, [1, [0, res0_035, [0, res1_036, 0]]], 0]]];
   }
   function string_of_credential(cred){
    if(-912009552 <= cred[1]){var buf = cred[2]; return buf;}
    var
     match = cred[2],
     pass = match[2],
     user = match[1],
     _m_ = caml_call3(Stdlib_Printf[4], _d_, user, pass),
     _n_ = caml_call3(Base64[10], 0, 0, _m_);
    return caml_call2(Stdlib[28], cst_Basic, _n_);
   }
   function credential_of_string(buf){
    try{
     var
      _h_ = function(b){return b;},
      b64 = caml_call3(Stdlib_Scanf[4], buf, _e_, _h_),
      _i_ = caml_call5(Base64[6], 0, 0, 0, 0, b64),
      match = caml_call3(Stringext[3], _f_, _i_, 58);
     a:
     {
      if(match){
       var _j_ = match[2];
       if(_j_ && ! _j_[2]){
        var
         pass = _j_[1],
         user = match[1],
         _k_ = [0, -1058563442, [0, user, pass]];
        break a;
       }
      }
      var _k_ = [0, -912009552, buf];
     }
     return _k_;
    }
    catch(_l_){return [0, -912009552, buf];}
   }
   function string_of_challenge(ty){
    var realm = ty[2];
    return caml_call2(Stdlib_Printf[4], _g_, realm);
   }
   var
    Cohttp_Auth =
      [0,
       sexp_of_challenge,
       challenge_of_sexp$0,
       challenge_of_sexp,
       sexp_of_credential,
       credential_of_sexp$0,
       credential_of_sexp,
       string_of_credential,
       credential_of_string,
       string_of_challenge];
   runtime.caml_register_global(25, Cohttp_Auth, "Cohttp__Auth");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Code
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Accepted$0 = "Accepted",
    cst_Already_reported = "Already_reported",
    cst_Bad_gateway = "Bad_gateway",
    cst_Bad_request = "Bad_request",
    cst_Bandwidth_limit_exceeded = "Bandwidth_limit_exceeded",
    cst_Blocked_by_windows_parenta = "Blocked_by_windows_parental_controls",
    cst_CONNECT$0 = "CONNECT",
    cst_Checkpoint$0 = "Checkpoint",
    cst_Client_closed_request = "Client_closed_request",
    cst_Code = "Code",
    cst_Conflict$0 = "Conflict",
    cst_Continue$0 = "Continue",
    cst_Created$0 = "Created",
    cst_DELETE$0 = "DELETE",
    cst_Enhance_your_calm = "Enhance_your_calm",
    cst_Expectation_failed = "Expectation_failed",
    cst_Failed_dependency = "Failed_dependency",
    cst_Forbidden$0 = "Forbidden",
    cst_Found$0 = "Found",
    cst_GET$0 = "GET",
    cst_Gateway_timeout = "Gateway_timeout",
    cst_Gone$0 = "Gone",
    cst_HEAD$0 = "HEAD",
    cst_HTTP_1_0$0 = "HTTP/1.0",
    cst_HTTP_1_1$0 = "HTTP/1.1",
    cst_HTTP_1_0$1 = "HTTP_1_0",
    cst_HTTP_1_1$1 = "HTTP_1_1",
    cst_Http_version_not_supported = "Http_version_not_supported",
    cst_I_m_a_teapot = "I_m_a_teapot",
    cst_Im_used = "Im_used",
    cst_Insufficient_storage = "Insufficient_storage",
    cst_Internal_server_error = "Internal_server_error",
    cst_Length_required = "Length_required",
    cst_Locked = "Locked",
    cst_Loop_detected = "Loop_detected",
    cst_Method_not_allowed = "Method_not_allowed",
    cst_Moved_permanently = "Moved_permanently",
    cst_Multi_status = "Multi_status",
    cst_Multiple_choices = "Multiple_choices",
    cst_Network_authentication_req = "Network_authentication_required",
    cst_Network_connect_timeout_er$0 = "Network_connect_timeout_error",
    cst_Network_read_timeout_error$0 = "Network_read_timeout_error",
    cst_No_content = "No_content",
    cst_No_response = "No_response",
    cst_Non_authoritative_informat = "Non_authoritative_information",
    cst_Not_acceptable = "Not_acceptable",
    cst_Not_extended = "Not_extended",
    cst_Not_found = "Not_found",
    cst_Not_implemented = "Not_implemented",
    cst_Not_modified = "Not_modified",
    cst_OK$0 = "OK",
    cst_OPTIONS$0 = "OPTIONS",
    cst_Other = "Other",
    cst_PATCH$0 = "PATCH",
    cst_POST$0 = "POST",
    cst_PUT$0 = "PUT",
    cst_Partial_content = "Partial_content",
    cst_Payment_required = "Payment_required",
    cst_Permanent_redirect = "Permanent_redirect",
    cst_Precondition_failed = "Precondition_failed",
    cst_Precondition_required = "Precondition_required",
    cst_Processing = "Processing",
    cst_Proxy_authentication_requi = "Proxy_authentication_required",
    cst_Request_entity_too_large = "Request_entity_too_large",
    cst_Request_header_fields_too_ = "Request_header_fields_too_large",
    cst_Request_timeout = "Request_timeout",
    cst_Request_uri_too_long = "Request_uri_too_long",
    cst_Requested_range_not_satisf = "Requested_range_not_satisfiable",
    cst_Reset_content = "Reset_content",
    cst_Retry_with = "Retry_with",
    cst_See_other = "See_other",
    cst_Service_unavailable = "Service_unavailable",
    cst_Switch_proxy = "Switch_proxy",
    cst_Switching_protocols = "Switching_protocols",
    cst_TRACE$0 = "TRACE",
    cst_Temporary_redirect = "Temporary_redirect",
    cst_Too_many_requests = "Too_many_requests",
    cst_Unauthorized$0 = "Unauthorized",
    cst_Unprocessable_entity = "Unprocessable_entity",
    cst_Unsupported_media_type = "Unsupported_media_type",
    cst_Upgrade_required = "Upgrade_required",
    cst_Use_proxy = "Use_proxy",
    cst_Variant_also_negotiates = "Variant_also_negotiates",
    cst_Wrong_exchange_server = "Wrong_exchange_server",
    cst_cohttp_src_code_ml_client_ = "cohttp/src/code.ml.client_error_status",
    cst_cohttp_src_code_ml_informa = "cohttp/src/code.ml.informational_status",
    cst_cohttp_src_code_ml_meth = "cohttp/src/code.ml.meth",
    cst_cohttp_src_code_ml_redirec = "cohttp/src/code.ml.redirection_status",
    cst_cohttp_src_code_ml_server_ = "cohttp/src/code.ml.server_error_status",
    cst_cohttp_src_code_ml_status_ = "cohttp/src/code.ml.status_code",
    cst_cohttp_src_code_ml_success = "cohttp/src/code.ml.success_status",
    cst_cohttp_src_code_ml_version = "cohttp/src/code.ml.version",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_006 = cst_cohttp_src_code_ml_version,
    error_source_011 = cst_cohttp_src_code_ml_version,
    error_source_018 = cst_cohttp_src_code_ml_meth,
    error_source_023 = cst_cohttp_src_code_ml_meth,
    error_source_030 = cst_cohttp_src_code_ml_informa,
    error_source_032 = cst_cohttp_src_code_ml_informa,
    error_source_038 = cst_cohttp_src_code_ml_success,
    error_source_040 = cst_cohttp_src_code_ml_success,
    error_source_046 = cst_cohttp_src_code_ml_redirec,
    error_source_048 = cst_cohttp_src_code_ml_redirec,
    error_source_054 = cst_cohttp_src_code_ml_client_,
    error_source_056 = cst_cohttp_src_code_ml_client_,
    error_source_062 = cst_cohttp_src_code_ml_server_,
    error_source_064 = cst_cohttp_src_code_ml_server_,
    error_source_067 = "cohttp/src/code.ml.status",
    error_source_081 = cst_cohttp_src_code_ml_status_,
    error_source_083 = cst_cohttp_src_code_ml_status_,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    cst_Multiple_Choices = "Multiple Choices",
    cst_Moved_Permanently = "Moved Permanently",
    cst_Found = cst_Found$0,
    cst_See_Other = "See Other",
    cst_Not_Modified = "Not Modified",
    cst_Use_Proxy_since_HTTP_1_1 = "Use Proxy (since HTTP/1.1)",
    cst_Switch_Proxy = "Switch Proxy",
    cst_Temporary_Redirect_since_H = "Temporary Redirect (since HTTP/1.1)",
    cst_Permanent_Redirect = "Permanent Redirect",
    cst_OK = cst_OK$0,
    cst_Created = cst_Created$0,
    cst_Accepted = cst_Accepted$0,
    cst_Non_Authoritative_Informat =
      "Non-Authoritative Information (since HTTP/1.1)",
    cst_No_Content = "No Content",
    cst_Reset_Content = "Reset Content",
    cst_Partial_Content = "Partial Content",
    cst_Multi_Status_WebDAV_RFC_49 = "Multi-Status (WebDAV) (RFC 4918)",
    cst_Already_Reported_WebDAV_RF = "Already Reported (WebDAV) (RFC 5842)",
    cst_IM_Used_RFC_3229 = "IM Used (RFC 3229)",
    cst_Continue = cst_Continue$0,
    cst_Switching_Protocols = "Switching Protocols",
    cst_Processing_WebDAV_RFC_2518 = "Processing (WebDAV) (RFC 2518)",
    cst_Checkpoint = cst_Checkpoint$0,
    cst_Bad_Request = "Bad Request",
    cst_Unauthorized = cst_Unauthorized$0,
    cst_Payment_Required = "Payment Required",
    cst_Forbidden = cst_Forbidden$0,
    cst_Not_Found = "Not Found",
    cst_Method_Not_Allowed = "Method Not Allowed",
    cst_Not_Acceptable = "Not Acceptable",
    cst_Proxy_Authentication_Requi = "Proxy Authentication Required",
    cst_Request_Timeout = "Request Timeout",
    cst_Conflict = cst_Conflict$0,
    cst_Gone = cst_Gone$0,
    cst_Length_Required = "Length Required",
    cst_Precondition_Failed = "Precondition Failed",
    cst_Request_Entity_Too_Large = "Request Entity Too Large",
    cst_Request_URI_Too_Long = "Request-URI Too Long",
    cst_Unsupported_Media_Type = "Unsupported Media Type",
    cst_Requested_Range_Not_Satisf = "Requested Range Not Satisfiable",
    cst_Expectation_Failed = "Expectation Failed",
    cst_I_m_a_teapot_RFC_2324 = "I'm a teapot (RFC 2324)",
    cst_Enhance_Your_Calm = "Enhance Your Calm",
    cst_Unprocessable_Entity_WebDA =
      "Unprocessable Entity (WebDAV) (RFC 4918)",
    cst_Locked_WebDAV_RFC_4918 = "Locked (WebDAV) (RFC 4918)",
    cst_Failed_Dependency_WebDAV_R = "Failed Dependency (WebDAV) (RFC 4918)",
    cst_Upgrade_Required_RFC_2817 = "Upgrade Required (RFC 2817)",
    cst_Precondition_Required = "Precondition Required",
    cst_Too_Many_Requests = "Too Many Requests",
    cst_Request_Header_Fields_Too_ = "Request Header Fields Too Large",
    cst_No_Response = "No Response",
    cst_Retry_With = "Retry With",
    cst_Blocked_by_Windows_Parenta = "Blocked by Windows Parental Controls",
    cst_Wrong_Exchange_server = "Wrong Exchange server",
    cst_Client_Closed_Request = "Client Closed Request",
    cst_Internal_Server_Error = "Internal Server Error",
    cst_Not_Implemented = "Not Implemented",
    cst_Bad_Gateway = "Bad Gateway",
    cst_Service_Unavailable = "Service Unavailable",
    cst_Gateway_Timeout = "Gateway Timeout",
    cst_HTTP_Version_Not_Supported = "HTTP Version Not Supported",
    cst_Variant_Also_Negotiates_RF = "Variant Also Negotiates (RFC 2295)",
    cst_Insufficient_Storage_WebDA =
      "Insufficient Storage (WebDAV) (RFC 4918)",
    cst_Loop_Detected_WebDAV_RFC_5 = "Loop Detected (WebDAV) (RFC 5842)",
    cst_Bandwidth_Limit_Exceeded_A =
      "Bandwidth Limit Exceeded (Apache bw/limited extension)",
    cst_Not_Extended_RFC_2774 = "Not Extended (RFC 2774)",
    cst_Network_Authentication_Req = "Network Authentication Required",
    cst_Network_connect_timeout_er = "Network connect timeout error",
    cst_Network_read_timeout_error = "Network read timeout error",
    cst_408_Request_Timeout = "408 Request Timeout",
    cst_307_Temporary_Redirect_sin = "307 Temporary Redirect (since HTTP/1.1)",
    cst_103_Checkpoint = "103 Checkpoint",
    cst_206_Partial_Content = "206 Partial Content",
    cst_417_Expectation_Failed = "417 Expectation Failed",
    cst_499_Client_Closed_Request = "499 Client Closed Request",
    cst_510_Not_Extended_RFC_2774 = "510 Not Extended (RFC 2774)",
    cst_428_Precondition_Required = "428 Precondition Required",
    cst_509_Bandwidth_Limit_Exceed =
      "509 Bandwidth Limit Exceeded (Apache bw/limited extension)",
    cst_410_Gone = "410 Gone",
    cst_599_Network_connect_timeou = "599 Network connect timeout error",
    cst_504_Gateway_Timeout = "504 Gateway Timeout",
    cst_449_Retry_With = "449 Retry With",
    cst_451_Wrong_Exchange_server = "451 Wrong Exchange server",
    cst_422_Unprocessable_Entity_W =
      "422 Unprocessable Entity (WebDAV) (RFC 4918)",
    cst_202_Accepted = "202 Accepted",
    cst_424_Failed_Dependency_WebD =
      "424 Failed Dependency (WebDAV) (RFC 4918)",
    cst_308_Permanent_Redirect = "308 Permanent Redirect",
    cst_418_I_m_a_teapot_RFC_2324 = "418 I'm a teapot (RFC 2324)",
    cst_302_Found = "302 Found",
    cst_301_Moved_Permanently = "301 Moved Permanently",
    cst_401_Unauthorized = "401 Unauthorized",
    cst_416_Requested_Range_Not_Sa = "416 Requested Range Not Satisfiable",
    cst_412_Precondition_Failed = "412 Precondition Failed",
    cst_303_See_Other = "303 See Other",
    cst_423_Locked_WebDAV_RFC_4918 = "423 Locked (WebDAV) (RFC 4918)",
    cst_444_No_Response = "444 No Response",
    cst_100_Continue = "100 Continue",
    cst_508_Loop_Detected_WebDAV_R = "508 Loop Detected (WebDAV) (RFC 5842)",
    cst_507_Insufficient_Storage_W =
      "507 Insufficient Storage (WebDAV) (RFC 4918)",
    cst_203_Non_Authoritative_Info =
      "203 Non-Authoritative Information (since HTTP/1.1)",
    cst_429_Too_Many_Requests = "429 Too Many Requests",
    cst_413_Request_Entity_Too_Lar = "413 Request Entity Too Large",
    cst_300_Multiple_Choices = "300 Multiple Choices",
    cst_405_Method_Not_Allowed = "405 Method Not Allowed",
    cst_200_OK = "200 OK",
    cst_407_Proxy_Authentication_R = "407 Proxy Authentication Required",
    cst_511_Network_Authentication = "511 Network Authentication Required",
    cst_598_Network_read_timeout_e = "598 Network read timeout error",
    cst_409_Conflict = "409 Conflict",
    cst_400_Bad_Request = "400 Bad Request",
    cst_406_Not_Acceptable = "406 Not Acceptable",
    cst_306_Switch_Proxy = "306 Switch Proxy",
    cst_411_Length_Required = "411 Length Required",
    cst_205_Reset_Content = "205 Reset Content",
    cst_226_IM_Used_RFC_3229 = "226 IM Used (RFC 3229)",
    cst_208_Already_Reported_WebDA =
      "208 Already Reported (WebDAV) (RFC 5842)",
    cst_404_Not_Found = "404 Not Found",
    cst_304_Not_Modified = "304 Not Modified",
    cst_305_Use_Proxy_since_HTTP_1 = "305 Use Proxy (since HTTP/1.1)",
    cst_403_Forbidden = "403 Forbidden",
    cst_415_Unsupported_Media_Type = "415 Unsupported Media Type",
    cst_501_Not_Implemented = "501 Not Implemented",
    cst_204_No_Content = "204 No Content",
    cst_201_Created = "201 Created",
    cst_402_Payment_Required = "402 Payment Required",
    cst_506_Variant_Also_Negotiate = "506 Variant Also Negotiates (RFC 2295)",
    cst_500_Internal_Server_Error = "500 Internal Server Error",
    cst_503_Service_Unavailable = "503 Service Unavailable",
    cst_420_Enhance_Your_Calm = "420 Enhance Your Calm",
    cst_102_Processing_WebDAV_RFC_ = "102 Processing (WebDAV) (RFC 2518)",
    cst_426_Upgrade_Required_RFC_2 = "426 Upgrade Required (RFC 2817)",
    cst_207_Multi_Status_WebDAV_RF = "207 Multi-Status (WebDAV) (RFC 4918)",
    cst_502_Bad_Gateway = "502 Bad Gateway",
    cst_505_HTTP_Version_Not_Suppo = "505 HTTP Version Not Supported",
    cst_101_Switching_Protocols = "101 Switching Protocols",
    cst_414_Request_URI_Too_Long = "414 Request-URI Too Long",
    cst_450_Blocked_by_Windows_Par =
      "450 Blocked by Windows Parental Controls",
    cst_431_Request_Header_Fields_ = "431 Request Header Fields Too Large",
    cst_Status = " Status ",
    cst_PATCH = cst_PATCH$0,
    cst_POST = cst_POST$0,
    cst_HEAD = cst_HEAD$0,
    cst_CONNECT = cst_CONNECT$0,
    cst_DELETE = cst_DELETE$0,
    cst_TRACE = cst_TRACE$0,
    cst_PUT = cst_PUT$0,
    cst_GET = cst_GET$0,
    cst_OPTIONS = cst_OPTIONS$0,
    cst_HTTP_1_1 = cst_HTTP_1_1$0,
    cst_HTTP_1_0 = cst_HTTP_1_0$0,
    _aC_ = [0, cst_Code],
    _ao_ = [0, cst_Not_extended],
    _ap_ = [0, cst_Bandwidth_limit_exceeded],
    _aq_ = [0, cst_Network_connect_timeout_er$0],
    _ar_ = [0, cst_Gateway_timeout],
    _at_ = [0, cst_Loop_detected],
    _au_ = [0, cst_Network_authentication_req],
    _as_ = [0, cst_Insufficient_storage],
    _av_ = [0, cst_Network_read_timeout_error$0],
    _aw_ = [0, cst_Not_implemented],
    _ax_ = [0, cst_Variant_also_negotiates],
    _ay_ = [0, cst_Internal_server_error],
    _aA_ = [0, cst_Service_unavailable],
    _aB_ = [0, cst_Http_version_not_supported],
    _az_ = [0, cst_Bad_gateway],
    _K_ = [0, cst_Request_timeout],
    _L_ = [0, cst_Expectation_failed],
    _M_ = [0, cst_Client_closed_request],
    _N_ = [0, cst_Precondition_required],
    _O_ = [0, cst_Gone$0],
    _P_ = [0, cst_Wrong_exchange_server],
    _Q_ = [0, cst_Retry_with],
    _R_ = [0, cst_Unprocessable_entity],
    _S_ = [0, cst_Failed_dependency],
    _T_ = [0, cst_I_m_a_teapot],
    _U_ = [0, cst_Requested_range_not_satisf],
    _V_ = [0, cst_Unauthorized$0],
    _W_ = [0, cst_Precondition_failed],
    _X_ = [0, cst_Locked],
    _Y_ = [0, cst_No_response],
    _Z_ = [0, cst_Too_many_requests],
    ___ = [0, cst_Request_entity_too_large],
    _$_ = [0, cst_Method_not_allowed],
    _aa_ = [0, cst_Proxy_authentication_requi],
    _ab_ = [0, cst_Conflict$0],
    _ac_ = [0, cst_Bad_request],
    _ad_ = [0, cst_Not_acceptable],
    _ae_ = [0, cst_Length_required],
    _af_ = [0, cst_Not_found],
    _ag_ = [0, cst_Forbidden$0],
    _ah_ = [0, cst_Unsupported_media_type],
    _ai_ = [0, cst_Payment_required],
    _aj_ = [0, cst_Enhance_your_calm],
    _ak_ = [0, cst_Upgrade_required],
    _al_ = [0, cst_Request_uri_too_long],
    _am_ = [0, cst_Blocked_by_windows_parenta],
    _an_ = [0, cst_Request_header_fields_too_],
    _C_ = [0, cst_Temporary_redirect],
    _D_ = [0, cst_Permanent_redirect],
    _E_ = [0, cst_Found$0],
    _F_ = [0, cst_See_other],
    _B_ = [0, cst_Moved_permanently],
    _G_ = [0, cst_Multiple_choices],
    _H_ = [0, cst_Switch_proxy],
    _I_ = [0, cst_Not_modified],
    _J_ = [0, cst_Use_proxy],
    _s_ = [0, cst_Partial_content],
    _t_ = [0, cst_Accepted$0],
    _u_ = [0, cst_Non_authoritative_informat],
    _v_ = [0, cst_Reset_content],
    _r_ = [0, cst_OK$0],
    _x_ = [0, cst_Im_used],
    _y_ = [0, cst_Already_reported],
    _z_ = [0, cst_No_content],
    _A_ = [0, cst_Multi_status],
    _w_ = [0, cst_Created$0],
    _n_ = [0, cst_Checkpoint$0],
    _o_ = [0, cst_Continue$0],
    _p_ = [0, cst_Processing],
    _q_ = [0, cst_Switching_protocols],
    _e_ = [0, cst_PATCH$0],
    _f_ = [0, cst_POST$0],
    _g_ = [0, cst_HEAD$0],
    _h_ = [0, cst_CONNECT$0],
    _d_ = [0, cst_DELETE$0],
    _i_ = [0, cst_TRACE$0],
    _j_ = [0, cst_PUT$0],
    _k_ = [0, cst_GET$0],
    _l_ = [0, cst_OPTIONS$0],
    _m_ = [0, cst_Other],
    _a_ = [0, cst_HTTP_1_1$1],
    _b_ = [0, cst_HTTP_1_0$1],
    _c_ = [0, cst_Other];
   function version_of_sexp(sexp_004){
    if(0 === sexp_004[0]){
     var atom_002 = sexp_004[1];
     return caml_string_notequal(atom_002, cst_HTTP_1_0$1)
             ? caml_string_notequal
                (atom_002, cst_HTTP_1_1$1)
               ? caml_string_notequal
                  (atom_002, cst_Other)
                 ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[23], error_source_006, sexp_004)
               : 540315116
             : 540315115;
    }
    var _bx_ = sexp_004[1];
    if(! _bx_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_004);
    var match = _bx_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_006, sexp_004);
    var sexp_args_005 = _bx_[2], atom_002$0 = match[1];
    if(! caml_string_notequal(atom_002$0, cst_HTTP_1_0$1))
     return caml_call2
             (Sexplib0_Sexp_conv_error[21], error_source_006, sexp_004);
    if(! caml_string_notequal(atom_002$0, cst_HTTP_1_1$1))
     return caml_call2
             (Sexplib0_Sexp_conv_error[21], error_source_006, sexp_004);
    if(caml_string_notequal(atom_002$0, cst_Other))
     return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
    if(sexp_args_005 && ! sexp_args_005[2]){
     var
      arg0_008 = sexp_args_005[1],
      res0_009 = caml_call1(Sexplib0_Sexp_conv[31], arg0_008);
     return [0, -912009552, res0_009];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[22],
             error_source_006,
             atom_002$0,
             sexp_004);
   }
   function version_of_sexp$0(sexp_010){
    try{var _bv_ = version_of_sexp(sexp_010); return _bv_;}
    catch(_bw_){
     var _bu_ = caml_wrap_exception(_bw_);
     if(_bu_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_011, sexp_010);
     throw caml_maybe_attach_backtrace(_bu_, 0);
    }
   }
   function sexp_of_version(param){
    if(typeof param === "number") return 540315116 <= param ? _a_ : _b_;
    var v_012 = param[2];
    return [1, [0, _c_, [0, caml_call1(Sexplib0_Sexp_conv[7], v_012), 0]]];
   }
   function meth_of_sexp(sexp_016){
    if(0 === sexp_016[0]){
     var
      atom_014 = sexp_016[1],
      switch$0 = caml_string_compare(atom_014, cst_Other);
     if(0 <= switch$0){
      if(0 >= switch$0)
       return caml_call2
               (Sexplib0_Sexp_conv_error[23], error_source_018, sexp_016);
      if(! caml_string_notequal(atom_014, cst_PATCH$0)) return 994393768;
      if(! caml_string_notequal(atom_014, cst_POST$0)) return 891112544;
      if(! caml_string_notequal(atom_014, cst_PUT$0)) return 3997359;
      if(! caml_string_notequal(atom_014, cst_TRACE$0)) return 336447077;
     }
     else{
      if(! caml_string_notequal(atom_014, cst_CONNECT$0)) return 357830602;
      if(! caml_string_notequal(atom_014, cst_DELETE$0)) return 492530731;
      if(! caml_string_notequal(atom_014, cst_GET$0)) return 3546230;
      if(! caml_string_notequal(atom_014, cst_HEAD$0)) return 801894688;
      if(! caml_string_notequal(atom_014, cst_OPTIONS$0)) return -539883714;
     }
     return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
    }
    var _bt_ = sexp_016[1];
    if(! _bt_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_018, sexp_016);
    var match = _bt_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_018, sexp_016);
    var
     sexp_args_017 = _bt_[2],
     atom_014$0 = match[1],
     switch$1 = caml_string_compare(atom_014$0, cst_Other);
    if(0 <= switch$1){
     if(0 >= switch$1){
      if(sexp_args_017 && ! sexp_args_017[2]){
       var
        arg0_020 = sexp_args_017[1],
        res0_021 = caml_call1(Sexplib0_Sexp_conv[31], arg0_020);
       return [0, -912009552, res0_021];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[22],
               error_source_018,
               atom_014$0,
               sexp_016);
     }
     if
      (!
       caml_string_notequal(atom_014$0, cst_PATCH$0)
       ||
        !
        caml_string_notequal(atom_014$0, cst_POST$0)
        ||
         !
         caml_string_notequal(atom_014$0, cst_PUT$0)
         || ! caml_string_notequal(atom_014$0, cst_TRACE$0))
      return caml_call2
              (Sexplib0_Sexp_conv_error[21], error_source_018, sexp_016);
    }
    else if
     (!
      caml_string_notequal(atom_014$0, cst_CONNECT$0)
      ||
       !
       caml_string_notequal(atom_014$0, cst_DELETE$0)
       ||
        !
        caml_string_notequal(atom_014$0, cst_GET$0)
        ||
         !
         caml_string_notequal(atom_014$0, cst_HEAD$0)
         || ! caml_string_notequal(atom_014$0, cst_OPTIONS$0))
     return caml_call2
             (Sexplib0_Sexp_conv_error[21], error_source_018, sexp_016);
    return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
   }
   function meth_of_sexp$0(sexp_022){
    try{var _br_ = meth_of_sexp(sexp_022); return _br_;}
    catch(_bs_){
     var _bq_ = caml_wrap_exception(_bs_);
     if(_bq_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_023, sexp_022);
     throw caml_maybe_attach_backtrace(_bq_, 0);
    }
   }
   function sexp_of_meth(param){
    if(typeof param === "number")
     return 357830602 <= param
             ? 492530731
               === param
               ? _d_
               : 891112544
                 <= param
                 ? 994393768 <= param ? _e_ : _f_
                 : 801894688 <= param ? _g_ : _h_
             : 3997359
               <= param
               ? 336447077 <= param ? _i_ : _j_
               : 3546230 <= param ? _k_ : _l_;
    var v_024 = param[2];
    return [1, [0, _m_, [0, caml_call1(Sexplib0_Sexp_conv[7], v_024), 0]]];
   }
   function informational_status_of_sexp(sexp_028){
    if(0 === sexp_028[0]){
     var atom_026 = sexp_028[1];
     return caml_string_notequal(atom_026, cst_Checkpoint$0)
             ? caml_string_notequal
                (atom_026, cst_Continue$0)
               ? caml_string_notequal
                  (atom_026, cst_Processing)
                 ? caml_string_notequal
                    (atom_026, cst_Switching_protocols)
                   ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                   : -1021676630
                 : -840540685
               : 192584839
             : 973294248;
    }
    var _bp_ = sexp_028[1];
    if(! _bp_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_030, sexp_028);
    var match = _bp_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_030, sexp_028);
    var atom_026$0 = match[1];
    return caml_string_notequal(atom_026$0, cst_Checkpoint$0)
            ? caml_string_notequal
               (atom_026$0, cst_Continue$0)
              ? caml_string_notequal
                 (atom_026$0, cst_Processing)
                ? caml_string_notequal
                   (atom_026$0, cst_Switching_protocols)
                  ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[21], error_source_030, sexp_028)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[21], error_source_030, sexp_028)
              : caml_call2
                (Sexplib0_Sexp_conv_error[21], error_source_030, sexp_028)
            : caml_call2
              (Sexplib0_Sexp_conv_error[21], error_source_030, sexp_028);
   }
   function informational_status_of_sexp$0(sexp_031){
    try{var _bn_ = informational_status_of_sexp(sexp_031); return _bn_;}
    catch(_bo_){
     var _bm_ = caml_wrap_exception(_bo_);
     if(_bm_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_032, sexp_031);
     throw caml_maybe_attach_backtrace(_bm_, 0);
    }
   }
   function sexp_of_informational_status(param){
    return 192584839 <= param
            ? 973294248 <= param ? _n_ : _o_
            : -840540685 <= param ? _p_ : _q_;
   }
   function success_status_of_sexp(sexp_036){
    if(0 !== sexp_036[0]){
     var _bl_ = sexp_036[1];
     if(! _bl_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_038, sexp_036);
     var match = _bl_[1];
     if(0 !== match[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_038, sexp_036);
     var
      atom_034$0 = match[1],
      switch$1 = caml_string_compare(atom_034$0, cst_No_content);
     if(0 <= switch$1){
      if
       (0 >= switch$1
        ||
         !
         caml_string_notequal(atom_034$0, cst_Non_authoritative_informat)
         ||
          !
          caml_string_notequal(atom_034$0, cst_OK$0)
          ||
           !
           caml_string_notequal(atom_034$0, cst_Partial_content)
           || ! caml_string_notequal(atom_034$0, cst_Reset_content))
       return caml_call2
               (Sexplib0_Sexp_conv_error[21], error_source_038, sexp_036);
     }
     else if
      (!
       caml_string_notequal(atom_034$0, cst_Accepted$0)
       ||
        !
        caml_string_notequal(atom_034$0, cst_Already_reported)
        ||
         !
         caml_string_notequal(atom_034$0, cst_Created$0)
         ||
          !
          caml_string_notequal(atom_034$0, cst_Im_used)
          || ! caml_string_notequal(atom_034$0, cst_Multi_status))
      return caml_call2
              (Sexplib0_Sexp_conv_error[21], error_source_038, sexp_036);
     return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
    }
    var
     atom_034 = sexp_036[1],
     switch$0 = caml_string_compare(atom_034, cst_No_content);
    if(0 <= switch$0){
     if(0 >= switch$0) return -527633381;
     if(! caml_string_notequal(atom_034, cst_Non_authoritative_informat))
      return 102779818;
     if(! caml_string_notequal(atom_034, cst_OK$0)) return 17692;
     if(! caml_string_notequal(atom_034, cst_Partial_content))
      return 893234971;
     if(! caml_string_notequal(atom_034, cst_Reset_content))
      return -234002583;
    }
    else{
     if(! caml_string_notequal(atom_034, cst_Accepted$0)) return 566851975;
     if(! caml_string_notequal(atom_034, cst_Already_reported))
      return -330714374;
     if(! caml_string_notequal(atom_034, cst_Created$0)) return -558113336;
     if(! caml_string_notequal(atom_034, cst_Im_used)) return -247210088;
     if(! caml_string_notequal(atom_034, cst_Multi_status)) return -886248552;
    }
    return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
   }
   function success_status_of_sexp$0(sexp_039){
    try{var _bj_ = success_status_of_sexp(sexp_039); return _bj_;}
    catch(_bk_){
     var _bi_ = caml_wrap_exception(_bk_);
     if(_bi_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_040, sexp_039);
     throw caml_maybe_attach_backtrace(_bi_, 0);
    }
   }
   function sexp_of_success_status(param){
    return -234002583 <= param
            ? 17692
              === param
              ? _r_
              : 566851975
                <= param
                ? 893234971 <= param ? _s_ : _t_
                : 102779818 <= param ? _u_ : _v_
            : -558113336
              === param
              ? _w_
              : -330714374
                <= param
                ? -247210088 <= param ? _x_ : _y_
                : -527633381 <= param ? _z_ : _A_;
   }
   function redirection_status_of_sexp(sexp_044){
    if(0 === sexp_044[0]){
     var atom_042 = sexp_044[1];
     return caml_string_notequal(atom_042, cst_Found$0)
             ? caml_string_notequal
                (atom_042, cst_Moved_permanently)
               ? caml_string_notequal
                  (atom_042, cst_Multiple_choices)
                 ? caml_string_notequal
                    (atom_042, cst_Not_modified)
                   ? caml_string_notequal
                      (atom_042, cst_Permanent_redirect)
                     ? caml_string_notequal
                        (atom_042, cst_See_other)
                       ? caml_string_notequal
                          (atom_042, cst_Switch_proxy)
                         ? caml_string_notequal
                            (atom_042, cst_Temporary_redirect)
                           ? caml_string_notequal
                              (atom_042, cst_Use_proxy)
                             ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                             : -398446314
                           : 1034456810
                         : -199968061
                       : 260151748
                     : 514453165
                   : -387970219
                 : 18898339
               : 384167631
             : 398750242;
    }
    var _bh_ = sexp_044[1];
    if(! _bh_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_046, sexp_044);
    var match = _bh_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_046, sexp_044);
    var atom_042$0 = match[1];
    return caml_string_notequal(atom_042$0, cst_Found$0)
            ? caml_string_notequal
               (atom_042$0, cst_Moved_permanently)
              ? caml_string_notequal
                 (atom_042$0, cst_Multiple_choices)
                ? caml_string_notequal
                   (atom_042$0, cst_Not_modified)
                  ? caml_string_notequal
                     (atom_042$0, cst_Permanent_redirect)
                    ? caml_string_notequal
                       (atom_042$0, cst_See_other)
                      ? caml_string_notequal
                         (atom_042$0, cst_Switch_proxy)
                        ? caml_string_notequal
                           (atom_042$0, cst_Temporary_redirect)
                          ? caml_string_notequal
                             (atom_042$0, cst_Use_proxy)
                            ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                            : caml_call2
                              (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044)
                          : caml_call2
                            (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044)
                        : caml_call2
                          (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044)
                      : caml_call2
                        (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044)
                    : caml_call2
                      (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044)
                  : caml_call2
                    (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044)
                : caml_call2
                  (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044)
              : caml_call2
                (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044)
            : caml_call2
              (Sexplib0_Sexp_conv_error[21], error_source_046, sexp_044);
   }
   function redirection_status_of_sexp$0(sexp_047){
    try{var _bf_ = redirection_status_of_sexp(sexp_047); return _bf_;}
    catch(_bg_){
     var _be_ = caml_wrap_exception(_bg_);
     if(_be_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_048, sexp_047);
     throw caml_maybe_attach_backtrace(_be_, 0);
    }
   }
   function sexp_of_redirection_status(param){
    return 260151748 <= param
            ? 384167631
              === param
              ? _B_
              : 514453165
                <= param
                ? 1034456810 <= param ? _C_ : _D_
                : 398750242 <= param ? _E_ : _F_
            : -199968061
              <= param
              ? 18898339 <= param ? _G_ : _H_
              : -387970219 <= param ? _I_ : _J_;
   }
   function client_error_status_of_sexp(sexp_052){
    if(0 !== sexp_052[0]){
     var _bd_ = sexp_052[1];
     if(! _bd_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_054, sexp_052);
     var match = _bd_[1];
     if(0 !== match[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_054, sexp_052);
     var
      atom_050$0 = match[1],
      switch$3 = caml_string_compare(atom_050$0, cst_Payment_required);
     if(0 <= switch$3){
      if(0 >= switch$3)
       return caml_call2
               (Sexplib0_Sexp_conv_error[21], error_source_054, sexp_052);
      var
       switch$4 =
         caml_string_compare(atom_050$0, cst_Requested_range_not_satisf);
      if(0 <= switch$4){
       if
        (0 >= switch$4
         ||
          !
          caml_string_notequal(atom_050$0, cst_Retry_with)
          ||
           !
           caml_string_notequal(atom_050$0, cst_Too_many_requests)
           ||
            !
            caml_string_notequal(atom_050$0, cst_Unauthorized$0)
            ||
             !
             caml_string_notequal(atom_050$0, cst_Unprocessable_entity)
             ||
              !
              caml_string_notequal(atom_050$0, cst_Unsupported_media_type)
              ||
               !
               caml_string_notequal(atom_050$0, cst_Upgrade_required)
               ||
                !
                caml_string_notequal(atom_050$0, cst_Wrong_exchange_server))
        return caml_call2
                (Sexplib0_Sexp_conv_error[21], error_source_054, sexp_052);
      }
      else if
       (!
        caml_string_notequal(atom_050$0, cst_Precondition_failed)
        ||
         !
         caml_string_notequal(atom_050$0, cst_Precondition_required)
         ||
          !
          caml_string_notequal(atom_050$0, cst_Proxy_authentication_requi)
          ||
           !
           caml_string_notequal(atom_050$0, cst_Request_entity_too_large)
           ||
            !
            caml_string_notequal(atom_050$0, cst_Request_header_fields_too_)
            ||
             !
             caml_string_notequal(atom_050$0, cst_Request_timeout)
             || ! caml_string_notequal(atom_050$0, cst_Request_uri_too_long))
       return caml_call2
               (Sexplib0_Sexp_conv_error[21], error_source_054, sexp_052);
     }
     else{
      var switch$5 = caml_string_compare(atom_050$0, cst_Gone$0);
      if(0 <= switch$5){
       if
        (0 >= switch$5
         ||
          !
          caml_string_notequal(atom_050$0, cst_I_m_a_teapot)
          ||
           !
           caml_string_notequal(atom_050$0, cst_Length_required)
           ||
            !
            caml_string_notequal(atom_050$0, cst_Locked)
            ||
             !
             caml_string_notequal(atom_050$0, cst_Method_not_allowed)
             ||
              !
              caml_string_notequal(atom_050$0, cst_No_response)
              ||
               !
               caml_string_notequal(atom_050$0, cst_Not_acceptable)
               || ! caml_string_notequal(atom_050$0, cst_Not_found))
        return caml_call2
                (Sexplib0_Sexp_conv_error[21], error_source_054, sexp_052);
      }
      else if
       (!
        caml_string_notequal(atom_050$0, cst_Bad_request)
        ||
         !
         caml_string_notequal(atom_050$0, cst_Blocked_by_windows_parenta)
         ||
          !
          caml_string_notequal(atom_050$0, cst_Client_closed_request)
          ||
           !
           caml_string_notequal(atom_050$0, cst_Conflict$0)
           ||
            !
            caml_string_notequal(atom_050$0, cst_Enhance_your_calm)
            ||
             !
             caml_string_notequal(atom_050$0, cst_Expectation_failed)
             ||
              !
              caml_string_notequal(atom_050$0, cst_Failed_dependency)
              || ! caml_string_notequal(atom_050$0, cst_Forbidden$0))
       return caml_call2
               (Sexplib0_Sexp_conv_error[21], error_source_054, sexp_052);
     }
     return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
    }
    var
     atom_050 = sexp_052[1],
     switch$0 = caml_string_compare(atom_050, cst_Payment_required);
    if(0 <= switch$0){
     if(0 >= switch$0) return -720017128;
     var
      switch$1 = caml_string_compare(atom_050, cst_Requested_range_not_satisf);
     if(0 <= switch$1){
      if(0 >= switch$1) return 382669006;
      if(! caml_string_notequal(atom_050, cst_Retry_with)) return 599500189;
      if(! caml_string_notequal(atom_050, cst_Too_many_requests))
       return 65414873;
      if(! caml_string_notequal(atom_050, cst_Unauthorized$0))
       return 324098644;
      if(! caml_string_notequal(atom_050, cst_Unprocessable_entity))
       return 578388242;
      if(! caml_string_notequal(atom_050, cst_Unsupported_media_type))
       return -459143713;
      if(! caml_string_notequal(atom_050, cst_Upgrade_required))
       return -867418942;
      if(! caml_string_notequal(atom_050, cst_Wrong_exchange_server))
       return 626869805;
     }
     else{
      if(! caml_string_notequal(atom_050, cst_Precondition_failed))
       return 282375460;
      if(! caml_string_notequal(atom_050, cst_Precondition_required))
       return 807430278;
      if(! caml_string_notequal(atom_050, cst_Proxy_authentication_requi))
       return -12825579;
      if(! caml_string_notequal(atom_050, cst_Request_entity_too_large))
       return 60220292;
      if(! caml_string_notequal(atom_050, cst_Request_header_fields_too_))
       return -1051942420;
      if(! caml_string_notequal(atom_050, cst_Request_timeout))
       return 1052164689;
      if(! caml_string_notequal(atom_050, cst_Request_uri_too_long))
       return -1028883702;
     }
    }
    else{
     var switch$2 = caml_string_compare(atom_050, cst_Gone$0);
     if(0 <= switch$2){
      if(0 >= switch$2) return 792903807;
      if(! caml_string_notequal(atom_050, cst_I_m_a_teapot)) return 491839979;
      if(! caml_string_notequal(atom_050, cst_Length_required))
       return -221106440;
      if(! caml_string_notequal(atom_050, cst_Locked)) return 240875818;
      if(! caml_string_notequal(atom_050, cst_Method_not_allowed))
       return 13829438;
      if(! caml_string_notequal(atom_050, cst_No_response)) return 229723487;
      if(! caml_string_notequal(atom_050, cst_Not_acceptable))
       return -176787538;
      if(! caml_string_notequal(atom_050, cst_Not_found)) return -358247754;
     }
     else{
      if(! caml_string_notequal(atom_050, cst_Bad_request)) return -99004555;
      if(! caml_string_notequal(atom_050, cst_Blocked_by_windows_parenta))
       return -1042139761;
      if(! caml_string_notequal(atom_050, cst_Client_closed_request))
       return 874866960;
      if(! caml_string_notequal(atom_050, cst_Conflict$0)) return -36288910;
      if(! caml_string_notequal(atom_050, cst_Enhance_your_calm))
       return -785212614;
      if(! caml_string_notequal(atom_050, cst_Expectation_failed))
       return 897427648;
      if(! caml_string_notequal(atom_050, cst_Failed_dependency))
       return 558492973;
      if(! caml_string_notequal(atom_050, cst_Forbidden$0)) return -438114087;
     }
    }
    return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
   }
   function client_error_status_of_sexp$0(sexp_055){
    try{var _bb_ = client_error_status_of_sexp(sexp_055); return _bb_;}
    catch(_bc_){
     var _ba_ = caml_wrap_exception(_bc_);
     if(_ba_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_056, sexp_055);
     throw caml_maybe_attach_backtrace(_ba_, 0);
    }
   }
   function sexp_of_client_error_status(param){
    return 65414873 <= param
            ? 578388242
              <= param
              ? 807430278
                <= param
                ? 897427648
                  <= param
                  ? 1052164689 <= param ? _K_ : _L_
                  : 874866960 <= param ? _M_ : _N_
                : 626869805
                  <= param
                  ? 792903807 <= param ? _O_ : _P_
                  : 599500189 <= param ? _Q_ : _R_
              : 324098644
                <= param
                ? 491839979
                  <= param
                  ? 558492973 <= param ? _S_ : _T_
                  : 382669006 <= param ? _U_ : _V_
                : 240875818
                  <= param
                  ? 282375460 <= param ? _W_ : _X_
                  : 229723487 <= param ? _Y_ : _Z_
            : -358247754
              <= param
              ? -36288910
                <= param
                ? 13829438
                  <= param
                  ? 60220292 <= param ? ___ : _$_
                  : -12825579 <= param ? _aa_ : _ab_
                : -176787538
                  <= param
                  ? -99004555 <= param ? _ac_ : _ad_
                  : -221106440 <= param ? _ae_ : _af_
              : -785212614
                <= param
                ? -459143713
                  <= param
                  ? -438114087 <= param ? _ag_ : _ah_
                  : -720017128 <= param ? _ai_ : _aj_
                : -1028883702
                  <= param
                  ? -867418942 <= param ? _ak_ : _al_
                  : -1042139761 <= param ? _am_ : _an_;
   }
   function server_error_status_of_sexp(sexp_060){
    if(0 !== sexp_060[0]){
     var _a$_ = sexp_060[1];
     if(! _a$_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[25], error_source_062, sexp_060);
     var match = _a$_[1];
     if(0 !== match[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[24], error_source_062, sexp_060);
     var
      atom_058$0 = match[1],
      switch$1 =
        caml_string_compare(atom_058$0, cst_Network_authentication_req);
     if(0 <= switch$1){
      if
       (0 >= switch$1
        ||
         !
         caml_string_notequal(atom_058$0, cst_Network_connect_timeout_er$0)
         ||
          !
          caml_string_notequal(atom_058$0, cst_Network_read_timeout_error$0)
          ||
           !
           caml_string_notequal(atom_058$0, cst_Not_extended)
           ||
            !
            caml_string_notequal(atom_058$0, cst_Not_implemented)
            ||
             !
             caml_string_notequal(atom_058$0, cst_Service_unavailable)
             ||
              !
              caml_string_notequal(atom_058$0, cst_Variant_also_negotiates))
       return caml_call2
               (Sexplib0_Sexp_conv_error[21], error_source_062, sexp_060);
     }
     else if
      (!
       caml_string_notequal(atom_058$0, cst_Bad_gateway)
       ||
        !
        caml_string_notequal(atom_058$0, cst_Bandwidth_limit_exceeded)
        ||
         !
         caml_string_notequal(atom_058$0, cst_Gateway_timeout)
         ||
          !
          caml_string_notequal(atom_058$0, cst_Http_version_not_supported)
          ||
           !
           caml_string_notequal(atom_058$0, cst_Insufficient_storage)
           ||
            !
            caml_string_notequal(atom_058$0, cst_Internal_server_error)
            || ! caml_string_notequal(atom_058$0, cst_Loop_detected))
      return caml_call2
              (Sexplib0_Sexp_conv_error[21], error_source_062, sexp_060);
     return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
    }
    var
     atom_058 = sexp_060[1],
     switch$0 = caml_string_compare(atom_058, cst_Network_authentication_req);
    if(0 <= switch$0){
     if(0 >= switch$0) return -15361451;
     if(! caml_string_notequal(atom_058, cst_Network_connect_timeout_er$0))
      return 789753444;
     if(! caml_string_notequal(atom_058, cst_Network_read_timeout_error$0))
      return -43455790;
     if(! caml_string_notequal(atom_058, cst_Not_extended)) return 854525125;
     if(! caml_string_notequal(atom_058, cst_Not_implemented))
      return -498198474;
     if(! caml_string_notequal(atom_058, cst_Service_unavailable))
      return -774758938;
     if(! caml_string_notequal(atom_058, cst_Variant_also_negotiates))
      return -598402413;
    }
    else{
     if(! caml_string_notequal(atom_058, cst_Bad_gateway)) return -957501398;
     if(! caml_string_notequal(atom_058, cst_Bandwidth_limit_exceeded))
      return 806912325;
     if(! caml_string_notequal(atom_058, cst_Gateway_timeout))
      return 731537414;
     if(! caml_string_notequal(atom_058, cst_Http_version_not_supported))
      return -1014316796;
     if(! caml_string_notequal(atom_058, cst_Insufficient_storage))
      return 161957855;
     if(! caml_string_notequal(atom_058, cst_Internal_server_error))
      return -732353682;
     if(! caml_string_notequal(atom_058, cst_Loop_detected)) return 169087453;
    }
    return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
   }
   function server_error_status_of_sexp$0(sexp_063){
    try{var _a9_ = server_error_status_of_sexp(sexp_063); return _a9_;}
    catch(_a__){
     var _a8_ = caml_wrap_exception(_a__);
     if(_a8_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_064, sexp_063);
     throw caml_maybe_attach_backtrace(_a8_, 0);
    }
   }
   function sexp_of_server_error_status(param){
    return -15361451 <= param
            ? 731537414
              <= param
              ? 806912325
                <= param
                ? 854525125 <= param ? _ao_ : _ap_
                : 789753444 <= param ? _aq_ : _ar_
              : 161957855 === param ? _as_ : 169087453 <= param ? _at_ : _au_
            : -732353682
              <= param
              ? -498198474
                <= param
                ? -43455790 <= param ? _av_ : _aw_
                : -598402413 <= param ? _ax_ : _ay_
              : -957501398
                === param
                ? _az_
                : -774758938 <= param ? _aA_ : _aB_;
   }
   function status_of_sexp(sexp_065){
    try{var _a3_ = informational_status_of_sexp(sexp_065); return _a3_;}
    catch(_a4_){
     var _aW_ = caml_wrap_exception(_a4_);
     if(_aW_ !== Sexplib0_Sexp_conv_error[18])
      throw caml_maybe_attach_backtrace(_aW_, 0);
     try{var _a2_ = success_status_of_sexp(sexp_065); return _a2_;}
     catch(_a5_){
      var _aX_ = caml_wrap_exception(_a5_);
      if(_aX_ !== Sexplib0_Sexp_conv_error[18])
       throw caml_maybe_attach_backtrace(_aX_, 0);
      try{var _a1_ = redirection_status_of_sexp(sexp_065); return _a1_;}
      catch(_a6_){
       var _aY_ = caml_wrap_exception(_a6_);
       if(_aY_ !== Sexplib0_Sexp_conv_error[18])
        throw caml_maybe_attach_backtrace(_aY_, 0);
       try{var _a0_ = client_error_status_of_sexp(sexp_065); return _a0_;}
       catch(_a7_){
        var _aZ_ = caml_wrap_exception(_a7_);
        if(_aZ_ === Sexplib0_Sexp_conv_error[18])
         return server_error_status_of_sexp(sexp_065);
        throw caml_maybe_attach_backtrace(_aZ_, 0);
       }
      }
     }
    }
   }
   function status_of_sexp$0(sexp_066){
    try{var _aU_ = status_of_sexp(sexp_066); return _aU_;}
    catch(_aV_){
     var _aT_ = caml_wrap_exception(_aV_);
     if(_aT_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_067, sexp_066);
     throw caml_maybe_attach_backtrace(_aT_, 0);
    }
   }
   function sexp_of_status(v_068){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        if(18898339 <= v_068)
         if(566851975 <= v_068)
          if(854525125 <= v_068){
           if(897427648 <= v_068){
            if(973294248 === v_068) break c;
            if(1034456810 === v_068) break a;
            break b;
           }
           if(874866960 === v_068) break b;
           if(893234971 > v_068) break d;
          }
          else{
           if(792903807 === v_068) break b;
           if(626869806 <= v_068){if(807430278 <= v_068) break b; break d;}
           if(578388242 <= v_068) break b;
          }
         else{
          if(260151748 <= v_068){
           if(491839979 === v_068) break b;
           if(382669007 <= v_068){if(558492973 <= v_068) break b; break a;}
           if(282375460 <= v_068) break b;
           break a;
          }
          if(102779818 > v_068){if(60220292 <= v_068) break b; break a;}
          if(192584839 <= v_068){if(229723487 <= v_068) break b; break c;}
          if(161957855 <= v_068) break d;
         }
        else if(-459143713 <= v_068)
         if(-176787538 <= v_068){
          if(-43455790 === v_068) break d;
          if(-15361451 === v_068) break d;
          if(17692 !== v_068) break b;
         }
         else{
          if(-358247754 > v_068){if(-398446314 <= v_068) break a; break b;}
          if(-221106440 <= v_068){if(-199968061 <= v_068) break a; break b;}
          if(-330714374 > v_068) break b;
         }
        else if(-785212614 <= v_068){
         if(-720017128 === v_068) break b;
         if(-558113336 > v_068){if(-785212613 <= v_068) break d; break b;}
         if(-498198474 <= v_068) break d;
        }
        else{
         if(-1014316796 > v_068){if(-1021676630 <= v_068) break c; break b;}
         if(-867418942 <= v_068){if(-840540685 <= v_068) break c; break b;}
         if(-886248552 > v_068) break d;
        }
        return sexp_of_success_status(v_068);
       }
       return sexp_of_server_error_status(v_068);
      }
      return sexp_of_informational_status(v_068);
     }
     return sexp_of_client_error_status(v_068);
    }
    return sexp_of_redirection_status(v_068);
   }
   function status_code_of_sexp(sexp_076){
    if(0 === sexp_076[0]){
     var atom_074 = sexp_076[1];
     try{var _aN_ = status_of_sexp(sexp_076); return _aN_;}
     catch(_aS_){
      var _aM_ = caml_wrap_exception(_aS_);
      if(_aM_ === Sexplib0_Sexp_conv_error[18])
       return caml_string_notequal(atom_074, cst_Code)
               ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[23], error_source_081, sexp_076);
      throw caml_maybe_attach_backtrace(_aM_, 0);
     }
    }
    var _aO_ = sexp_076[1];
    if(! _aO_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_081, sexp_076);
    var match = _aO_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_081, sexp_076);
    var sexp_args_077 = _aO_[2], atom_074$0 = match[1];
    if(caml_string_notequal(atom_074$0, cst_Code))
     try{var _aQ_ = status_of_sexp(sexp_076); return _aQ_;}
     catch(_aR_){
      var _aP_ = caml_wrap_exception(_aR_);
      if(_aP_ === Sexplib0_Sexp_conv_error[18])
       return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
      throw caml_maybe_attach_backtrace(_aP_, 0);
     }
    if(sexp_args_077 && ! sexp_args_077[2]){
     var
      arg0_079 = sexp_args_077[1],
      res0_080 = caml_call1(Sexplib0_Sexp_conv[34], arg0_079);
     return [0, 748543309, res0_080];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[22],
             error_source_081,
             atom_074$0,
             sexp_076);
   }
   function status_code_of_sexp$0(sexp_082){
    try{var _aK_ = status_code_of_sexp(sexp_082); return _aK_;}
    catch(_aL_){
     var _aJ_ = caml_wrap_exception(_aL_);
     if(_aJ_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_083, sexp_082);
     throw caml_maybe_attach_backtrace(_aJ_, 0);
    }
   }
   function sexp_of_status_code(v_085){
    if(typeof v_085 === "number") return sexp_of_status(v_085);
    var v_084 = v_085[2];
    return [1, [0, _aC_, [0, caml_call1(Sexplib0_Sexp_conv[10], v_084), 0]]];
   }
   function string_of_version(param){
    if(typeof param === "number")
     return 540315116 <= param ? cst_HTTP_1_1 : cst_HTTP_1_0;
    var s = param[2];
    return s;
   }
   function version_of_string(s){
    return caml_string_notequal(s, cst_HTTP_1_0$0)
            ? caml_string_notequal
               (s, cst_HTTP_1_1$0)
              ? [0, -912009552, s]
              : 540315116
            : 540315115;
   }
   function compare_version(a, b){
    var _aH_ = string_of_version(b), _aI_ = string_of_version(a);
    return caml_call2(Stdlib_String[9], _aI_, _aH_);
   }
   function string_of_method(param){
    if(typeof param === "number")
     return 357830602 <= param
             ? 492530731
               === param
               ? cst_DELETE
               : 891112544
                 <= param
                 ? 994393768 <= param ? cst_PATCH : cst_POST
                 : 801894688 <= param ? cst_HEAD : cst_CONNECT
             : 3997359
               <= param
               ? 336447077 <= param ? cst_TRACE : cst_PUT
               : 3546230 <= param ? cst_GET : cst_OPTIONS;
    var s = param[2];
    return s;
   }
   function method_of_string(s){
    return caml_string_notequal(s, cst_CONNECT$0)
            ? caml_string_notequal
               (s, cst_DELETE$0)
              ? caml_string_notequal
                 (s, cst_GET$0)
                ? caml_string_notequal
                   (s, cst_HEAD$0)
                  ? caml_string_notequal
                     (s, cst_OPTIONS$0)
                    ? caml_string_notequal
                       (s, cst_PATCH$0)
                      ? caml_string_notequal
                         (s, cst_POST$0)
                        ? caml_string_notequal
                           (s, cst_PUT$0)
                          ? caml_string_notequal
                             (s, cst_TRACE$0)
                            ? [0, -912009552, s]
                            : 336447077
                          : 3997359
                        : 891112544
                      : 994393768
                    : -539883714
                  : 801894688
                : 3546230
              : 492530731
            : 357830602;
   }
   function compare_method(a, b){
    var _aF_ = string_of_method(b), _aG_ = string_of_method(a);
    return caml_call2(Stdlib_String[9], _aG_, _aF_);
   }
   function status_of_code(cod){
    if(309 <= cod){
     var switcher = cod - 598 | 0;
     if(1 >= switcher >>> 0) return switcher ? 789753444 : -43455790;
     var switcher$0 = switcher + 198 | 0;
     if(111 >= switcher$0 >>> 0)
      switch(switcher$0){
        case 0:
         return -99004555;
        case 1:
         return 324098644;
        case 2:
         return -720017128;
        case 3:
         return -438114087;
        case 4:
         return -358247754;
        case 5:
         return 13829438;
        case 6:
         return -176787538;
        case 7:
         return -12825579;
        case 8:
         return 1052164689;
        case 9:
         return -36288910;
        case 10:
         return 792903807;
        case 11:
         return -221106440;
        case 12:
         return 282375460;
        case 13:
         return 60220292;
        case 14:
         return -1028883702;
        case 15:
         return -459143713;
        case 16:
         return 382669006;
        case 17:
         return 897427648;
        case 18:
         return 491839979;
        case 20:
         return -785212614;
        case 22:
         return 578388242;
        case 23:
         return 240875818;
        case 24:
         return 558492973;
        case 26:
         return -867418942;
        case 28:
         return 807430278;
        case 29:
         return 65414873;
        case 31:
         return -1051942420;
        case 44:
         return 229723487;
        case 49:
         return 599500189;
        case 50:
         return -1042139761;
        case 51:
         return 626869805;
        case 99:
         return 874866960;
        case 100:
         return -732353682;
        case 101:
         return -498198474;
        case 102:
         return -957501398;
        case 103:
         return -774758938;
        case 104:
         return 731537414;
        case 105:
         return -1014316796;
        case 106:
         return -598402413;
        case 107:
         return 161957855;
        case 108:
         return 169087453;
        case 109:
         return 806912325;
        case 110:
         return 854525125;
        case 111:
         return -15361451;
      }
    }
    else if(200 <= cod)
     if(227 <= cod){
      if(300 <= cod)
       switch(cod - 300 | 0){
         case 0:
          return 18898339;
         case 1:
          return 384167631;
         case 2:
          return 398750242;
         case 3:
          return 260151748;
         case 4:
          return -387970219;
         case 5:
          return -398446314;
         case 6:
          return -199968061;
         case 7:
          return 1034456810;
         default: return 514453165;
       }
     }
     else
      switch(cod - 200 | 0){
        case 0:
         return 17692;
        case 1:
         return -558113336;
        case 2:
         return 566851975;
        case 3:
         return 102779818;
        case 4:
         return -527633381;
        case 5:
         return -234002583;
        case 6:
         return 893234971;
        case 7:
         return -886248552;
        case 8:
         return -330714374;
        case 26:
         return -247210088;
      }
    else{
     var switcher$1 = cod - 100 | 0;
     if(3 >= switcher$1 >>> 0)
      switch(switcher$1){
        case 0:
         return 192584839;
        case 1:
         return -1021676630;
        case 2:
         return -840540685;
        default: return 973294248;
      }
    }
    return [0, 748543309, cod];
   }
   function code_of_status(param){
    if(typeof param === "number")
     return 13829438 <= param
             ? 514453165
               <= param
               ? 806912325
                 <= param
                 ? 893234971
                   <= param
                   ? 897427648
                     === param
                     ? 417
                     : 1034456810
                       <= param
                       ? 1052164689 <= param ? 408 : 307
                       : 973294248 <= param ? 103 : 206
                   : 854525125
                     <= param
                     ? 874866960 <= param ? 499 : 510
                     : 807430278 <= param ? 428 : 509
                 : 599500189
                   <= param
                   ? 626869805
                     === param
                     ? 451
                     : 789753444
                       <= param
                       ? 792903807 <= param ? 410 : 599
                       : 731537414 <= param ? 504 : 449
                   : 566851975
                     <= param
                     ? 578388242 <= param ? 422 : 202
                     : 558492973 <= param ? 424 : 308
               : 229723487
                 <= param
                 ? 324098644
                   <= param
                   ? 382669006
                     === param
                     ? 416
                     : 398750242
                       <= param
                       ? 491839979 <= param ? 418 : 302
                       : 384167631 <= param ? 301 : 401
                   : 260151748
                     <= param
                     ? 282375460 <= param ? 412 : 303
                     : 240875818 <= param ? 423 : 444
                 : 102779818
                   <= param
                   ? 169087453
                     <= param
                     ? 192584839 <= param ? 100 : 508
                     : 161957855 <= param ? 507 : 203
                   : 60220292
                     <= param
                     ? 65414873 <= param ? 429 : 413
                     : 18898339 <= param ? 300 : 405
             : -459143713
               <= param
               ? -221106440
                 <= param
                 ? -43455790
                   <= param
                   ? -36288910
                     === param
                     ? 409
                     : -12825579
                       <= param
                       ? 17692 <= param ? 200 : 407
                       : -15361451 <= param ? 511 : 598
                   : -176787538
                     <= param
                     ? -99004555 <= param ? 400 : 406
                     : -199968061 <= param ? 306 : 411
                 : -358247754
                   <= param
                   ? -247210088
                     <= param
                     ? -234002583 <= param ? 205 : 226
                     : -330714374 <= param ? 208 : 404
                   : -398446314
                     <= param
                     ? -387970219 <= param ? 304 : 305
                     : -438114087 <= param ? 403 : 415
               : -840540685
                 <= param
                 ? -720017128
                   <= param
                   ? -598402413
                     === param
                     ? 506
                     : -527633381
                       <= param
                       ? -498198474 <= param ? 501 : 204
                       : -558113336 <= param ? 201 : 402
                   : -774758938
                     <= param
                     ? -732353682 <= param ? 500 : 503
                     : -785212614 <= param ? 420 : 102
                 : -1014316796
                   <= param
                   ? -886248552
                     <= param
                     ? -867418942 <= param ? 426 : 207
                     : -957501398 <= param ? 502 : 505
                   : -1028883702
                     <= param
                     ? -1021676630 <= param ? 101 : 414
                     : -1042139761 <= param ? 450 : 431;
    var cod = param[2];
    return cod;
   }
   function string_of_status(param){
    if(typeof param === "number")
     return 13829438 <= param
             ? 514453165
               <= param
               ? 806912325
                 <= param
                 ? 893234971
                   <= param
                   ? 897427648
                     === param
                     ? cst_417_Expectation_Failed
                     : 1034456810
                       <= param
                       ? 1052164689
                         <= param
                         ? cst_408_Request_Timeout
                         : cst_307_Temporary_Redirect_sin
                       : 973294248
                         <= param
                         ? cst_103_Checkpoint
                         : cst_206_Partial_Content
                   : 854525125
                     <= param
                     ? 874866960
                       <= param
                       ? cst_499_Client_Closed_Request
                       : cst_510_Not_Extended_RFC_2774
                     : 807430278
                       <= param
                       ? cst_428_Precondition_Required
                       : cst_509_Bandwidth_Limit_Exceed
                 : 599500189
                   <= param
                   ? 626869805
                     === param
                     ? cst_451_Wrong_Exchange_server
                     : 789753444
                       <= param
                       ? 792903807
                         <= param
                         ? cst_410_Gone
                         : cst_599_Network_connect_timeou
                       : 731537414
                         <= param
                         ? cst_504_Gateway_Timeout
                         : cst_449_Retry_With
                   : 566851975
                     <= param
                     ? 578388242
                       <= param
                       ? cst_422_Unprocessable_Entity_W
                       : cst_202_Accepted
                     : 558492973
                       <= param
                       ? cst_424_Failed_Dependency_WebD
                       : cst_308_Permanent_Redirect
               : 229723487
                 <= param
                 ? 324098644
                   <= param
                   ? 382669006
                     === param
                     ? cst_416_Requested_Range_Not_Sa
                     : 398750242
                       <= param
                       ? 491839979
                         <= param
                         ? cst_418_I_m_a_teapot_RFC_2324
                         : cst_302_Found
                       : 384167631
                         <= param
                         ? cst_301_Moved_Permanently
                         : cst_401_Unauthorized
                   : 260151748
                     <= param
                     ? 282375460
                       <= param
                       ? cst_412_Precondition_Failed
                       : cst_303_See_Other
                     : 240875818
                       <= param
                       ? cst_423_Locked_WebDAV_RFC_4918
                       : cst_444_No_Response
                 : 102779818
                   <= param
                   ? 169087453
                     <= param
                     ? 192584839
                       <= param
                       ? cst_100_Continue
                       : cst_508_Loop_Detected_WebDAV_R
                     : 161957855
                       <= param
                       ? cst_507_Insufficient_Storage_W
                       : cst_203_Non_Authoritative_Info
                   : 60220292
                     <= param
                     ? 65414873
                       <= param
                       ? cst_429_Too_Many_Requests
                       : cst_413_Request_Entity_Too_Lar
                     : 18898339
                       <= param
                       ? cst_300_Multiple_Choices
                       : cst_405_Method_Not_Allowed
             : -459143713
               <= param
               ? -221106440
                 <= param
                 ? -43455790
                   <= param
                   ? -36288910
                     === param
                     ? cst_409_Conflict
                     : -12825579
                       <= param
                       ? 17692
                         <= param
                         ? cst_200_OK
                         : cst_407_Proxy_Authentication_R
                       : -15361451
                         <= param
                         ? cst_511_Network_Authentication
                         : cst_598_Network_read_timeout_e
                   : -176787538
                     <= param
                     ? -99004555
                       <= param
                       ? cst_400_Bad_Request
                       : cst_406_Not_Acceptable
                     : -199968061
                       <= param
                       ? cst_306_Switch_Proxy
                       : cst_411_Length_Required
                 : -358247754
                   <= param
                   ? -247210088
                     <= param
                     ? -234002583
                       <= param
                       ? cst_205_Reset_Content
                       : cst_226_IM_Used_RFC_3229
                     : -330714374
                       <= param
                       ? cst_208_Already_Reported_WebDA
                       : cst_404_Not_Found
                   : -398446314
                     <= param
                     ? -387970219
                       <= param
                       ? cst_304_Not_Modified
                       : cst_305_Use_Proxy_since_HTTP_1
                     : -438114087
                       <= param
                       ? cst_403_Forbidden
                       : cst_415_Unsupported_Media_Type
               : -840540685
                 <= param
                 ? -720017128
                   <= param
                   ? -598402413
                     === param
                     ? cst_506_Variant_Also_Negotiate
                     : -527633381
                       <= param
                       ? -498198474
                         <= param
                         ? cst_501_Not_Implemented
                         : cst_204_No_Content
                       : -558113336
                         <= param
                         ? cst_201_Created
                         : cst_402_Payment_Required
                   : -774758938
                     <= param
                     ? -732353682
                       <= param
                       ? cst_500_Internal_Server_Error
                       : cst_503_Service_Unavailable
                     : -785212614
                       <= param
                       ? cst_420_Enhance_Your_Calm
                       : cst_102_Processing_WebDAV_RFC_
                 : -1014316796
                   <= param
                   ? -886248552
                     <= param
                     ? -867418942
                       <= param
                       ? cst_426_Upgrade_Required_RFC_2
                       : cst_207_Multi_Status_WebDAV_RF
                     : -957501398
                       <= param
                       ? cst_502_Bad_Gateway
                       : cst_505_HTTP_Version_Not_Suppo
                   : -1028883702
                     <= param
                     ? -1021676630
                       <= param
                       ? cst_101_Switching_Protocols
                       : cst_414_Request_URI_Too_Long
                     : -1042139761
                       <= param
                       ? cst_450_Blocked_by_Windows_Par
                       : cst_431_Request_Header_Fields_;
    var
     cod = param[2],
     code = caml_call1(Stdlib[33], cod),
     _aE_ = caml_call2(Stdlib[28], cst_Status, code);
    return caml_call2(Stdlib[28], code, _aE_);
   }
   function reason_phrase_of_code(cod){
    if(309 <= cod){
     var switcher = cod - 598 | 0;
     if(1 >= switcher >>> 0)
      return switcher
              ? cst_Network_connect_timeout_er
              : cst_Network_read_timeout_error;
     var switcher$0 = switcher + 198 | 0;
     if(111 >= switcher$0 >>> 0)
      switch(switcher$0){
        case 0:
         return cst_Bad_Request;
        case 1:
         return cst_Unauthorized;
        case 2:
         return cst_Payment_Required;
        case 3:
         return cst_Forbidden;
        case 4:
         return cst_Not_Found;
        case 5:
         return cst_Method_Not_Allowed;
        case 6:
         return cst_Not_Acceptable;
        case 7:
         return cst_Proxy_Authentication_Requi;
        case 8:
         return cst_Request_Timeout;
        case 9:
         return cst_Conflict;
        case 10:
         return cst_Gone;
        case 11:
         return cst_Length_Required;
        case 12:
         return cst_Precondition_Failed;
        case 13:
         return cst_Request_Entity_Too_Large;
        case 14:
         return cst_Request_URI_Too_Long;
        case 15:
         return cst_Unsupported_Media_Type;
        case 16:
         return cst_Requested_Range_Not_Satisf;
        case 17:
         return cst_Expectation_Failed;
        case 18:
         return cst_I_m_a_teapot_RFC_2324;
        case 20:
         return cst_Enhance_Your_Calm;
        case 22:
         return cst_Unprocessable_Entity_WebDA;
        case 23:
         return cst_Locked_WebDAV_RFC_4918;
        case 24:
         return cst_Failed_Dependency_WebDAV_R;
        case 26:
         return cst_Upgrade_Required_RFC_2817;
        case 28:
         return cst_Precondition_Required;
        case 29:
         return cst_Too_Many_Requests;
        case 31:
         return cst_Request_Header_Fields_Too_;
        case 44:
         return cst_No_Response;
        case 49:
         return cst_Retry_With;
        case 50:
         return cst_Blocked_by_Windows_Parenta;
        case 51:
         return cst_Wrong_Exchange_server;
        case 99:
         return cst_Client_Closed_Request;
        case 100:
         return cst_Internal_Server_Error;
        case 101:
         return cst_Not_Implemented;
        case 102:
         return cst_Bad_Gateway;
        case 103:
         return cst_Service_Unavailable;
        case 104:
         return cst_Gateway_Timeout;
        case 105:
         return cst_HTTP_Version_Not_Supported;
        case 106:
         return cst_Variant_Also_Negotiates_RF;
        case 107:
         return cst_Insufficient_Storage_WebDA;
        case 108:
         return cst_Loop_Detected_WebDAV_RFC_5;
        case 109:
         return cst_Bandwidth_Limit_Exceeded_A;
        case 110:
         return cst_Not_Extended_RFC_2774;
        case 111:
         return cst_Network_Authentication_Req;
      }
    }
    else if(200 <= cod)
     if(227 <= cod){
      if(300 <= cod)
       switch(cod - 300 | 0){
         case 0:
          return cst_Multiple_Choices;
         case 1:
          return cst_Moved_Permanently;
         case 2:
          return cst_Found;
         case 3:
          return cst_See_Other;
         case 4:
          return cst_Not_Modified;
         case 5:
          return cst_Use_Proxy_since_HTTP_1_1;
         case 6:
          return cst_Switch_Proxy;
         case 7:
          return cst_Temporary_Redirect_since_H;
         default: return cst_Permanent_Redirect;
       }
     }
     else
      switch(cod - 200 | 0){
        case 0:
         return cst_OK;
        case 1:
         return cst_Created;
        case 2:
         return cst_Accepted;
        case 3:
         return cst_Non_Authoritative_Informat;
        case 4:
         return cst_No_Content;
        case 5:
         return cst_Reset_Content;
        case 6:
         return cst_Partial_Content;
        case 7:
         return cst_Multi_Status_WebDAV_RFC_49;
        case 8:
         return cst_Already_Reported_WebDAV_RF;
        case 26:
         return cst_IM_Used_RFC_3229;
      }
    else{
     var switcher$1 = cod - 100 | 0;
     if(3 >= switcher$1 >>> 0)
      switch(switcher$1){
        case 0:
         return cst_Continue;
        case 1:
         return cst_Switching_Protocols;
        case 2:
         return cst_Processing_WebDAV_RFC_2518;
        default: return cst_Checkpoint;
      }
    }
    return caml_call1(Stdlib[33], cod);
   }
   function is_informational(code){
    var match = status_of_code(code);
    a:
    {
     if(-840540684 <= match){
      if(192584839 === match || 973294248 === match) break a;
     }
     else if(-1021676630 === match || -840540685 <= match) break a;
     return 0;
    }
    return 1;
   }
   function is_success(code){
    var match = status_of_code(code);
    a:
    {
     if(-247210087 <= match){
      if(102779818 <= match){
       if(566851975 === match || 893234971 === match || 102779819 > match)
        break a;
      }
      else if(-234002583 === match || 17692 === match) break a;
     }
     else
      if(-527633381 <= match){
       if(-330714374 === match || -527633380 > match || -247210088 <= match)
        break a;
      }
      else if(-886248552 === match || -558113336 === match) break a;
     return 0;
    }
    return 1;
   }
   function is_redirection(code){
    var match = status_of_code(code);
    a:
    {
     if(260151748 <= match){
      if(398750243 <= match){
       if(514453165 !== match && 1034456810 !== match) break a;
      }
      else if(384167631 !== match && 260151749 <= match && 398750242 > match)
       break a;
     }
     else
      if(-387970218 <= match){
       if(-199968061 !== match && 18898339 !== match) break a;
      }
      else if(-398446314 !== match && -387970219 > match) break a;
     return 1;
    }
    return 0;
   }
   function is_client_error(code){
    var match = status_of_code(code);
    a:
    {
     if(60220293 <= match){
      if(558492974 <= match){
       if(792903808 <= match){
        if(874866961 <= match){
         if(897427648 === match || 1052164689 === match) break a;
        }
        else if(807430278 === match || 874866960 <= match) break a;
       }
       else
        if(599500190 <= match){
         if(626869805 === match || 792903807 <= match) break a;
        }
        else if(578388242 === match || 599500189 <= match) break a;
      }
      else
       if(282375461 <= match){
        if(382669007 <= match){
         if(491839979 === match || 558492973 <= match) break a;
        }
        else if(324098644 === match || 382669006 <= match) break a;
       }
       else
        if(229723488 <= match){
         if(240875818 === match || 282375460 <= match) break a;
        }
        else if(65414873 === match || 229723487 <= match) break a;
     }
     else
      if(-438114086 <= match){
       if(-99004554 <= match){
        if(-12825578 <= match){
         if(13829438 === match || 60220292 <= match) break a;
        }
        else if(-36288910 === match || -12825579 <= match) break a;
       }
       else
        if(-221106439 <= match){
         if(-176787538 === match || -99004555 <= match) break a;
        }
        else if(-358247754 === match || -221106440 <= match) break a;
      }
      else
       if(-867418941 <= match){
        if(-720017127 <= match){
         if(-459143713 === match || -438114087 <= match) break a;
        }
        else if(-785212614 === match || -720017128 <= match) break a;
       }
       else
        if(-1042139760 <= match){
         if(-1028883702 === match || -867418942 <= match) break a;
        }
        else if(-1051942420 === match || -1042139761 <= match) break a;
     return 0;
    }
    return 1;
   }
   function is_server_error(code){
    var match = status_of_code(code);
    a:
    {
     if(-43455789 <= match){
      if(731537414 <= match){
       if(806912325 <= match){
        if(854525125 === match || 806912326 > match) break a;
       }
       else if(789753444 === match || 731537415 > match) break a;
      }
      else if
       (-15361451 === match || 161957855 === match || 169087453 === match)
       break a;
     }
     else
      if(-732353682 <= match){
       if(-598402412 <= match){
        if(-498198474 === match || -43455790 <= match) break a;
       }
       else if(-732353681 > match || -598402413 <= match) break a;
      }
      else if
       (-1014316796 === match || -957501398 === match || -774758938 === match)
       break a;
     return 0;
    }
    return 1;
   }
   function is_error(code){
    var _aD_ = is_client_error(code);
    return _aD_ ? _aD_ : is_server_error(code);
   }
   var
    Cohttp_Code =
      [0,
       sexp_of_version,
       version_of_sexp$0,
       version_of_sexp,
       sexp_of_meth,
       meth_of_sexp$0,
       meth_of_sexp,
       sexp_of_informational_status,
       informational_status_of_sexp$0,
       informational_status_of_sexp,
       sexp_of_success_status,
       success_status_of_sexp$0,
       success_status_of_sexp,
       sexp_of_redirection_status,
       redirection_status_of_sexp$0,
       redirection_status_of_sexp,
       sexp_of_client_error_status,
       client_error_status_of_sexp$0,
       client_error_status_of_sexp,
       sexp_of_server_error_status,
       server_error_status_of_sexp$0,
       server_error_status_of_sexp,
       sexp_of_status,
       status_of_sexp$0,
       status_of_sexp,
       sexp_of_status_code,
       status_code_of_sexp$0,
       status_code_of_sexp,
       string_of_version,
       version_of_string,
       compare_version,
       string_of_method,
       method_of_string,
       compare_method,
       status_of_code,
       code_of_status,
       string_of_status,
       reason_phrase_of_code,
       is_informational,
       is_success,
       is_redirection,
       is_client_error,
       is_server_error,
       is_error];
   runtime.caml_register_global(431, Cohttp_Code, "Cohttp__Code");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Conf
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    version = "5.3.1",
    Cohttp_Conf = [0, version];
   runtime.caml_register_global(1, Cohttp_Conf, "Cohttp__Conf");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Link
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__String, Stringext, Uri, Uri_sexp
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$17 = "",
    cst$19 = '"',
    cst$18 = "'",
    cst_Alternate = "Alternate",
    cst_Appendix = "Appendix",
    cst_Bookmark = "Bookmark",
    cst_Chapter = "Chapter",
    cst_Contents = "Contents",
    cst_Copyright = "Copyright",
    cst_Current = "Current",
    cst_Described_by = "Described_by",
    cst_Edit = "Edit",
    cst_Edit_media = "Edit_media",
    cst_Enclosure = "Enclosure",
    cst_Extension = "Extension",
    cst_First = "First",
    cst_Glossary = "Glossary",
    cst_Help = "Help",
    cst_Hub = "Hub",
    cst_Index = "Index",
    cst_Last = "Last",
    cst_Latest_version = "Latest_version",
    cst_License = "License",
    cst_Next = "Next",
    cst_Next_archive = "Next_archive",
    cst_Payment = "Payment",
    cst_Predecessor_version = "Predecessor_version",
    cst_Prev = "Prev",
    cst_Prev_archive = "Prev_archive",
    cst_Related = "Related",
    cst_Replies = "Replies",
    cst_Section = "Section",
    cst_Self = "Self",
    cst_Service = "Service",
    cst_Start = "Start",
    cst_Stylesheet = "Stylesheet",
    cst_Subsection = "Subsection",
    cst_Successor_version = "Successor_version",
    cst_Up = "Up",
    cst_Version_history = "Version_history",
    cst_Via = "Via",
    cst_Working_copy = "Working_copy",
    cst_Working_copy_of = "Working_copy_of",
    cst_alternate$0 = "alternate",
    cst_appendix$0 = "appendix",
    cst_arc$0 = "arc",
    cst_bookmark$0 = "bookmark",
    cst_chapter$0 = "chapter",
    cst_charset$0 = "charset",
    cst_contents$0 = "contents",
    cst_context$0 = "context",
    cst_copyright$0 = "copyright",
    cst_current$0 = "current",
    cst_described_by = "described_by",
    cst_describedby$0 = "describedby",
    cst_edit$0 = "edit",
    cst_edit_media$0 = "edit-media",
    cst_edit_media$1 = "edit_media",
    cst_enclosure$0 = "enclosure",
    cst_extension = "extension",
    cst_extension_exts$0 = "extension_exts",
    cst_extensions$0 = "extensions",
    cst_first$0 = "first",
    cst_glossary$0 = "glossary",
    cst_help$0 = "help",
    cst_hreflang$1 = "hreflang",
    cst_hub$0 = "hub",
    cst_index$0 = "index",
    cst_language$0 = "language",
    cst_last$0 = "last",
    cst_latest_version$0 = "latest-version",
    cst_latest_version$1 = "latest_version",
    cst_license$0 = "license",
    cst_media$0 = "media",
    cst_media_type$0 = "media_type",
    cst_next$0 = "next",
    cst_next_archive$0 = "next-archive",
    cst_next_archive$1 = "next_archive",
    cst_payment$0 = "payment",
    cst_predecessor_version$0 = "predecessor-version",
    cst_predecessor_version$1 = "predecessor_version",
    cst_prev$0 = "prev",
    cst_prev_archive$0 = "prev-archive",
    cst_prev_archive$1 = "prev_archive",
    cst_rel$0 = "rel",
    cst_related$0 = "related",
    cst_relation$0 = "relation",
    cst_replies$0 = "replies",
    cst_rev$0 = "rev",
    cst_reverse$0 = "reverse",
    cst_section$0 = "section",
    cst_self$0 = "self",
    cst_service$0 = "service",
    cst_start$0 = "start",
    cst_stylesheet$0 = "stylesheet",
    cst_subsection$0 = "subsection",
    cst_successor_version$0 = "successor-version",
    cst_successor_version$1 = "successor_version",
    cst_target$0 = "target",
    cst_title$0 = "title",
    cst_title_ext$0 = "title_ext",
    cst_up$0 = "up",
    cst_value$0 = "value",
    cst_version_history$0 = "version-history",
    cst_version_history$1 = "version_history",
    cst_via$0 = "via",
    cst_working_copy$0 = "working-copy",
    cst_working_copy_of$0 = "working-copy-of",
    cst_working_copy$1 = "working_copy",
    cst_working_copy_of$1 = "working_copy_of",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$9 = cst$17,
    cst$12 = "<",
    cst$13 = cst$17,
    cst$14 = " ",
    cst$15 = cst$17,
    cst$16 = "; ",
    cst$8 = cst$17,
    cst$3 = cst$18,
    cst$4 = cst$18,
    cst$5 = cst$17,
    cst$6 = cst$17,
    cst$7 = cst$17,
    cst$2 = cst$19,
    cst$1 = cst$19,
    cst$0 = cst$17,
    cst = cst$17,
    error_source_003 = "cohttp/src/link.ml.Rel.t",
    error_source_016 = "cohttp/src/link.ml.Ext.t",
    error_source_027 = "cohttp/src/link.ml.Arc.t",
    empty = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    error_source_076 = "cohttp/src/link.ml.t",
    cst$10 = cst$17,
    cst$11 = cst$17,
    Stdlib_String = global_data.Stdlib__String,
    Stringext = global_data.Stringext,
    Uri = global_data.Uri,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Uri_sexp = global_data.Uri_sexp,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    _af_ = [0, 59, [0, 44, 0]],
    _ag_ = [0, 61, 0],
    _ah_ = [0, 44, [0, 59, 0]],
    _ak_ = [0, 62, 0],
    _al_ = [0, 1],
    _au_ = [0, [12, 60, [2, 0, [11, ">; ", [2, 0, 0]]]], "<%s>; %s"],
    _as_ =
      [0,
       [2, 0, [12, 61, [2, 0, [12, 39, [2, 0, [12, 39, [2, 0, 0]]]]]]],
       "%s=%s'%s'%s"],
    _ar_ = [0, [2, 0, [12, 61, [3, 0, 0]]], "%s=%S"],
    cst_rev = cst_rev$0,
    cst_rel = cst_rel$0,
    _am_ = [0, [2, 0, [11, '="', [2, 0, [12, 34, 0]]]], '%s="%s"'],
    cst_hreflang$0 = "hreflang=",
    _an_ = [0, [11, 'media="', [2, 0, [12, 34, 0]]], 'media="%s"'],
    _ao_ = [0, [11, "title=", [3, 0, 0]], "title=%S"],
    _ap_ =
      [0,
       [11, "title*=", [2, 0, [12, 39, [2, 0, [12, 39, [2, 0, 0]]]]]],
       "title*=%s'%s'%s"],
    _aq_ = [0, [11, "type=", [2, 0, [12, 47, [2, 0, 0]]]], "type=%s/%s"],
    _at_ = [0, [11, 'anchor="', [2, 0, [12, 34, 0]]], 'anchor="%s"'],
    _ai_ = [0, 0, 0],
    _ad_ = [0, 2],
    _ae_ = [0, cst$17, cst$17],
    _ac_ = [0, 59, [0, 44, 0]],
    _ab_ = [0, 59, [0, 44, 0]],
    cst_alternate = cst_alternate$0,
    cst_appendix = cst_appendix$0,
    cst_bookmark = cst_bookmark$0,
    cst_chapter = cst_chapter$0,
    cst_contents = cst_contents$0,
    cst_copyright = cst_copyright$0,
    cst_current = cst_current$0,
    cst_describedby = cst_describedby$0,
    cst_edit = cst_edit$0,
    cst_edit_media = cst_edit_media$0,
    cst_enclosure = cst_enclosure$0,
    cst_first = cst_first$0,
    cst_glossary = cst_glossary$0,
    cst_help = cst_help$0,
    cst_hub = cst_hub$0,
    cst_index = cst_index$0,
    cst_last = cst_last$0,
    cst_latest_version = cst_latest_version$0,
    cst_license = cst_license$0,
    cst_next = cst_next$0,
    cst_next_archive = cst_next_archive$0,
    cst_payment = cst_payment$0,
    cst_predecessor_version = cst_predecessor_version$0,
    cst_prev = cst_prev$0,
    cst_prev_archive = cst_prev_archive$0,
    cst_related = cst_related$0,
    cst_replies = cst_replies$0,
    cst_section = cst_section$0,
    cst_self = cst_self$0,
    cst_service = cst_service$0,
    cst_start = cst_start$0,
    cst_stylesheet = cst_stylesheet$0,
    cst_subsection = cst_subsection$0,
    cst_successor_version = cst_successor_version$0,
    cst_up = cst_up$0,
    cst_version_history = cst_version_history$0,
    cst_via = cst_via$0,
    cst_working_copy = cst_working_copy$0,
    cst_working_copy_of = cst_working_copy_of$0,
    ___ = [0, cst_target$0],
    _$_ = [0, cst_arc$0],
    _aa_ = [0, cst_context$0],
    cst_target = cst_target$0,
    cst_arc = cst_arc$0,
    cst_context = cst_context$0,
    _R_ = [0, cst_extension_exts$0],
    _S_ = [0, cst_extensions$0],
    _T_ = [0, cst_media_type$0],
    _U_ = [0, cst_title_ext$0],
    _V_ = [0, cst_title$0],
    _W_ = [0, cst_media$0],
    _X_ = [0, cst_hreflang$1],
    _Y_ = [0, cst_relation$0],
    _Z_ = [0, cst_reverse$0],
    cst_extension_exts = cst_extension_exts$0,
    cst_extensions = cst_extensions$0,
    cst_media_type = cst_media_type$0,
    cst_title_ext = cst_title_ext$0,
    cst_title = cst_title$0,
    cst_media = cst_media$0,
    cst_hreflang = cst_hreflang$1,
    cst_relation = cst_relation$0,
    cst_reverse = cst_reverse$0,
    _O_ = [0, cst_value$0],
    _P_ = [0, cst_language$0],
    _Q_ = [0, cst_charset$0],
    cst_value = cst_value$0,
    cst_language = cst_language$0,
    cst_charset = cst_charset$0,
    _a_ = [0, cst_Alternate],
    _b_ = [0, cst_Appendix],
    _c_ = [0, cst_Bookmark],
    _d_ = [0, cst_Chapter],
    _e_ = [0, cst_Contents],
    _f_ = [0, cst_Copyright],
    _g_ = [0, cst_Current],
    _h_ = [0, cst_Described_by],
    _i_ = [0, cst_Edit],
    _j_ = [0, cst_Edit_media],
    _k_ = [0, cst_Enclosure],
    _l_ = [0, cst_First],
    _m_ = [0, cst_Glossary],
    _n_ = [0, cst_Help],
    _o_ = [0, cst_Hub],
    _p_ = [0, cst_Index],
    _q_ = [0, cst_Last],
    _r_ = [0, cst_Latest_version],
    _s_ = [0, cst_License],
    _t_ = [0, cst_Next],
    _u_ = [0, cst_Next_archive],
    _v_ = [0, cst_Payment],
    _w_ = [0, cst_Predecessor_version],
    _x_ = [0, cst_Prev],
    _y_ = [0, cst_Prev_archive],
    _z_ = [0, cst_Related],
    _A_ = [0, cst_Replies],
    _B_ = [0, cst_Section],
    _C_ = [0, cst_Self],
    _D_ = [0, cst_Service],
    _E_ = [0, cst_Start],
    _F_ = [0, cst_Stylesheet],
    _G_ = [0, cst_Subsection],
    _H_ = [0, cst_Successor_version],
    _I_ = [0, cst_Up],
    _J_ = [0, cst_Version_history],
    _K_ = [0, cst_Via],
    _L_ = [0, cst_Working_copy],
    _M_ = [0, cst_Working_copy_of],
    _N_ = [0, cst_Extension];
   function t_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var
       _bP_ = sexp_005[1],
       _bQ_ = caml_string_compare(_bP_, cst_alternate$0);
      b:
      {
       c:
       {
        d:
        {
         e:
         {
          f:
          {
           g:
           {
            h:
            {
             i:
             {
              j:
              {
               k:
               {
                l:
                {
                 m:
                 {
                  n:
                  {
                   o:
                   {
                    p:
                    {
                     q:
                     {
                      r:
                      {
                       s:
                       {
                        t:
                        {
                         u:
                         {
                          v:
                          {
                           w:
                           {
                            x:
                            {
                             y:
                             {
                              z:
                              {
                               A:
                               {
                                B:
                                {
                                 C:
                                 {
                                  D:
                                  {
                                   E:
                                   {
                                    F:
                                    {
                                     G:
                                     {
                                      H:
                                      {
                                       I:
                                       {
                                        J:
                                        {
                                         K:
                                         {
                                          L:
                                          {
                                           M:
                                           {
                                            N:
                                            {
                                             if(0 <= _bQ_){
                                              if(0 >= _bQ_) break f;
                                              var _bR_ = caml_string_compare(_bP_, cst_next$0);
                                              if(0 > _bR_){
                                               var _bT_ = caml_string_compare(_bP_, cst_enclosure$0);
                                               if(0 <= _bT_){
                                                if(0 >= _bT_) break u;
                                                if(! caml_string_notequal(_bP_, cst_extension)) break t;
                                                if(! caml_string_notequal(_bP_, cst_first$0)) break s;
                                                if(! caml_string_notequal(_bP_, cst_glossary$0)) break r;
                                                if(! caml_string_notequal(_bP_, cst_help$0)) break q;
                                                if(! caml_string_notequal(_bP_, cst_hub$0)) break p;
                                                if(! caml_string_notequal(_bP_, cst_index$0)) break o;
                                                if(! caml_string_notequal(_bP_, cst_last$0)) break n;
                                                if(! caml_string_notequal(_bP_, cst_latest_version$1))
                                                 break m;
                                                if(caml_string_notequal(_bP_, cst_license$0)) break a;
                                                break l;
                                               }
                                               if(! caml_string_notequal(_bP_, cst_appendix$0)) break e;
                                               if(! caml_string_notequal(_bP_, cst_bookmark$0)) break d;
                                               if(! caml_string_notequal(_bP_, cst_chapter$0)) break c;
                                               if(! caml_string_notequal(_bP_, cst_contents$0)) break b;
                                               if(! caml_string_notequal(_bP_, cst_copyright$0)) break k;
                                               if(! caml_string_notequal(_bP_, cst_current$0)) break j;
                                               if(! caml_string_notequal(_bP_, cst_described_by)) break i;
                                               if(! caml_string_notequal(_bP_, cst_edit$0)) break h;
                                               if(caml_string_notequal(_bP_, cst_edit_media$1)) break a;
                                               break g;
                                              }
                                              if(0 < _bR_){
                                               var _bS_ = caml_string_compare(_bP_, cst_service$0);
                                               if(0 <= _bS_){
                                                if(0 >= _bS_) break N;
                                                if(! caml_string_notequal(_bP_, cst_start$0)) break M;
                                                if(! caml_string_notequal(_bP_, cst_stylesheet$0)) break L;
                                                if(! caml_string_notequal(_bP_, cst_subsection$0)) break K;
                                                if(! caml_string_notequal(_bP_, cst_successor_version$1))
                                                 break J;
                                                if(! caml_string_notequal(_bP_, cst_up$0)) break I;
                                                if(! caml_string_notequal(_bP_, cst_version_history$1))
                                                 break H;
                                                if(! caml_string_notequal(_bP_, cst_via$0)) break G;
                                                if(! caml_string_notequal(_bP_, cst_working_copy$1))
                                                 break F;
                                                if(caml_string_notequal(_bP_, cst_working_copy_of$1))
                                                 break a;
                                                break E;
                                               }
                                               if(! caml_string_notequal(_bP_, cst_next_archive$1))
                                                break D;
                                               if(! caml_string_notequal(_bP_, cst_payment$0)) break C;
                                               if(! caml_string_notequal(_bP_, cst_predecessor_version$1))
                                                break B;
                                               if(! caml_string_notequal(_bP_, cst_prev$0)) break A;
                                               if(! caml_string_notequal(_bP_, cst_prev_archive$1))
                                                break z;
                                               if(! caml_string_notequal(_bP_, cst_related$0)) break y;
                                               if(! caml_string_notequal(_bP_, cst_replies$0)) break x;
                                               if(! caml_string_notequal(_bP_, cst_section$0)) break w;
                                               if(caml_string_notequal(_bP_, cst_self$0)) break a;
                                               break v;
                                              }
                                             }
                                             else{
                                              var _bU_ = caml_string_compare(_bP_, cst_Next);
                                              if(0 > _bU_){
                                               var _bW_ = caml_string_compare(_bP_, cst_Enclosure);
                                               if(0 <= _bW_){
                                                if(0 >= _bW_) break u;
                                                if(! caml_string_notequal(_bP_, cst_Extension)) break t;
                                                if(! caml_string_notequal(_bP_, cst_First)) break s;
                                                if(! caml_string_notequal(_bP_, cst_Glossary)) break r;
                                                if(! caml_string_notequal(_bP_, cst_Help)) break q;
                                                if(! caml_string_notequal(_bP_, cst_Hub)) break p;
                                                if(! caml_string_notequal(_bP_, cst_Index)) break o;
                                                if(! caml_string_notequal(_bP_, cst_Last)) break n;
                                                if(! caml_string_notequal(_bP_, cst_Latest_version))
                                                 break m;
                                                if(caml_string_notequal(_bP_, cst_License)) break a;
                                                break l;
                                               }
                                               var _bX_ = caml_string_compare(_bP_, cst_Copyright);
                                               if(0 <= _bX_){
                                                if(0 >= _bX_) break k;
                                                if(! caml_string_notequal(_bP_, cst_Current)) break j;
                                                if(! caml_string_notequal(_bP_, cst_Described_by)) break i;
                                                if(! caml_string_notequal(_bP_, cst_Edit)) break h;
                                                if(caml_string_notequal(_bP_, cst_Edit_media)) break a;
                                                break g;
                                               }
                                               if(! caml_string_notequal(_bP_, cst_Alternate)) break f;
                                               if(! caml_string_notequal(_bP_, cst_Appendix)) break e;
                                               if(! caml_string_notequal(_bP_, cst_Bookmark)) break d;
                                               if(! caml_string_notequal(_bP_, cst_Chapter)) break c;
                                               if(caml_string_notequal(_bP_, cst_Contents)) break a;
                                               break b;
                                              }
                                              if(0 < _bU_){
                                               var _bV_ = caml_string_compare(_bP_, cst_Service);
                                               if(0 <= _bV_){
                                                if(0 >= _bV_) break N;
                                                if(! caml_string_notequal(_bP_, cst_Start)) break M;
                                                if(! caml_string_notequal(_bP_, cst_Stylesheet)) break L;
                                                if(! caml_string_notequal(_bP_, cst_Subsection)) break K;
                                                if(! caml_string_notequal(_bP_, cst_Successor_version))
                                                 break J;
                                                if(! caml_string_notequal(_bP_, cst_Up)) break I;
                                                if(! caml_string_notequal(_bP_, cst_Version_history))
                                                 break H;
                                                if(! caml_string_notequal(_bP_, cst_Via)) break G;
                                                if(! caml_string_notequal(_bP_, cst_Working_copy)) break F;
                                                if(caml_string_notequal(_bP_, cst_Working_copy_of)) break a;
                                                break E;
                                               }
                                               if(! caml_string_notequal(_bP_, cst_Next_archive)) break D;
                                               if(! caml_string_notequal(_bP_, cst_Payment)) break C;
                                               if(! caml_string_notequal(_bP_, cst_Predecessor_version))
                                                break B;
                                               if(! caml_string_notequal(_bP_, cst_Prev)) break A;
                                               if(! caml_string_notequal(_bP_, cst_Prev_archive)) break z;
                                               if(! caml_string_notequal(_bP_, cst_Related)) break y;
                                               if(! caml_string_notequal(_bP_, cst_Replies)) break x;
                                               if(! caml_string_notequal(_bP_, cst_Section)) break w;
                                               if(caml_string_notequal(_bP_, cst_Self)) break a;
                                               break v;
                                              }
                                             }
                                             return 19;
                                            }
                                            return 29;
                                           }
                                           return 30;
                                          }
                                          return 31;
                                         }
                                         return 32;
                                        }
                                        return 33;
                                       }
                                       return 34;
                                      }
                                      return 35;
                                     }
                                     return 36;
                                    }
                                    return 37;
                                   }
                                   return 38;
                                  }
                                  return 20;
                                 }
                                 return 21;
                                }
                                return 22;
                               }
                               return 23;
                              }
                              return 24;
                             }
                             return 25;
                            }
                            return 26;
                           }
                           return 27;
                          }
                          return 28;
                         }
                         return 10;
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
                       }
                       return 11;
                      }
                      return 12;
                     }
                     return 13;
                    }
                    return 14;
                   }
                   return 15;
                  }
                  return 16;
                 }
                 return 17;
                }
                return 18;
               }
               return 5;
              }
              return 6;
             }
             return 7;
            }
            return 8;
           }
           return 9;
          }
          return 0;
         }
         return 1;
        }
        return 2;
       }
       return 3;
      }
      return 4;
     }
     var _bY_ = sexp_005[1];
     if(! _bY_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     var _bZ_ = _bY_[1];
     if(0 !== _bZ_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_005);
     var
      tag_006 = _bZ_[1],
      _b0_ = caml_string_compare(tag_006, cst_alternate$0);
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              k:
              {
               l:
               {
                m:
                {
                 n:
                 {
                  o:
                  {
                   p:
                   {
                    q:
                    {
                     r:
                     {
                      s:
                      {
                       t:
                       {
                        u:
                        {
                         v:
                         {
                          w:
                          {
                           x:
                           {
                            y:
                            {
                             z:
                             {
                              A:
                              {
                               B:
                               {
                                C:
                                {
                                 D:
                                 {
                                  E:
                                  {
                                   F:
                                   {
                                    G:
                                    {
                                     H:
                                     {
                                      I:
                                      {
                                       J:
                                       {
                                        K:
                                        {
                                         L:
                                         {
                                          M:
                                          {
                                           N:
                                           {
                                            if(0 <= _b0_){
                                             if(0 >= _b0_) break f;
                                             var _b1_ = caml_string_compare(tag_006, cst_next$0);
                                             if(0 > _b1_){
                                              var _b3_ = caml_string_compare(tag_006, cst_enclosure$0);
                                              if(0 <= _b3_){
                                               if(0 >= _b3_) break u;
                                               if(! caml_string_notequal(tag_006, cst_extension)) break t;
                                               if(! caml_string_notequal(tag_006, cst_first$0)) break s;
                                               if(! caml_string_notequal(tag_006, cst_glossary$0)) break r;
                                               if(! caml_string_notequal(tag_006, cst_help$0)) break q;
                                               if(! caml_string_notequal(tag_006, cst_hub$0)) break p;
                                               if(! caml_string_notequal(tag_006, cst_index$0)) break o;
                                               if(! caml_string_notequal(tag_006, cst_last$0)) break n;
                                               if(! caml_string_notequal(tag_006, cst_latest_version$1))
                                                break m;
                                               if(caml_string_notequal(tag_006, cst_license$0)) break a;
                                               break l;
                                              }
                                              if(! caml_string_notequal(tag_006, cst_appendix$0)) break e;
                                              if(! caml_string_notequal(tag_006, cst_bookmark$0)) break d;
                                              if(! caml_string_notequal(tag_006, cst_chapter$0)) break c;
                                              if(! caml_string_notequal(tag_006, cst_contents$0)) break b;
                                              if(! caml_string_notequal(tag_006, cst_copyright$0))
                                               break k;
                                              if(! caml_string_notequal(tag_006, cst_current$0)) break j;
                                              if(! caml_string_notequal(tag_006, cst_described_by))
                                               break i;
                                              if(! caml_string_notequal(tag_006, cst_edit$0)) break h;
                                              if(caml_string_notequal(tag_006, cst_edit_media$1)) break a;
                                              break g;
                                             }
                                             if(0 < _b1_){
                                              var _b2_ = caml_string_compare(tag_006, cst_service$0);
                                              if(0 <= _b2_){
                                               if(0 >= _b2_) break N;
                                               if(! caml_string_notequal(tag_006, cst_start$0)) break M;
                                               if(! caml_string_notequal(tag_006, cst_stylesheet$0))
                                                break L;
                                               if(! caml_string_notequal(tag_006, cst_subsection$0))
                                                break K;
                                               if(! caml_string_notequal(tag_006, cst_successor_version$1))
                                                break J;
                                               if(! caml_string_notequal(tag_006, cst_up$0)) break I;
                                               if(! caml_string_notequal(tag_006, cst_version_history$1))
                                                break H;
                                               if(! caml_string_notequal(tag_006, cst_via$0)) break G;
                                               if(! caml_string_notequal(tag_006, cst_working_copy$1))
                                                break F;
                                               if(caml_string_notequal(tag_006, cst_working_copy_of$1))
                                                break a;
                                               break E;
                                              }
                                              if(! caml_string_notequal(tag_006, cst_next_archive$1))
                                               break D;
                                              if(! caml_string_notequal(tag_006, cst_payment$0)) break C;
                                              if
                                               (! caml_string_notequal(tag_006, cst_predecessor_version$1))
                                               break B;
                                              if(! caml_string_notequal(tag_006, cst_prev$0)) break A;
                                              if(! caml_string_notequal(tag_006, cst_prev_archive$1))
                                               break z;
                                              if(! caml_string_notequal(tag_006, cst_related$0)) break y;
                                              if(! caml_string_notequal(tag_006, cst_replies$0)) break x;
                                              if(! caml_string_notequal(tag_006, cst_section$0)) break w;
                                              if(caml_string_notequal(tag_006, cst_self$0)) break a;
                                              break v;
                                             }
                                            }
                                            else{
                                             var _b4_ = caml_string_compare(tag_006, cst_Next);
                                             if(0 > _b4_){
                                              var _b6_ = caml_string_compare(tag_006, cst_Enclosure);
                                              if(0 <= _b6_){
                                               if(0 >= _b6_) break u;
                                               if(! caml_string_notequal(tag_006, cst_Extension)) break t;
                                               if(! caml_string_notequal(tag_006, cst_First)) break s;
                                               if(! caml_string_notequal(tag_006, cst_Glossary)) break r;
                                               if(! caml_string_notequal(tag_006, cst_Help)) break q;
                                               if(! caml_string_notequal(tag_006, cst_Hub)) break p;
                                               if(! caml_string_notequal(tag_006, cst_Index)) break o;
                                               if(! caml_string_notequal(tag_006, cst_Last)) break n;
                                               if(! caml_string_notequal(tag_006, cst_Latest_version))
                                                break m;
                                               if(caml_string_notequal(tag_006, cst_License)) break a;
                                               break l;
                                              }
                                              var _b7_ = caml_string_compare(tag_006, cst_Copyright);
                                              if(0 <= _b7_){
                                               if(0 >= _b7_) break k;
                                               if(! caml_string_notequal(tag_006, cst_Current)) break j;
                                               if(! caml_string_notequal(tag_006, cst_Described_by))
                                                break i;
                                               if(! caml_string_notequal(tag_006, cst_Edit)) break h;
                                               if(caml_string_notequal(tag_006, cst_Edit_media)) break a;
                                               break g;
                                              }
                                              if(! caml_string_notequal(tag_006, cst_Alternate)) break f;
                                              if(! caml_string_notequal(tag_006, cst_Appendix)) break e;
                                              if(! caml_string_notequal(tag_006, cst_Bookmark)) break d;
                                              if(! caml_string_notequal(tag_006, cst_Chapter)) break c;
                                              if(caml_string_notequal(tag_006, cst_Contents)) break a;
                                              break b;
                                             }
                                             if(0 < _b4_){
                                              var _b5_ = caml_string_compare(tag_006, cst_Service);
                                              if(0 <= _b5_){
                                               if(0 >= _b5_) break N;
                                               if(! caml_string_notequal(tag_006, cst_Start)) break M;
                                               if(! caml_string_notequal(tag_006, cst_Stylesheet)) break L;
                                               if(! caml_string_notequal(tag_006, cst_Subsection)) break K;
                                               if(! caml_string_notequal(tag_006, cst_Successor_version))
                                                break J;
                                               if(! caml_string_notequal(tag_006, cst_Up)) break I;
                                               if(! caml_string_notequal(tag_006, cst_Version_history))
                                                break H;
                                               if(! caml_string_notequal(tag_006, cst_Via)) break G;
                                               if(! caml_string_notequal(tag_006, cst_Working_copy))
                                                break F;
                                               if(caml_string_notequal(tag_006, cst_Working_copy_of))
                                                break a;
                                               break E;
                                              }
                                              if(! caml_string_notequal(tag_006, cst_Next_archive))
                                               break D;
                                              if(! caml_string_notequal(tag_006, cst_Payment)) break C;
                                              if(! caml_string_notequal(tag_006, cst_Predecessor_version))
                                               break B;
                                              if(! caml_string_notequal(tag_006, cst_Prev)) break A;
                                              if(! caml_string_notequal(tag_006, cst_Prev_archive))
                                               break z;
                                              if(! caml_string_notequal(tag_006, cst_Related)) break y;
                                              if(! caml_string_notequal(tag_006, cst_Replies)) break x;
                                              if(! caml_string_notequal(tag_006, cst_Section)) break w;
                                              if(caml_string_notequal(tag_006, cst_Self)) break a;
                                              break v;
                                             }
                                            }
                                            return caml_call2
                                                    (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                           }
                                           return caml_call2
                                                   (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                          }
                                          return caml_call2
                                                  (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                         }
                                         return caml_call2
                                                 (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                        }
                                        return caml_call2
                                                (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                       }
                                       return caml_call2
                                               (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                      }
                                      return caml_call2
                                              (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                     }
                                     return caml_call2
                                             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                    }
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                   }
                                   return caml_call2
                                           (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                  }
                                  return caml_call2
                                          (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                 }
                                 return caml_call2
                                         (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                                }
                                return caml_call2
                                        (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                               }
                               return caml_call2
                                       (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                              }
                              return caml_call2
                                      (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                             }
                             return caml_call2
                                     (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                            }
                            return caml_call2
                                    (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                           }
                           return caml_call2
                                   (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                          }
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                         }
                         return caml_call2
                                 (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                        }
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                       }
                       var sexp_args_007 = _bY_[2];
                       if(sexp_args_007 && ! sexp_args_007[2]){
                        var
                         arg0_008 = sexp_args_007[1],
                         res0_009 = caml_call1(Uri_sexp[3], arg0_008);
                        return [0, res0_009];
                       }
                       return caml_call3
                               (Sexplib0_Sexp_conv_error[4],
                                error_source_003,
                                tag_006,
                                sexp_005);
                      }
                      return caml_call2
                              (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                     }
                     return caml_call2
                             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                    }
                    return caml_call2
                            (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                   }
                   return caml_call2
                           (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                  }
                  return caml_call2
                          (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                 }
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
                }
                return caml_call2
                        (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
               }
               return caml_call2
                       (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
              }
              return caml_call2
                      (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
             }
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
            }
            return caml_call2
                    (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
           }
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
          }
          return caml_call2
                  (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
         }
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_005);
   }
   function sexp_of_t(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return _a_;
       case 1:
        return _b_;
       case 2:
        return _c_;
       case 3:
        return _d_;
       case 4:
        return _e_;
       case 5:
        return _f_;
       case 6:
        return _g_;
       case 7:
        return _h_;
       case 8:
        return _i_;
       case 9:
        return _j_;
       case 10:
        return _k_;
       case 11:
        return _l_;
       case 12:
        return _m_;
       case 13:
        return _n_;
       case 14:
        return _o_;
       case 15:
        return _p_;
       case 16:
        return _q_;
       case 17:
        return _r_;
       case 18:
        return _s_;
       case 19:
        return _t_;
       case 20:
        return _u_;
       case 21:
        return _v_;
       case 22:
        return _w_;
       case 23:
        return _x_;
       case 24:
        return _y_;
       case 25:
        return _z_;
       case 26:
        return _A_;
       case 27:
        return _B_;
       case 28:
        return _C_;
       case 29:
        return _D_;
       case 30:
        return _E_;
       case 31:
        return _F_;
       case 32:
        return _G_;
       case 33:
        return _H_;
       case 34:
        return _I_;
       case 35:
        return _J_;
       case 36:
        return _K_;
       case 37:
        return _L_;
       default: return _M_;
     }
    var arg0_010 = param[1], res0_011 = caml_call1(Uri_sexp[4], arg0_010);
    return [1, [0, _N_, [0, res0_011, 0]]];
   }
   function extension(uri){return [0, uri];}
   var
    Rel =
      [0,
       t_of_sexp,
       sexp_of_t,
       extension,
       0,
       1,
       2,
       3,
       4,
       5,
       6,
       7,
       8,
       9,
       10,
       11,
       12,
       13,
       14,
       15,
       16,
       17,
       18,
       19,
       20,
       21,
       22,
       23,
       24,
       25,
       26,
       27,
       28,
       29,
       30,
       31,
       32,
       33,
       34,
       35,
       36,
       37,
       38],
    t_of_sexp$0 = Sexplib0_Sexp_conv[31],
    sexp_of_t$0 = Sexplib0_Sexp_conv[7];
   function to_string(x){return x;}
   function of_string(x){return x;}
   var
    Language = [0, t_of_sexp$0, sexp_of_t$0, to_string, of_string],
    t_of_sexp$1 = Sexplib0_Sexp_conv[31],
    sexp_of_t$1 = Sexplib0_Sexp_conv[7];
   function to_string$0(x){return x;}
   function of_string$0(x){return x;}
   var Charset = [0, t_of_sexp$1, sexp_of_t$1, to_string$0, of_string$0];
   function t_of_sexp$2(of_a_014, x_017){
    function _bL_(param){
     var
      _bO_ = param[2],
      value = _bO_[2][1],
      language = _bO_[1],
      charset = param[1];
     return [0, charset, language, value];
    }
    var _bM_ = 0;
    function _bN_(param){
     return caml_string_notequal(param, cst_charset$0)
             ? caml_string_notequal
                (param, cst_language$0)
               ? caml_string_notequal(param, cst_value$0) ? -1 : 2
               : 1
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_016,
             [0,
              cst_charset,
              1,
              Charset[1],
              [0,
               cst_language,
               1,
               Language[1],
               [0, cst_value, 1, of_a_014, 0]]],
             _bN_,
             _bM_,
             _bL_,
             x_017);
   }
   function sexp_of_t$2(of_a_018, param){
    var
     value_024 = param[3],
     language_022 = param[2],
     charset_020 = param[1],
     arg_025 = caml_call1(of_a_018, value_024),
     bnds_019 = [0, [1, [0, _O_, [0, arg_025, 0]]], 0],
     arg_023 = caml_call1(Language[2], language_022),
     bnds_019$0 = [0, [1, [0, _P_, [0, arg_023, 0]]], bnds_019],
     arg_021 = caml_call1(Charset[2], charset_020),
     bnds_019$1 = [0, [1, [0, _Q_, [0, arg_021, 0]]], bnds_019$0];
    return [1, bnds_019$1];
   }
   function charset(t){return t[1];}
   function language(t){return t[2];}
   function value(t){return t[3];}
   function make(opt, _bK_, value){
    if(opt) var sth = opt[1], charset = sth; else var charset = cst$0;
    if(_bK_) var sth$0 = _bK_[1], language = sth$0; else var language = cst;
    return [0, charset, language, value];
   }
   function map(f, x){
    var _bJ_ = caml_call1(f, x[3]);
    return [0, x[1], x[2], _bJ_];
   }
   var
    Ext = [0, t_of_sexp$2, sexp_of_t$2, charset, language, value, make, map];
   function t_of_sexp$3(x_043){
    function _bg_(param){
     var
      _bC_ = param[2],
      _bD_ = _bC_[2],
      _bE_ = _bD_[2],
      _bF_ = _bE_[2],
      _bG_ = _bF_[2],
      _bH_ = _bG_[2],
      _bI_ = _bH_[2],
      extension_exts = _bI_[2][1],
      extensions = _bI_[1],
      media_type = _bH_[1],
      title_ext = _bG_[1],
      title = _bF_[1],
      media = _bE_[1],
      hreflang = _bD_[1],
      relation = _bC_[1],
      reverse = param[1];
     return [0,
             reverse,
             relation,
             hreflang,
             media,
             title,
             title_ext,
             media_type,
             extensions,
             extension_exts];
    }
    var _bh_ = 0;
    function _bi_(param){
     return caml_string_notequal(param, cst_extension_exts$0)
             ? caml_string_notequal
                (param, cst_extensions$0)
               ? caml_string_notequal
                  (param, cst_hreflang$1)
                 ? caml_string_notequal
                    (param, cst_media$0)
                   ? caml_string_notequal
                      (param, cst_media_type$0)
                     ? caml_string_notequal
                        (param, cst_relation$0)
                       ? caml_string_notequal
                          (param, cst_reverse$0)
                         ? caml_string_notequal
                            (param, cst_title$0)
                           ? caml_string_notequal(param, cst_title_ext$0) ? -1 : 5
                           : 4
                         : 0
                       : 1
                     : 6
                   : 3
                 : 2
               : 7
             : 8;
    }
    var _bj_ = 0;
    function _bk_(sexp_032){
     if(1 === sexp_032[0]){
      var _bA_ = sexp_032[1];
      if(_bA_){
       var _bB_ = _bA_[2];
       if(_bB_ && ! _bB_[2]){
        var
         arg1_029 = _bB_[1],
         arg0_028 = _bA_[1],
         res0_030 = caml_call1(Sexplib0_Sexp_conv[31], arg0_028),
         res1_031 = caml_call2(Ext[1], Sexplib0_Sexp_conv[31], arg1_029);
        return [0, res0_030, res1_031];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[2], error_source_027, 2, sexp_032);
    }
    var
     _bl_ =
       [0,
        cst_extension_exts,
        1,
        caml_call1(Sexplib0_Sexp_conv[44], _bk_),
        _bj_];
    function _bm_(sexp_037){
     if(1 === sexp_037[0]){
      var _by_ = sexp_037[1];
      if(_by_){
       var _bz_ = _by_[2];
       if(_bz_ && ! _bz_[2]){
        var
         arg1_034 = _bz_[1],
         arg0_033 = _by_[1],
         res0_035 = caml_call1(Sexplib0_Sexp_conv[31], arg0_033),
         res1_036 = caml_call1(Sexplib0_Sexp_conv[31], arg1_034);
        return [0, res0_035, res1_036];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[2], error_source_027, 2, sexp_037);
    }
    var
     _bn_ =
       [0, cst_extensions, 1, caml_call1(Sexplib0_Sexp_conv[44], _bm_), _bl_];
    function _bo_(sexp_042){
     if(1 === sexp_042[0]){
      var _bw_ = sexp_042[1];
      if(_bw_){
       var _bx_ = _bw_[2];
       if(_bx_ && ! _bx_[2]){
        var
         arg1_039 = _bx_[1],
         arg0_038 = _bw_[1],
         res0_040 = caml_call1(Sexplib0_Sexp_conv[31], arg0_038),
         res1_041 = caml_call1(Sexplib0_Sexp_conv[31], arg1_039);
        return [0, res0_040, res1_041];
       }
      }
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[2], error_source_027, 2, sexp_042);
    }
    var
     _bp_ =
       [0, cst_media_type, 1, caml_call1(Sexplib0_Sexp_conv[41], _bo_), _bn_],
     _bq_ = caml_call1(Ext[1], Sexplib0_Sexp_conv[31]),
     _br_ =
       [0, cst_title_ext, 1, caml_call1(Sexplib0_Sexp_conv[41], _bq_), _bp_],
     _bs_ =
       [0,
        cst_title,
        1,
        caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
        _br_],
     _bt_ =
       [0,
        cst_media,
        1,
        caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
        _bs_],
     _bu_ =
       [0,
        cst_hreflang,
        1,
        caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
        _bt_],
     _bv_ =
       [0, cst_relation, 1, caml_call1(Sexplib0_Sexp_conv[44], Rel[1]), _bu_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_027,
             [0, cst_reverse, 1, Sexplib0_Sexp_conv[30], _bv_],
             _bi_,
             _bh_,
             _bg_,
             x_043);
   }
   function t_of_sexp$4(x_077){
    function _bc_(param){
     var
      _bf_ = param[2],
      target = _bf_[2][1],
      arc = _bf_[1],
      context = param[1];
     return [0, context, arc, target];
    }
    var _bd_ = 0;
    function _be_(param){
     return caml_string_notequal(param, cst_arc$0)
             ? caml_string_notequal
                (param, cst_context$0)
               ? caml_string_notequal(param, cst_target$0) ? -1 : 2
               : 0
             : 1;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_076,
             [0,
              cst_context,
              1,
              Uri_sexp[3],
              [0, cst_arc, 1, t_of_sexp$3, [0, cst_target, 1, Uri_sexp[3], 0]]],
             _be_,
             _bd_,
             _bc_,
             x_077);
   }
   function sexp_of_t$3(param){
    var
     target_083 = param[3],
     arc_081 = param[2],
     context_079 = param[1],
     arg_084 = caml_call1(Uri_sexp[4], target_083),
     bnds_078 = [0, [1, [0, ___, [0, arg_084, 0]]], 0],
     extension_exts_069 = arc_081[9],
     extensions_063 = arc_081[8],
     media_type_057 = arc_081[7],
     title_ext_055 = arc_081[6],
     title_053 = arc_081[5],
     media_051 = arc_081[4],
     hreflang_049 = arc_081[3],
     relation_047 = arc_081[2],
     reverse_045 = arc_081[1],
     bnds_044 = 0;
    function _a__(param){
     var
      arg1_072 = param[2],
      arg0_071 = param[1],
      res0_073 = caml_call1(Sexplib0_Sexp_conv[7], arg0_071),
      res1_074 = caml_call2(Ext[2], Sexplib0_Sexp_conv[7], arg1_072);
     return [1, [0, res0_073, [0, res1_074, 0]]];
    }
    var
     arg_070 = caml_call2(Sexplib0_Sexp_conv[20], _a__, extension_exts_069),
     bnds_044$0 = [0, [1, [0, _R_, [0, arg_070, 0]]], bnds_044];
    function _a$_(param){
     var
      arg1_066 = param[2],
      arg0_065 = param[1],
      res0_067 = caml_call1(Sexplib0_Sexp_conv[7], arg0_065),
      res1_068 = caml_call1(Sexplib0_Sexp_conv[7], arg1_066);
     return [1, [0, res0_067, [0, res1_068, 0]]];
    }
    var
     arg_064 = caml_call2(Sexplib0_Sexp_conv[20], _a$_, extensions_063),
     bnds_044$1 = [0, [1, [0, _S_, [0, arg_064, 0]]], bnds_044$0];
    function _ba_(param){
     var
      arg1_060 = param[2],
      arg0_059 = param[1],
      res0_061 = caml_call1(Sexplib0_Sexp_conv[7], arg0_059),
      res1_062 = caml_call1(Sexplib0_Sexp_conv[7], arg1_060);
     return [1, [0, res0_061, [0, res1_062, 0]]];
    }
    var
     arg_058 = caml_call2(Sexplib0_Sexp_conv[17], _ba_, media_type_057),
     bnds_044$2 = [0, [1, [0, _T_, [0, arg_058, 0]]], bnds_044$1],
     _bb_ = caml_call1(Ext[2], Sexplib0_Sexp_conv[7]),
     arg_056 = caml_call2(Sexplib0_Sexp_conv[17], _bb_, title_ext_055),
     bnds_044$3 = [0, [1, [0, _U_, [0, arg_056, 0]]], bnds_044$2],
     arg_054 =
       caml_call2(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7], title_053),
     bnds_044$4 = [0, [1, [0, _V_, [0, arg_054, 0]]], bnds_044$3],
     arg_052 =
       caml_call2(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7], media_051),
     bnds_044$5 = [0, [1, [0, _W_, [0, arg_052, 0]]], bnds_044$4],
     arg_050 =
       caml_call2(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7], hreflang_049),
     bnds_044$6 = [0, [1, [0, _X_, [0, arg_050, 0]]], bnds_044$5],
     arg_048 = caml_call2(Sexplib0_Sexp_conv[20], Rel[2], relation_047),
     bnds_044$7 = [0, [1, [0, _Y_, [0, arg_048, 0]]], bnds_044$6],
     arg_046 = caml_call1(Sexplib0_Sexp_conv[6], reverse_045),
     bnds_044$8 = [0, [1, [0, _Z_, [0, arg_046, 0]]], bnds_044$7],
     arg_082 = [1, bnds_044$8],
     bnds_078$0 = [0, [1, [0, _$_, [0, arg_082, 0]]], bnds_078],
     arg_080 = caml_call1(Uri_sexp[4], context_079),
     bnds_078$1 = [0, [1, [0, _aa_, [0, arg_080, 0]]], bnds_078$0];
    return [1, bnds_078$1];
   }
   function until(s, start, cl){
    function _a7_(c){
     var pattern = caml_call2(Stdlib_String[1], 1, c);
     return caml_call3(Stringext[12], [0, start], s, pattern);
    }
    var nextl = caml_call2(Stdlib_List[19], _a7_, cl), _a8_ = 0;
    function _a9_(min_opt, i_opt){
     if(min_opt){
      var i = min_opt[1];
      if(i_opt){var j = i_opt[1]; return [0, caml_call2(Stdlib[16], i, j)];}
      var i$0 = i;
     }
     else{if(! i_opt) return 0; var i$0 = i_opt[1];}
     return [0, i$0];
    }
    var min = caml_call3(Stdlib_List[25], _a9_, _a8_, nextl);
    if(! min)
     return [0, caml_call2(Stringext[1], s, start), caml_ml_string_length(s)];
    var i = min[1];
    return [0, caml_call3(Stdlib_String[15], s, start, i - start | 0), i];
   }
   function string_of_rel(param){
    if(typeof param === "number")
     switch(param){
       case 0:
        return cst_alternate;
       case 1:
        return cst_appendix;
       case 2:
        return cst_bookmark;
       case 3:
        return cst_chapter;
       case 4:
        return cst_contents;
       case 5:
        return cst_copyright;
       case 6:
        return cst_current;
       case 7:
        return cst_describedby;
       case 8:
        return cst_edit;
       case 9:
        return cst_edit_media;
       case 10:
        return cst_enclosure;
       case 11:
        return cst_first;
       case 12:
        return cst_glossary;
       case 13:
        return cst_help;
       case 14:
        return cst_hub;
       case 15:
        return cst_index;
       case 16:
        return cst_last;
       case 17:
        return cst_latest_version;
       case 18:
        return cst_license;
       case 19:
        return cst_next;
       case 20:
        return cst_next_archive;
       case 21:
        return cst_payment;
       case 22:
        return cst_predecessor_version;
       case 23:
        return cst_prev;
       case 24:
        return cst_prev_archive;
       case 25:
        return cst_related;
       case 26:
        return cst_replies;
       case 27:
        return cst_section;
       case 28:
        return cst_self;
       case 29:
        return cst_service;
       case 30:
        return cst_start;
       case 31:
        return cst_stylesheet;
       case 32:
        return cst_subsection;
       case 33:
        return cst_successor_version;
       case 34:
        return cst_up;
       case 35:
        return cst_version_history;
       case 36:
        return cst_via;
       case 37:
        return cst_working_copy;
       default: return cst_working_copy_of;
     }
    var uri = param[1];
    return caml_call2(Uri[8], 0, uri);
   }
   function rel_of_string(s){
    try{
     caml_call2(Stdlib_String[35], s, 58);
     var _a5_ = [0, caml_call1(Uri[7], s)];
     return _a5_;
    }
    catch(_a6_){
     var _a4_ = caml_wrap_exception(_a6_);
     if(_a4_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a4_, 0);
     var switch$0 = caml_string_compare(s, cst_next_archive$0);
     a:
     if(0 <= switch$0){
      if(0 >= switch$0) return 20;
      var switch$1 = caml_string_compare(s, cst_service$0);
      if(0 > switch$1){
       if(! caml_string_notequal(s, cst_payment$0)) return 21;
       if(! caml_string_notequal(s, cst_predecessor_version$0)) return 22;
       if(caml_string_notequal(s, cst_prev$0)){
        if(! caml_string_notequal(s, cst_prev_archive$0)) return 24;
        if(caml_string_notequal(s, "previous")){
         if(! caml_string_notequal(s, cst_related$0)) return 25;
         if(! caml_string_notequal(s, cst_replies$0)) return 26;
         if(! caml_string_notequal(s, cst_section$0)) return 27;
         if(caml_string_notequal(s, cst_self$0)) break a;
         return 28;
        }
       }
       return 23;
      }
      if(0 >= switch$1) return 29;
      if(! caml_string_notequal(s, cst_start$0)) return 30;
      if(! caml_string_notequal(s, cst_stylesheet$0)) return 31;
      if(! caml_string_notequal(s, cst_subsection$0)) return 32;
      if(! caml_string_notequal(s, cst_successor_version$0)) return 33;
      if(! caml_string_notequal(s, cst_up$0)) return 34;
      if(! caml_string_notequal(s, cst_version_history$0)) return 35;
      if(! caml_string_notequal(s, cst_via$0)) return 36;
      if(! caml_string_notequal(s, cst_working_copy$0)) return 37;
      if(! caml_string_notequal(s, cst_working_copy_of$0)) return 38;
     }
     else{
      var switch$2 = caml_string_compare(s, cst_enclosure$0);
      if(0 <= switch$2){
       if(0 >= switch$2) return 10;
       if(! caml_string_notequal(s, cst_first$0)) return 11;
       if(! caml_string_notequal(s, cst_glossary$0)) return 12;
       if(! caml_string_notequal(s, cst_help$0)) return 13;
       if(! caml_string_notequal(s, cst_hub$0)) return 14;
       if(! caml_string_notequal(s, cst_index$0)) return 15;
       if(! caml_string_notequal(s, cst_last$0)) return 16;
       if(! caml_string_notequal(s, cst_latest_version$0)) return 17;
       if(! caml_string_notequal(s, cst_license$0)) return 18;
       if(! caml_string_notequal(s, cst_next$0)) return 19;
      }
      else{
       var switch$3 = caml_string_compare(s, cst_copyright$0);
       if(0 <= switch$3){
        if(0 >= switch$3) return 5;
        if(! caml_string_notequal(s, cst_current$0)) return 6;
        if(! caml_string_notequal(s, cst_describedby$0)) return 7;
        if(! caml_string_notequal(s, cst_edit$0)) return 8;
        if(! caml_string_notequal(s, cst_edit_media$0)) return 9;
       }
       else{
        if(! caml_string_notequal(s, cst_alternate$0)) return 0;
        if(! caml_string_notequal(s, cst_appendix$0)) return 1;
        if(! caml_string_notequal(s, cst_bookmark$0)) return 2;
        if(! caml_string_notequal(s, cst_chapter$0)) return 3;
        if(! caml_string_notequal(s, cst_contents$0)) return 4;
       }
      }
     }
     return [0, caml_call1(Uri[7], s)];
    }
   }
   function quoted_string_of_string(s, q){
    var q$0 = q;
    for(;;){
     var switcher = caml_string_get(s, q$0) - 32 | 0;
     if(2 >= switcher >>> 0)
      switch(switcher){
        case 0:
         var q$1 = q$0 + 1 | 0, q$0 = q$1; continue;
        case 1: break;
        default:
         var
          q$2 = q$0 + 1 | 0,
          match = caml_call3(Stringext[12], [0, q$2], s, cst$1);
         if(! match)
          return [0,
                  caml_call2(Stringext[1], s, q$2),
                  caml_ml_string_length(s)];
         var q$3 = match[1];
         return [0,
                 caml_call3(Stdlib_String[15], s, q$2, q$3 - q$2 | 0),
                 q$3 + 1 | 0];
      }
     return until(s, q$0, _ab_);
    }
   }
   function rels_of_string(s, i$0){
    var
     match$0 = caml_call3(Stringext[12], [0, i$0], s, cst$2),
     match$1 = until(s, i$0, _ac_);
    if(match$0){
     var d = match$1[2], q = match$0[1];
     if(q < d){
      var
       match = quoted_string_of_string(s, q),
       i = match[2],
       qs = match[1],
       rels = caml_call3(Stringext[3], 0, qs, 32),
       _a2_ = function(s){return 0 < caml_ml_string_length(s) ? 1 : 0;},
       _a3_ = caml_call2(Stdlib_List[41], _a2_, rels);
      return [0, caml_call2(Stdlib_List[19], rel_of_string, _a3_), i];
     }
    }
    var d$0 = match$1[2], s$0 = match$1[1];
    return [0, [0, rel_of_string(s$0), 0], d$0];
   }
   function star_of_string(s, i){
    var match = caml_call3(Stringext[12], [0, i], s, cst$3);
    if(! match){
     var
      match$3 = quoted_string_of_string(s, i),
      i$4 = match$3[2],
      s$2 = match$3[1];
     return [0, cst$7, cst$6, s$2, i$4];
    }
    var
     a = match[1],
     charset = caml_call3(Stdlib_String[15], s, i, a - i | 0),
     i$0 = a + 1 | 0,
     match$0 = caml_call3(Stringext[12], [0, i$0], s, cst$4);
    if(match$0){
     var
      a$0 = match$0[1],
      language = caml_call3(Stdlib_String[15], s, i$0, a$0 - i$0 | 0),
      i$1 = a$0 + 1 | 0,
      match$1 = quoted_string_of_string(s, i$1),
      i$2 = match$1[2],
      s$0 = match$1[1];
     return [0, charset, language, s$0, i$2];
    }
    var
     match$2 = quoted_string_of_string(s, i$0),
     i$3 = match$2[2],
     s$1 = match$2[1];
    return [0, charset, cst$5, s$1, i$3];
   }
   function find_or_default(f, d, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return d;
     var t = param$0[2], h = param$0[1], match = caml_call1(f, h);
     if(match){var v = match[1]; return v;}
     var param$0 = t;
    }
   }
   function arc_of_relation_params(opt, relation, params){
    if(opt) var sth = opt[1], reverse = sth; else var reverse = 0;
    function _aP_(param, _a0_){
     var xx = param[2], x = param[1];
     switch(_a0_[0]){
       case 6:
        var _a1_ = _a0_[1], match = _a1_[3];
        if(8 === match[0]){
         var
          value = match[2],
          k = match[1],
          language = _a1_[2],
          charset = _a1_[1];
         return [0, x, [0, [0, k, [0, charset, language, value]], xx]];
        }
        break;
       case 8:
        var v = _a0_[2], k$0 = _a0_[1]; return [0, [0, [0, k$0, v], x], xx];
     }
     return [0, x, xx];
    }
    var
     match = caml_call3(Stdlib_List[25], _aP_, _ai_, params),
     extension_exts = match[2],
     extensions = match[1],
     _aQ_ = 0,
     _aR_ =
       find_or_default
        (function(param){
          if(7 !== param[0]) return 0;
          var mt = param[1];
          return [0, [0, mt]];
         },
         _aQ_,
         params),
     _aS_ = 0,
     _aT_ =
       find_or_default
        (function(param){
          if(6 === param[0]){
           var _aZ_ = param[1], match = _aZ_[3];
           if(5 === match[0]){
            var t = match[1], language = _aZ_[2], charset = _aZ_[1];
            return [0, [0, [0, charset, language, t]]];
           }
          }
          return 0;
         },
         _aS_,
         params),
     _aU_ = 0,
     _aV_ =
       find_or_default
        (function(param){
          if(5 !== param[0]) return 0;
          var t = param[1];
          return [0, [0, t]];
         },
         _aU_,
         params),
     _aW_ = 0,
     _aX_ =
       find_or_default
        (function(param){
          if(4 !== param[0]) return 0;
          var m = param[1];
          return [0, [0, m]];
         },
         _aW_,
         params),
     _aY_ = 0;
    return [0,
            reverse,
            relation,
            find_or_default
             (function(param){
               if(3 !== param[0]) return 0;
               var l = param[1];
               return [0, [0, l]];
              },
              _aY_,
              params),
            _aX_,
            _aV_,
            _aT_,
            _aR_,
            extensions,
            extension_exts];
   }
   var
    _aj_ = caml_call1(Uri[7], cst$10),
    empty$0 = [0, caml_call1(Uri[7], cst$11), empty, _aj_];
   function of_string$1(s$1){
    var list = 0, start = 0;
    for(;;){
     var match$14 = caml_call3(Stringext[12], [0, start], s$1, cst$12);
     if(match$14){
      var
       i$14 = match$14[1],
       match$15 = until(s$1, i$14 + 1 | 0, _ak_),
       i$15 = match$15[2],
       uri_ref = match$15[1],
       i$16 = i$15 + 1 | 0,
       target = caml_call1(Uri[7], uri_ref);
      a:
      {
       b:
       {
        var s = s$1, i$1 = i$16, params = 0;
        for(;;){
         var d = until(s, i$1, _af_)[2];
         if(d === caml_ml_string_length(s)) break b;
         if(44 === caml_string_get(s, d)) break;
         var
          i$2 = d + 1 | 0,
          match$3 = until(s, i$2, _ag_),
          i$3 = match$3[2],
          i$4 = i$3 + 1 | 0,
          other = caml_call1(Stdlib_String[23], match$3[1]);
         if(caml_string_notequal(other, "anchor"))
          if(caml_string_notequal(other, cst_hreflang$1))
           if(caml_string_notequal(other, cst_media$0))
            if(caml_string_notequal(other, cst_rel$0))
             if(caml_string_notequal(other, cst_rev$0))
              if(caml_string_notequal(other, cst_title$0))
               if(caml_string_notequal(other, "title*"))
                if(caml_string_notequal(other, "type"))
                 if(0 === caml_ml_string_length(other))
                  var
                   match$4 = quoted_string_of_string(s, i$4),
                   i$5 = match$4[2],
                   s$0 = match$4[1],
                   ps = [0, [8, cst$9, s$0], params],
                   s = s$0,
                   i$1 = i$5,
                   params = ps;
                 else{
                  var last = caml_ml_string_length(other) - 1 | 0;
                  if(42 === caml_string_get(other, last))
                   var
                    main = caml_call3(Stdlib_String[15], other, 0, last),
                    match$5 = star_of_string(s, i$4),
                    i$6 = match$5[4],
                    v = match$5[3],
                    language = match$5[2],
                    charset = match$5[1],
                    ps$0 =
                      [0, [6, [0, charset, language, [8, main, v]]], params],
                    i$1 = i$6,
                    params = ps$0;
                  else
                   var
                    match$6 = quoted_string_of_string(s, i$4),
                    i$7 = match$6[2],
                    v$0 = match$6[1],
                    ps$1 = [0, [8, other, v$0], params],
                    i$1 = i$7,
                    params = ps$1;
                 }
                else{
                 var
                  match$0 = quoted_string_of_string(s, i$4),
                  i$0 = match$0[2],
                  mt = match$0[1],
                  match$1 = caml_call3(Stringext[3], _ad_, mt, 47);
                 if(match$1){
                  var match$2 = match$1[2], t = match$1[1];
                  if(match$2)
                   var st = match$2[1], match$7 = [0, [0, t, st]];
                  else
                   var match$7 = [0, [0, t, cst$8]];
                 }
                 else
                  var match$7 = [0, _ae_];
                 var
                  media_type = match$7[1],
                  ps$2 = [0, [7, media_type], params],
                  i$1 = i$0,
                  params = ps$2;
                }
               else
                var
                 match$8 = star_of_string(s, i$4),
                 i$8 = match$8[4],
                 v$1 = match$8[3],
                 language$0 = match$8[2],
                 charset$0 = match$8[1],
                 ps$3 = [0, [6, [0, charset$0, language$0, [5, v$1]]], params],
                 i$1 = i$8,
                 params = ps$3;
              else
               var
                match$9 = quoted_string_of_string(s, i$4),
                i$9 = match$9[2],
                title = match$9[1],
                ps$4 = [0, [5, title], params],
                i$1 = i$9,
                params = ps$4;
             else
              var
               match$10 = rels_of_string(s, i$4),
               i$10 = match$10[2],
               rels = match$10[1],
               ps$5 = [0, [2, rels], params],
               i$1 = i$10,
               params = ps$5;
            else
             var
              match$11 = rels_of_string(s, i$4),
              i$11 = match$11[2],
              rels$0 = match$11[1],
              ps$6 = [0, [0, rels$0], params],
              i$1 = i$11,
              params = ps$6;
           else
            var
             match$12 = quoted_string_of_string(s, i$4),
             i$12 = match$12[2],
             media = match$12[1],
             ps$7 = [0, [4, media], params],
             i$1 = i$12,
             params = ps$7;
          else
           var
            match$13 = until(s, i$4, _ah_),
            i$13 = match$13[2],
            hreflang = match$13[1],
            ps$8 = [0, [3, hreflang], params],
            i$1 = i$13,
            params = ps$8;
         else
          var
           match = quoted_string_of_string(s, i$4),
           i = match[2],
           qs = match[1],
           uri = caml_call1(Uri[7], qs),
           ps$9 = [0, [1, uri], params],
           i$1 = i,
           params = ps$9;
        }
        var match$16 = [0, , [0, d]];
        break a;
       }
       var match$16 = [0, , 0];
      }
      var
       c_opt = match$16[2],
       params$0 = caml_call1(Stdlib_List[9], params),
       _aK_ = caml_call1(Uri[7], cst$13),
       context =
         find_or_default
          (function(param){
            if(1 !== param[0]) return 0;
            var uri = param[1];
            return [0, uri];
           },
           _aK_,
           params$0),
       _aL_ = 0,
       relation =
         find_or_default
          (function(param){
            if(0 !== param[0]) return 0;
            var rels = param[1];
            return [0, rels];
           },
           _aL_,
           params$0);
      if(relation)
       var
        arc = arc_of_relation_params(0, relation, params$0),
        link = [0, context, arc, target];
      else{
       var
        _aM_ = 0,
        rev =
          find_or_default
           (function(param){
             if(2 !== param[0]) return 0;
             var rels = param[1];
             return [0, rels];
            },
            _aM_,
            params$0);
       if(rev)
        var
         arc$0 = arc_of_relation_params(_al_, rev, params$0),
         _aN_ = [0, target, arc$0, context];
       else
        var
         arc$1 = arc_of_relation_params(0, 0, params$0),
         _aN_ = [0, context, arc$1, target];
       var link = _aN_;
      }
      var list$0 = [0, link, list];
      if(c_opt){
       var start$0 = c_opt[1], list = list$0, start = start$0;
       continue;
      }
      var _aO_ = list$0;
     }
     else
      var _aO_ = list;
     return caml_call1(Stdlib_List[9], _aO_);
    }
   }
   function to_string$1(param){
    var target = param[3], arc = param[2], context = param[1], rels = arc[2];
    if(rels)
     var
      _aw_ = caml_call2(Stdlib_List[19], string_of_rel, rels),
      _ax_ = caml_call2(Stdlib_String[6], cst$14, _aw_),
      _av_ = 0,
      _ay_ = arc[1] ? cst_rev : cst_rel,
      attrs = [0, caml_call3(Stdlib_Printf[4], _am_, _ay_, _ax_), _av_];
    else
     var attrs = 0;
    var match = arc[3];
    if(match)
     var
      s = match[1],
      attrs$0 = [0, caml_call2(Stdlib[28], cst_hreflang$0, s), attrs];
    else
     var attrs$0 = attrs;
    var match$0 = arc[4];
    if(match$0)
     var
      s$0 = match$0[1],
      attrs$1 = [0, caml_call2(Stdlib_Printf[4], _an_, s$0), attrs$0];
    else
     var attrs$1 = attrs$0;
    var match$1 = arc[5];
    if(match$1)
     var
      s$1 = match$1[1],
      attrs$2 = [0, caml_call2(Stdlib_Printf[4], _ao_, s$1), attrs$1];
    else
     var attrs$2 = attrs$1;
    var _az_ = arc[6];
    if(_az_)
     var
      match$2 = _az_[1],
      value = match$2[3],
      language = match$2[2],
      charset = match$2[1],
      attrs$3 =
        [0,
         caml_call4(Stdlib_Printf[4], _ap_, charset, language, value),
         attrs$2];
    else
     var attrs$3 = attrs$2;
    var _aA_ = arc[7];
    if(_aA_)
     var
      match$3 = _aA_[1],
      sub = match$3[2],
      typ = match$3[1],
      attrs$4 = [0, caml_call3(Stdlib_Printf[4], _aq_, typ, sub), attrs$3];
    else
     var attrs$4 = attrs$3;
    var _aB_ = arc[8];
    function _aC_(param){
     var v = param[2], k = param[1];
     return caml_call3(Stdlib_Printf[4], _ar_, k, v);
    }
    var
     _aD_ = caml_call2(Stdlib_List[19], _aC_, _aB_),
     attrs$5 = caml_call2(Stdlib[37], _aD_, attrs$4),
     _aE_ = arc[9];
    function _aF_(param){
     var
      match = param[2],
      value = match[3],
      language = match[2],
      charset = match[1],
      k = param[1];
     return caml_call5(Stdlib_Printf[4], _as_, k, charset, language, value);
    }
    var
     _aG_ = caml_call2(Stdlib_List[19], _aF_, _aE_),
     attrs$6 = caml_call2(Stdlib[37], _aG_, attrs$5);
    if(runtime.caml_equal(context, caml_call1(Uri[7], cst$15)))
     var attrs$7 = attrs$6;
    else
     var
      _aI_ = caml_call2(Uri[8], 0, context),
      attrs$7 = [0, caml_call2(Stdlib_Printf[4], _at_, _aI_), attrs$6];
    var
     _aH_ = caml_call2(Stdlib_String[6], cst$16, attrs$7),
     _aJ_ = caml_call2(Uri[8], 0, target);
    return caml_call3(Stdlib_Printf[4], _au_, _aJ_, _aH_);
   }
   var
    Cohttp_Link =
      [0,
       Rel,
       Language,
       Charset,
       Ext,
       [0, empty],
       t_of_sexp$4,
       sexp_of_t$3,
       empty$0,
       of_string$1,
       to_string$1];
   runtime.caml_register_global(387, Cohttp_Link, "Cohttp__Link");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Transfer
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Chunk = "Chunk",
    cst_Chunked = "Chunked",
    cst_Done = "Done",
    cst_Final_chunk = "Final_chunk",
    cst_Fixed = "Fixed",
    cst_Unknown = "Unknown",
    cst_chunk = "chunk",
    cst_chunked$0 = "chunked",
    cst_done = "done",
    cst_final_chunk = "final_chunk",
    cst_fixed = "fixed",
    cst_unknown$0 = "unknown",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_003 = "cohttp/src/transfer.ml.encoding",
    error_source_014 = "cohttp/src/transfer.ml.chunk",
    Stdlib_Printf = global_data.Stdlib__Printf,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    _h_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_unknown = cst_unknown$0,
    cst_chunked = cst_chunked$0,
    _g_ = [0, [11, "fixed[", [7, 0, 0, 0, [12, 93, 0]]], "fixed[%Ld]"],
    _d_ = [0, cst_Done],
    _e_ = [0, cst_Chunk],
    _f_ = [0, cst_Final_chunk],
    _a_ = [0, cst_Unknown],
    _b_ = [0, cst_Chunked],
    _c_ = [0, cst_Fixed];
   function encoding_of_sexp(sexp_005){
    a:
    {
     if(0 === sexp_005[0]){
      var _l_ = sexp_005[1];
      b:
      if(caml_string_notequal(_l_, cst_Chunked)){
       c:
       if(caml_string_notequal(_l_, cst_Fixed)){
        if(caml_string_notequal(_l_, cst_Unknown)){
         if(! caml_string_notequal(_l_, cst_chunked$0)) break b;
         if(! caml_string_notequal(_l_, cst_fixed)) break c;
         if(caml_string_notequal(_l_, cst_unknown$0)) break a;
        }
        return 1;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[5], error_source_003, sexp_005);
      }
      return 0;
     }
     var _m_ = sexp_005[1];
     if(! _m_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_003, sexp_005);
     var _n_ = _m_[1];
     if(0 !== _n_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_003, sexp_005);
     var tag_006 = _n_[1];
     b:
     if(caml_string_notequal(tag_006, cst_Chunked)){
      c:
      if(caml_string_notequal(tag_006, cst_Fixed)){
       if(caml_string_notequal(tag_006, cst_Unknown)){
        if(! caml_string_notequal(tag_006, cst_chunked$0)) break b;
        if(! caml_string_notequal(tag_006, cst_fixed)) break c;
        if(caml_string_notequal(tag_006, cst_unknown$0)) break a;
       }
       return caml_call2
               (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
      }
      var sexp_args_007 = _m_[2];
      if(sexp_args_007 && ! sexp_args_007[2]){
       var
        arg0_008 = sexp_args_007[1],
        res0_009 = caml_call1(Sexplib0_Sexp_conv[37], arg0_008);
       return [0, res0_009];
      }
      return caml_call3
              (Sexplib0_Sexp_conv_error[4],
               error_source_003,
               tag_006,
               sexp_005);
     }
     return caml_call2
             (Sexplib0_Sexp_conv_error[3], error_source_003, sexp_005);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_003, sexp_005);
   }
   function sexp_of_encoding(param){
    if(typeof param === "number") return param ? _a_ : _b_;
    var
     arg0_010 = param[1],
     res0_011 = caml_call1(Sexplib0_Sexp_conv[13], arg0_010);
    return [1, [0, _c_, [0, res0_011, 0]]];
   }
   function chunk_of_sexp(sexp_016){
    a:
    {
     if(0 === sexp_016[0]){
      var _i_ = sexp_016[1];
      b:
      if(caml_string_notequal(_i_, cst_Chunk)){
       c:
       if(caml_string_notequal(_i_, cst_Done)){
        if(caml_string_notequal(_i_, cst_Final_chunk)){
         if(! caml_string_notequal(_i_, cst_chunk)) break b;
         if(! caml_string_notequal(_i_, cst_done)) break c;
         if(caml_string_notequal(_i_, cst_final_chunk)) break a;
        }
        return caml_call2
                (Sexplib0_Sexp_conv_error[5], error_source_014, sexp_016);
       }
       return 0;
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[5], error_source_014, sexp_016);
     }
     var _j_ = sexp_016[1];
     if(! _j_)
      return caml_call2
              (Sexplib0_Sexp_conv_error[7], error_source_014, sexp_016);
     var _k_ = _j_[1];
     if(0 !== _k_[0])
      return caml_call2
              (Sexplib0_Sexp_conv_error[6], error_source_014, sexp_016);
     var tag_017 = _k_[1];
     b:
     if(caml_string_notequal(tag_017, cst_Chunk)){
      c:
      if(caml_string_notequal(tag_017, cst_Done)){
       if(caml_string_notequal(tag_017, cst_Final_chunk)){
        if(! caml_string_notequal(tag_017, cst_chunk)) break b;
        if(! caml_string_notequal(tag_017, cst_done)) break c;
        if(caml_string_notequal(tag_017, cst_final_chunk)) break a;
       }
       var sexp_args_023 = _j_[2];
       if(sexp_args_023 && ! sexp_args_023[2]){
        var
         arg0_024 = sexp_args_023[1],
         res0_025 = caml_call1(Sexplib0_Sexp_conv[31], arg0_024);
        return [1, res0_025];
       }
       return caml_call3
               (Sexplib0_Sexp_conv_error[4],
                error_source_014,
                tag_017,
                sexp_016);
      }
      return caml_call2
              (Sexplib0_Sexp_conv_error[3], error_source_014, sexp_016);
     }
     var sexp_args_018 = _j_[2];
     if(sexp_args_018 && ! sexp_args_018[2]){
      var
       arg0_019 = sexp_args_018[1],
       res0_020 = caml_call1(Sexplib0_Sexp_conv[31], arg0_019);
      return [0, res0_020];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[4],
              error_source_014,
              tag_017,
              sexp_016);
    }
    return caml_call2(Sexplib0_Sexp_conv_error[8], error_source_014, sexp_016);
   }
   function sexp_of_chunk(param){
    if(typeof param === "number") return _d_;
    if(0 === param[0]){
     var
      arg0_026 = param[1],
      res0_027 = caml_call1(Sexplib0_Sexp_conv[7], arg0_026);
     return [1, [0, _e_, [0, res0_027, 0]]];
    }
    var
     arg0_028 = param[1],
     res0_029 = caml_call1(Sexplib0_Sexp_conv[7], arg0_028);
    return [1, [0, _f_, [0, res0_029, 0]]];
   }
   function string_of_encoding(param){
    if(typeof param === "number") return param ? cst_unknown : cst_chunked;
    var i = param[1];
    return caml_call2(Stdlib_Printf[4], _g_, i);
   }
   function has_body(param){
    if(typeof param === "number"){if(param) return 785140586;}
    else if(! runtime.caml_notequal(param[1], _h_)) return 17505;
    return 4448519;
   }
   var
    Cohttp_Transfer =
      [0,
       sexp_of_encoding,
       encoding_of_sexp,
       sexp_of_chunk,
       chunk_of_sexp,
       string_of_encoding,
       has_body];
   runtime.caml_register_global(39, Cohttp_Transfer, "Cohttp__Transfer");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Header
//# unitInfo: Requires: Cohttp__Accept, Cohttp__Auth, Cohttp__Conf, Cohttp__Link, Re, Re__Emacs, Sexplib0__Sexp, Sexplib0__Sexp_conv, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Char, Stdlib__Format, Stdlib__Hashtbl, Stdlib__Int64, Stdlib__List, Stdlib__Printf, Stdlib__Scanf, Stdlib__String, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$8 = "\r\n",
    cst$6 = ",",
    cst$7 = ": ",
    cst_accept$0 = "accept",
    cst_accept_charset$0 = "accept-charset",
    cst_accept_encoding$0 = "accept-encoding",
    cst_accept_language$0 = "accept-language",
    cst_authorization$1 = "authorization",
    cst_chunked$0 = "chunked",
    cst_close = "close",
    cst_connection$1 = "connection",
    cst_content_length$1 = "content-length",
    cst_link$1 = "link",
    cst_transfer_encoding$1 = "transfer-encoding",
    cst_www_authenticate$0 = "www-authenticate",
    caml_equal = runtime.caml_equal,
    caml_lessequal = runtime.caml_lessequal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    k = "user-agent",
    cst$5 = " ",
    cst$3 = cst$6,
    cst$2 = cst$6,
    cst = cst$7,
    cst$0 = cst$8,
    cst$1 = cst$8,
    cst$4 = "[ \t]*\\([^ \t;]+\\)",
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Format = global_data.Stdlib__Format,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib = global_data.Stdlib,
    Cohttp_Link = global_data.Cohttp__Link,
    Stdlib_List = global_data.Stdlib__List,
    Uri = global_data.Uri,
    Cohttp_Auth = global_data.Cohttp__Auth,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Cohttp_Accept = global_data.Cohttp__Accept,
    Re = global_data.Re,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Scanf = global_data.Stdlib__Scanf,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Array = global_data.Stdlib__Array,
    Re_Emacs = global_data.Re__Emacs,
    Cohttp_Conf = global_data.Cohttp__Conf,
    _v_ = [0, [2, 0, 0], "%s"],
    cst_connection$0 = cst_connection$1,
    _t_ = [0, -288149133],
    _u_ = [0, -611285096],
    cst_link$0 = cst_link$1,
    cst_link = cst_link$1,
    cst_location = "location",
    _r_ = [0, "application/x-www-form-urlencoded"],
    cst_authorization$0 = cst_authorization$1,
    cst_authorization = cst_authorization$1,
    cst_www_authenticate = cst_www_authenticate$0,
    cst_chunked = cst_chunked$0,
    cst_transfer_encoding$0 = cst_transfer_encoding$1,
    cst_content_length$0 = cst_content_length$1,
    cst_transfer_encoding = cst_transfer_encoding$1,
    _q_ = [0, 1],
    cst_accept_language = cst_accept_language$0,
    _p_ = [0, 1],
    cst_accept_encoding = cst_accept_encoding$0,
    _o_ = [0, 1],
    cst_accept_charset = cst_accept_charset$0,
    _n_ = [0, 1],
    cst_accept = cst_accept$0,
    _m_ = [0, 1],
    cst_content_type = "content-type",
    _l_ = [0, 0],
    cst_connection = cst_connection$1,
    cst_content_length = cst_content_length$1,
    cst_content_range = "content-range",
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _h_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _i_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _f_ =
      [0,
       [11,
        "bytes ",
        [7, 0, 0, 0, [12, 45, [7, 0, 0, 0, [12, 47, [7, 0, 0, 0, 0]]]]]],
       "bytes %Ld-%Ld/%Ld"],
    cst_set_cookie = "set-cookie",
    _c_ = [0, [2, 0, [11, cst$7, [2, 0, 0]]], "%s: %s"],
    _b_ = [0, [2, 0, [11, cst$7, [2, 0, [11, cst$8, 0]]]], "%s: %s\r\n"],
    _d_ =
      [0,
       cst_accept$0,
       cst_accept_charset$0,
       cst_accept_encoding$0,
       cst_accept_language$0,
       "accept-ranges",
       "allow",
       "cache-control",
       cst_connection$1,
       "content-encoding",
       "content-language",
       "expect",
       "if-match",
       "if-none-match",
       cst_link$1,
       "pragma",
       "proxy-authenticate",
       "te",
       "trailer",
       cst_transfer_encoding$1,
       "upgrade",
       "vary",
       "via",
       "warning",
       cst_www_authenticate$0],
    _j_ = [0, 1],
    _s_ = [0, [11, "ocaml-cohttp/", [2, 0, 0]], "ocaml-cohttp/%s"];
   function caseless_equal(a, b){
    if(a === b) return 1;
    var
     len = caml_ml_string_length(a),
     _at_ = len === caml_ml_string_length(b) ? 1 : 0;
    if(_at_){
     var stop = [0, 0], idx = [0, 0];
     for(;;){
      if(! stop[1] && idx[1] < len){
       var
        c1 = caml_string_unsafe_get(a, idx[1]),
        c2 = caml_string_unsafe_get(b, idx[1]),
        _av_ = caml_call1(Stdlib_Char[5], c2);
       if(caml_call1(Stdlib_Char[5], c1) !== _av_) stop[1] = 1;
       idx[1]++;
       continue;
      }
      var _au_ = 1 - stop[1];
      break;
     }
    }
    else
     var _au_ = _at_;
    return _au_;
   }
   var compare = runtime.caml_compare;
   function init(param){return 0;}
   function is_empty(param){return param ? 0 : 1;}
   function init_with(k, v){return [0, [0, k, v], 0];}
   function mem(h, k){
    var param = h;
    for(;;){
     if(! param) return 0;
     var h$0 = param[2], k$0 = param[1][1];
     if(caseless_equal(k, k$0)) return 1;
     var param = h$0;
    }
   }
   function add(h, k, v){return [0, [0, k, v], h];}
   function add_list(h, l){
    function _as_(h, param){
     var v = param[2], k = param[1];
     return add(h, k, v);
    }
    return caml_call3(Stdlib_List[25], _as_, h, l);
   }
   function add_multi(h, k, l){
    function _ar_(h, v){return add(h, k, v);}
    return caml_call3(Stdlib_List[25], _ar_, h, l);
   }
   function add_opt(h_opt, k, v){
    if(! h_opt) return init_with(k, v);
    var h = h_opt[1];
    return add(h, k, v);
   }
   function add_unless_exists(h, k, v){return mem(h, k) ? h : add(h, k, v);}
   function add_opt_unless_exists(h, k, v){
    if(! h) return init_with(k, v);
    var h$0 = h[1];
    return add_unless_exists(h$0, k, v);
   }
   function get(h, k){
    var h$0 = h;
    for(;;){
     if(! h$0) return 0;
     var h$1 = h$0[2], match = h$0[1], v = match[2], k$0 = match[1];
     if(caseless_equal(k, k$0)) return [0, v];
     var h$0 = h$1;
    }
   }
   function get_multi(h, k){
    var h$0 = h, acc = 0;
    for(;;){
     if(! h$0) return acc;
     var h$1 = h$0[2], match = h$0[1], v = match[2], k$0 = match[1];
     if(caseless_equal(k, k$0))
      var acc$0 = [0, v, acc], h$0 = h$1, acc = acc$0;
     else
      var h$0 = h$1;
    }
   }
   function remove(h, k){
    function loop(seen, param){
     var seen$0 = seen, param$0 = param;
     for(;;){
      if(! param$0){
       if(seen$0) return 0;
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      }
      var x = param$0[1], h = param$0[2], k$0 = x[1];
      if(! caseless_equal(k, k$0)){
       var h$0 = param$0[2];
       return [0, x, loop(seen$0, h$0)];
      }
      var seen$0 = 1, param$0 = h;
     }
    }
    try{var _ap_ = loop(0, h); return _ap_;}
    catch(_aq_){
     var _ao_ = caml_wrap_exception(_aq_);
     if(_ao_ === Stdlib[8]) return h;
     throw caml_maybe_attach_backtrace(_ao_, 0);
    }
   }
   function replace(last, h, k, v){
    function loop(seen, param){
     var param$0 = param;
     for(;;){
      if(! param$0){
       if(seen) return 0;
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      }
      var x = param$0[1], h = param$0[2], k$0 = x[1];
      if(! caseless_equal(k, k$0)){
       var h$0 = param$0[2];
       return [0, x, loop(seen, h$0)];
      }
      if(last) return [0, [0, k$0, v], h];
      if(! seen) return [0, [0, k, v], loop(1, h)];
      var param$0 = h;
     }
    }
    try{var _am_ = loop(0, h); return _am_;}
    catch(_an_){
     var _al_ = caml_wrap_exception(_an_);
     if(_al_ === Stdlib[8]) return add(h, k, v);
     throw caml_maybe_attach_backtrace(_al_, 0);
    }
   }
   var _a_ = 0;
   function replace$0(_ai_, _aj_, _ak_){
    return replace(_a_, _ai_, _aj_, _ak_);
   }
   function update(h, k, f){
    var vorig = get(h, k), match = caml_call1(f, vorig);
    if(! match){
     if(! vorig) return h;
     var
      loop =
        function(seen, param){
         if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
         var x = param[1], h = param[2], k$0 = x[1];
         if(caseless_equal(k, k$0)) return h;
         var h$0 = param[2];
         return [0, x, loop(seen, h$0)];
        };
     try{var _ag_ = loop(0, h); return _ag_;}
     catch(_ah_){
      var _af_ = caml_wrap_exception(_ah_);
      if(_af_ === Stdlib[8]) return h;
      throw caml_maybe_attach_backtrace(_af_, 0);
     }
    }
    var s = match[1];
    if(vorig){var s$0 = vorig[1]; if(s === s$0) return h;}
    return replace(1, h, k, s);
   }
   function update_all(h, k, f){
    var vorig = get_multi(h, k), xs = caml_call1(f, vorig);
    if(! xs) return vorig ? remove(h, k) : h;
    if(caml_equal(xs, vorig)) return h;
    var h$0 = remove(h, k);
    return add_multi(h$0, k, xs);
   }
   function map(f, h){
    function _ae_(param){
     var v = param[2], k = param[1], vs = caml_call2(f, k, v);
     return [0, k, vs];
    }
    return caml_call2(Stdlib_List[19], _ae_, h);
   }
   function iter(f, h){
    function _ad_(param){
     var v = param[2], k = param[1];
     return caml_call2(f, k, v);
    }
    return caml_call2(Stdlib_List[17], _ad_, h);
   }
   function fold(f, h, init){
    function _ac_(acc, param){
     var v = param[2], k = param[1];
     return caml_call3(f, k, v, acc);
    }
    return caml_call3(Stdlib_List[25], _ac_, init, h);
   }
   function of_list(h){return caml_call1(Stdlib_List[9], h);}
   function to_list(h){return caml_call1(Stdlib_List[9], h);}
   function to_lines(h){
    var _aa_ = 0;
    function _ab_(acc, param){
     var v = param[2], k = param[1];
     return [0, caml_call3(Stdlib_Printf[4], _b_, k, v), acc];
    }
    return caml_call3(Stdlib_List[25], _ab_, _aa_, h);
   }
   function to_frames(h){
    var ___ = 0;
    function _$_(acc, param){
     var v = param[2], k = param[1];
     return [0, caml_call3(Stdlib_Printf[4], _c_, k, v), acc];
    }
    return caml_call3(Stdlib_List[25], _$_, ___, h);
   }
   function to_string(h){
    var b = caml_call1(Stdlib_Buffer[1], 128), _Y_ = to_list(h);
    function _Z_(param){
     var v = param[2], k = param[1];
     caml_call2(Stdlib_Buffer[16], b, k);
     caml_call2(Stdlib_Buffer[16], b, cst);
     caml_call2(Stdlib_Buffer[16], b, v);
     return caml_call2(Stdlib_Buffer[16], b, cst$0);
    }
    caml_call1(caml_call1(Stdlib_List[17], _Z_), _Y_);
    caml_call2(Stdlib_Buffer[16], b, cst$1);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   var
    headers_with_list_values = _d_.slice(),
    tbl =
      caml_call2(Stdlib_Hashtbl[1], 0, headers_with_list_values.length - 1);
   function _e_(h){return caml_call3(Stdlib_Hashtbl[5], tbl, h, 0);}
   caml_call1(caml_call1(Stdlib_Array[13], _e_), headers_with_list_values);
   function is_header_with_list_value(h){
    return caml_call2(Stdlib_Hashtbl[9], tbl, h);
   }
   function clean_dup(h){
    var _U_ = caml_call1(Stdlib_List[9], h), _V_ = 0;
    function _W_(acc, param){
     var v = param[2], k = param[1];
     if(caseless_equal(k, cst_set_cookie)) return [0, [0, k, v], acc];
     var to_add = [0, 0];
     function loop(param){
      if(! param){to_add[1] = 1; return 0;}
      var hs = param[2], match = param[1], v$0 = match[2], k$0 = match[1];
      if(! caseless_equal(k, k$0)) return [0, [0, k$0, v$0], loop(hs)];
      if(is_header_with_list_value(k)){
       var _X_ = caml_call2(Stdlib[28], cst$2, v);
       return [0, [0, k, caml_call2(Stdlib[28], v$0, _X_)], hs];
      }
      to_add[1] = 1;
      return hs;
     }
     var h = loop(acc);
     return to_add[1] ? [0, [0, k, v], h] : h;
    }
    return caml_call1(caml_call2(Stdlib_List[25], _W_, _V_), _U_);
   }
   function get_multi_concat(opt, h, k){
    if(opt)
     var sth = opt[1], list_value_only = sth;
    else
     var list_value_only = 0;
    if(list_value_only && ! is_header_with_list_value(k)) return get(h, k);
    var vs = get_multi(h, k);
    return vs ? [0, caml_call2(Stdlib_String[6], cst$3, vs)] : 0;
   }
   function get_content_range(headers){
    var match$0 = get(headers, cst_content_length);
    if(match$0){
     var clen = match$0[1];
     try{var _R_ = [0, runtime.caml_int64_of_string(clen)]; return _R_;}
     catch(_T_){return 0;}
    }
    var match$1 = get(headers, cst_content_range);
    if(! match$1) return 0;
    var range_s = match$1[1];
    try{
     var
      _P_ = function(start, fini, total){return [0, start, fini, total];},
      match = caml_call3(Stdlib_Scanf[4], range_s, _f_, _P_),
      total = match[3],
      fini = match[2],
      start = match[1],
      _Q_ = [0, [0, start, fini, total]],
      match$2 = _Q_;
    }
    catch(_S_){
     var _O_ = caml_wrap_exception(_S_);
     if(_O_[1] !== Stdlib_Scanf[2]) throw caml_maybe_attach_backtrace(_O_, 0);
     var match$2 = 0;
    }
    if(! match$2) return 0;
    var
     match$3 = match$2[1],
     total$0 = match$3[3],
     fini$0 = match$3[2],
     start$0 = match$3[1];
    if
     (runtime.caml_lessthan(fini$0, total$0)
      &&
       caml_lessequal(start$0, total$0)
       && caml_lessequal(_g_, start$0) && caml_lessequal(_h_, total$0)){
     var
      num_bytes_to_read =
        runtime.caml_int64_add(runtime.caml_int64_sub(fini$0, start$0), _i_);
     return [0, num_bytes_to_read];
    }
    return 0;
   }
   function get_connection_close(headers){
    var match = get(headers, cst_connection);
    if(match && ! caml_string_notequal(match[1], cst_close)) return 1;
    return 0;
   }
   var
    re = caml_call2(Re_Emacs[3], _j_, cst$4),
    _k_ = caml_call1(Re[29], [0, Re[43], [0, re, 0]]),
    media_type_re = caml_call1(Re[2], _k_);
   function get_media_type(headers){
    var match$0 = get(headers, cst_content_type);
    if(! match$0) return 0;
    var s = match$0[1];
    try{
     var
      subs = caml_call4(Re[5], _l_, 0, media_type_re, s),
      match = caml_call2(Re[1][3], subs, 1),
      stop = match[2],
      start = match[1],
      _M_ = [0, caml_call3(Stdlib_String[15], s, start, stop - start | 0)];
     return _M_;
    }
    catch(_N_){
     var _L_ = caml_wrap_exception(_N_);
     if(_L_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_L_, 0);
    }
   }
   function get_acceptable_media_ranges(headers){
    var _K_ = get_multi_concat(_m_, headers, cst_accept);
    return caml_call1(Cohttp_Accept[16], _K_);
   }
   function get_acceptable_charsets(headers){
    var _J_ = get_multi_concat(_n_, headers, cst_accept_charset);
    return caml_call1(Cohttp_Accept[17], _J_);
   }
   function get_acceptable_encodings(headers){
    var _I_ = get_multi_concat(_o_, headers, cst_accept_encoding);
    return caml_call1(Cohttp_Accept[18], _I_);
   }
   function get_acceptable_languages(headers){
    var _H_ = get_multi_concat(_p_, headers, cst_accept_language);
    return caml_call1(Cohttp_Accept[19], _H_);
   }
   function get_transfer_encoding(headers){
    var match = get_multi_concat(_q_, headers, cst_transfer_encoding);
    if(match && ! caml_string_notequal(match[1], cst_chunked$0)) return 0;
    var match$0 = get_content_range(headers);
    if(! match$0) return 1;
    var len = match$0[1];
    return [0, len];
   }
   function add_transfer_encoding(headers, enc){
    var match = get_transfer_encoding(headers);
    if(typeof match === "number" && match){
     if(typeof enc === "number")
      return enc
              ? headers
              : add(headers, cst_transfer_encoding$0, cst_chunked);
     var len = enc[1];
     return add
             (headers,
              cst_content_length$0,
              caml_call1(Stdlib_Int64[14], len));
    }
    return headers;
   }
   function add_authorization_req(headers, challenge){
    return add
            (headers,
             cst_www_authenticate,
             caml_call1(Cohttp_Auth[9], challenge));
   }
   function add_authorization(headers, cred){
    return add(headers, cst_authorization, caml_call1(Cohttp_Auth[7], cred));
   }
   function get_authorization(headers){
    var match = get(headers, cst_authorization$0);
    if(! match) return 0;
    var v = match[1];
    return [0, caml_call1(Cohttp_Auth[8], v)];
   }
   function is_form(headers){return caml_equal(get_media_type(headers), _r_);}
   function get_location(headers){
    var match = get(headers, cst_location);
    if(! match) return 0;
    var u = match[1];
    return [0, caml_call1(Uri[7], u)];
   }
   function get_links(headers){
    var _C_ = get_multi(headers, cst_link), _D_ = 0;
    function _E_(list, link_s){
     var _G_ = caml_call1(Cohttp_Link[9], link_s);
     return caml_call2(Stdlib_List[12], _G_, list);
    }
    var _F_ = caml_call3(Stdlib_List[25], _E_, _D_, _C_);
    return caml_call1(Stdlib_List[9], _F_);
   }
   function add_links(headers, links){
    return add_multi
            (headers,
             cst_link$0,
             caml_call2(Stdlib_List[19], Cohttp_Link[10], links));
   }
   var user_agent = caml_call2(Stdlib_Printf[4], _s_, Cohttp_Conf[1]);
   function prepend_user_agent(headers, user_agent){
    var match = get(headers, k);
    if(! match) return add(headers, k, user_agent);
    var ua = match[1], _B_ = caml_call2(Stdlib[28], cst$5, ua);
    return replace$0(headers, k, caml_call2(Stdlib[28], user_agent, _B_));
   }
   function connection(h){
    var match = get(h, cst_connection$0);
    if(! match) return 0;
    var v = match[1];
    return caml_string_equal(v, "keep-alive")
            ? _t_
            : caml_string_equal(v, cst_close) ? _u_ : [0, [0, 785140586, v]];
   }
   function sexp_of_t(t){
    var
     _z_ = to_list(t),
     _A_ =
       caml_call2
        (Sexplib0_Sexp_conv[18], Sexplib0_Sexp_conv[7], Sexplib0_Sexp_conv[7]);
    return caml_call2(Sexplib0_Sexp_conv[20], _A_, _z_);
   }
   function t_of_sexp(s){
    var
     _y_ =
       caml_call2
        (Sexplib0_Sexp_conv[42],
         Sexplib0_Sexp_conv[31],
         Sexplib0_Sexp_conv[31]);
    return of_list(caml_call2(Sexplib0_Sexp_conv[44], _y_, s));
   }
   function pp_hum(ppf, h){
    var _w_ = sexp_of_t(h), _x_ = caml_call2(Sexplib0_Sexp[13], 0, _w_);
    return caml_call3(Stdlib_Format[129], ppf, _v_, _x_);
   }
   var
    Cohttp_Header =
      [0,
       t_of_sexp,
       sexp_of_t,
       init,
       is_empty,
       of_list,
       to_list,
       init_with,
       add,
       add_list,
       add_multi,
       add_opt,
       add_unless_exists,
       add_opt_unless_exists,
       remove,
       replace$0,
       mem,
       compare,
       get,
       get_multi,
       get_multi_concat,
       update,
       update_all,
       iter,
       map,
       fold,
       to_lines,
       to_frames,
       to_string,
       clean_dup,
       get_content_range,
       get_media_type,
       get_connection_close,
       get_acceptable_media_ranges,
       get_acceptable_charsets,
       get_acceptable_encodings,
       get_acceptable_languages,
       get_transfer_encoding,
       add_transfer_encoding,
       add_authorization,
       get_authorization,
       add_authorization_req,
       is_form,
       get_location,
       add_links,
       get_links,
       user_agent,
       prepend_user_agent,
       connection,
       pp_hum];
   runtime.caml_register_global(71, Cohttp_Header, "Cohttp__Header");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__S
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Cohttp_S = [0];
   runtime.caml_register_global(0, Cohttp_S, "Cohttp__S");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Transfer_io
//# unitInfo: Requires: Stdlib, Stdlib__Int64, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst$0 = "\r\n",
    caml_equal = runtime.caml_equal,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_String = global_data.Stdlib__String,
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _f_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = [0, [4, 6, 0, 0, [11, cst$0, 0]], "%x\r\n"],
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_0x = "0x",
    Cohttp_Transfer_io =
      [0,
       function(IO){
        function junk_until_empty_line(ic){
         function _Q_(param){
          if(param && caml_string_notequal(param[1], cst$1))
           return junk_until_empty_line(ic);
          return caml_call1(IO[2], 0);
         }
         var _R_ = caml_call1(IO[3], ic);
         return caml_call2(IO[1], _R_, _Q_);
        }
        function write(oc, buf){
         var len = caml_ml_string_length(buf);
         if(0 === len) return caml_call1(IO[2], 0);
         function _L_(param){
          function _O_(param){return caml_call2(IO[5], oc, cst);}
          var _P_ = caml_call2(IO[5], oc, buf);
          return caml_call2(IO[1], _P_, _O_);
         }
         var
          _M_ = caml_call2(Stdlib_Printf[4], _d_, len),
          _N_ = caml_call2(IO[5], oc, _M_);
         return caml_call2(IO[1], _N_, _L_);
        }
        var write$0 = IO[5];
        function read(ic, param){
         function _J_(buf){
          return runtime.caml_string_equal(buf, cst$1)
                  ? caml_call1(IO[2], 0)
                  : caml_call1(IO[2], [0, buf]);
         }
         var _K_ = caml_call2(IO[4], ic, 4096);
         return caml_call2(IO[1], _K_, _J_);
        }
        var write$1 = IO[5];
        function write_and_flush(fn, oc, buf){
         function _H_(param){return caml_call1(IO[6], oc);}
         var _I_ = caml_call2(fn, oc, buf);
         return caml_call2(IO[1], _I_, _H_);
        }
        function make_reader(param){
         if(typeof param !== "number"){
          var len = param[1], remaining$0 = [0, len];
          return function(ic, _F_){
           var len = remaining$0[1];
           if(! caml_notequal(len, _e_)) return caml_call1(IO[2], 0);
           var
            max_read_len = caml_int64_of_int32(32768),
            read_len =
              caml_int64_to_int32(caml_call2(Stdlib[16], len, max_read_len));
           function _D_(buf){
            if(! caml_string_notequal(buf, cst$1))
             return caml_call1(IO[2], 0);
            remaining$0[1] =
             caml_int64_sub
              (remaining$0[1],
               caml_int64_of_int32(caml_ml_string_length(buf)));
            var
             _G_ = caml_notequal(remaining$0[1], _f_) ? [0, buf] : [1, buf];
            return caml_call1(IO[2], _G_);
           }
           var _E_ = caml_call2(IO[4], ic, read_len);
           return caml_call2(IO[1], _E_, _D_);};
         }
         if(param) return read;
         var remaining = [0, _g_];
         return function(ic, _r_){
          function read_chunk_fragment(param){
           function _A_(chunk){
            var
             remaining$0 = remaining[1],
             read_len = caml_int64_of_int32(caml_ml_string_length(chunk));
            remaining[1] = caml_int64_sub(remaining$0, read_len);
            function _B_(param){return caml_call1(IO[2], chunk);}
            var
             _C_ =
               caml_equal(remaining[1], _a_)
                ? caml_call1(IO[3], ic)
                : caml_call1(IO[2], 0);
            return caml_call2(IO[1], _C_, _B_);
           }
           var
            size = remaining[1],
            max_read_len = caml_int64_of_int32(32768),
            len = caml_call2(Stdlib[16], size, max_read_len),
            _z_ = caml_call2(IO[4], ic, caml_int64_to_int32(len));
           return caml_call2(IO[1], _z_, _A_);
          }
          if(caml_equal(remaining[1], _b_)){
           var
            _n_ =
              function(param){
               if(! param) return caml_call1(IO[2], 0);
               var chunk_size_hex = param[1];
               try{
                var
                 _t_ = caml_call2(Stdlib_String[35], chunk_size_hex, 59),
                 _u_ = caml_call3(Stdlib_String[15], chunk_size_hex, 0, _t_),
                 hex = _u_;
               }
               catch(_y_){var hex = chunk_size_hex;}
               try{
                var
                 _s_ =
                   [0,
                    runtime.caml_int64_of_string
                     (caml_call2(Stdlib[28], cst_0x, hex))],
                 match = _s_;
               }
               catch(_x_){var match = 0;}
               if(! match) return caml_call1(IO[2], 0);
               var count = match[1];
               if(! caml_notequal(count, _c_))
                return junk_until_empty_line(ic);
               remaining[1] = count;
               function _v_(buf){
                return caml_string_notequal(buf, cst$1)
                        ? caml_call1(IO[2], [0, buf])
                        : caml_call1(IO[2], 0);
               }
               var _w_ = read_chunk_fragment(0);
               return caml_call2(IO[1], _w_, _v_);
              },
            _o_ = caml_call1(IO[3], ic);
           return caml_call2(IO[1], _o_, _n_);
          }
          function _p_(buf){
           return caml_string_notequal(buf, cst$1)
                   ? caml_call1(IO[2], [0, buf])
                   : caml_call1(IO[2], 0);
          }
          var _q_ = read_chunk_fragment(0);
          return caml_call2(IO[1], _q_, _p_);};
        }
        function make_writer(opt, mode){
         if(opt) var sth = opt[1], flush = sth; else var flush = 0;
         if(! flush)
          return typeof mode === "number" ? mode ? write$1 : write : write$0;
         var
          writer =
            typeof mode === "number"
             ? mode
               ? function
                (_h_, _i_){
                 return write_and_flush(write$1, _h_, _i_);
                }
               : function(_j_, _k_){return write_and_flush(write, _j_, _k_);}
             : function(_l_, _m_){return write_and_flush(write$0, _l_, _m_);};
         return function(io, s){
          return 0 === caml_ml_string_length(s)
                  ? caml_call1(IO[2], 0)
                  : writer(io, s);};
        }
        function read$0(reader){return caml_call1(reader, 0);}
        function write$2(writer, buf){return caml_call1(writer, buf);}
        return [0, make_reader, make_writer, read$0, write$2];
       }];
   runtime.caml_register_global(17, Cohttp_Transfer_io, "Cohttp__Transfer_io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__String_io
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String;
   function open_in(str){
    return [0, str, 0, runtime.caml_ml_string_length(str)];
   }
   function return$0(a){return a;}
   function symbol_bind(_d_, _c_){return caml_call1(_c_, _d_);}
   function read_rest(x){
    var s = caml_call3(Stdlib_String[15], x[1], x[2], x[3] - x[2] | 0);
    x[2] = x[3];
    return s;
   }
   function read_line(x){
    if(x[2] >= x[3]) return 0;
    var start = x[2];
    try{
     for(;;){
      if(10 === caml_string_get(x[1], x[2])) break;
      x[2] = x[2] + 1 | 0;
     }
     a:
     {
      if(0 < x[2] && 13 === caml_string_get(x[1], x[2] - 1 | 0)){var l = (x[2] - start | 0) - 1 | 0; break a;}
      var l = x[2] - start | 0;
     }
     var s = caml_call3(Stdlib_String[15], x[1], start, l);
     x[2] = x[2] + 1 | 0;
     var _a_ = [0, s];
     return _a_;
    }
    catch(_b_){return [0, read_rest(x)];}
   }
   function read(x, n){
    if((x[3] - x[2] | 0) < n)
     var match = 0;
    else{
     var s = caml_call3(Stdlib_String[15], x[1], x[2], n);
     x[2] = x[2] + n | 0;
     var match = [0, s];
    }
    if(match){var x$0 = match[1]; return x$0;}
    if(x[3] <= x[2]) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
    return read_rest(x);
   }
   function write(x, s){caml_call2(Stdlib_Buffer[16], x, s); return 0;}
   function flush(x){return 0;}
   var
    Cohttp_String_io =
      [0, open_in, [0, symbol_bind, return$0, read_line, read, write, flush]];
   runtime.caml_register_global(3, Cohttp_String_io, "Cohttp__String_io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Header_io
//# unitInfo: Requires: Cohttp__Header, Cohttp__Transfer_io, Stdlib__String, Stringext
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Cohttp_Header = global_data.Cohttp__Header,
    Cohttp_Transfer_io = global_data.Cohttp__Transfer_io,
    Stringext = global_data.Stringext,
    Stdlib_String = global_data.Stdlib__String,
    _a_ = [0, 2],
    Cohttp_Header_io =
      [0,
       function(IO){
        caml_call1(Cohttp_Transfer_io[1], IO);
        function parse(ic){
         function parse_headers(headers){
          function _c_(param){
           if(param){
            var line = param[1];
            if(runtime.caml_string_notequal(line, "")){
             var x = caml_call3(Stringext[3], _a_, line, 58);
             a:
             {
              if(x){
               var _e_ = x[2];
               if(_e_ && ! _e_[2]){
                var
                 y = _e_[1],
                 x$0 = x[1],
                 match = [0, x$0, [0, caml_call1(Stdlib_String[23], y), 0]];
                break a;
               }
              }
              var match = x;
             }
             if(match){
              var _f_ = match[2];
              if(_f_ && ! _f_[2]){
               var tl = _f_[1], hd = match[1];
               return parse_headers
                       (caml_call3(Cohttp_Header[8], headers, hd, tl));
              }
             }
             return caml_call1(IO[2], headers);
            }
           }
           return caml_call1(IO[2], headers);
          }
          var _d_ = caml_call1(IO[3], ic);
          return caml_call2(IO[1], _d_, _c_);
         }
         return parse_headers(caml_call1(Cohttp_Header[3], 0));
        }
        function write(headers, oc){
         var _b_ = caml_call1(Cohttp_Header[28], headers);
         return caml_call2(IO[5], oc, _b_);
        }
        return [0, parse, write];
       }];
   runtime.caml_register_global(6, Cohttp_Header_io, "Cohttp__Header_io");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Response
//# unitInfo: Requires: Cohttp__Code, Cohttp__Header, Cohttp__Header_io, Cohttp__Transfer, Cohttp__Transfer_io, Sexplib0__Sexp, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record, Stdlib, Stdlib__Format, Stdlib__Printf, Stringext
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_encoding$0 = "encoding",
    cst_flush$0 = "flush",
    cst_headers$0 = "headers",
    cst_status$0 = "status",
    cst_version$0 = "version",
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    error_source_002 = "cohttp/src/response.ml.t",
    Cohttp_Header = global_data.Cohttp__Header,
    Cohttp_Code = global_data.Cohttp__Code,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Cohttp_Transfer = global_data.Cohttp__Transfer,
    Stringext = global_data.Stringext,
    Stdlib = global_data.Stdlib,
    Cohttp_Header_io = global_data.Cohttp__Header_io,
    Cohttp_Transfer_io = global_data.Cohttp__Transfer_io,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Format = global_data.Stdlib__Format,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    cst_0 = "0\r\n\r\n",
    _g_ = [0, [2, 0, [12, 32, [2, 0, [11, "\r\n", 0]]]], "%s %s\r\n"],
    cst_Malformed_response_version = "Malformed response version: ",
    cst_Malformed_response_first_l = "Malformed response first line: ",
    _f_ = [0, [2, 0, 0], "%s"],
    _a_ = [0, cst_flush$0],
    _b_ = [0, cst_status$0],
    _c_ = [0, cst_version$0],
    _d_ = [0, cst_headers$0],
    _e_ = [0, cst_encoding$0],
    cst_flush = cst_flush$0,
    cst_status = cst_status$0,
    cst_version = cst_version$0,
    cst_headers = cst_headers$0,
    cst_encoding = cst_encoding$0;
   function t_of_sexp(x_003){
    function _G_(param){
     var
      _J_ = param[2],
      _K_ = _J_[2],
      _L_ = _K_[2],
      flush = _L_[2][1],
      status = _L_[1],
      version = _K_[1],
      headers = _J_[1],
      encoding = param[1];
     return [0, encoding, headers, version, status, flush];
    }
    var _H_ = 0;
    function _I_(param){
     return caml_string_notequal(param, cst_encoding$0)
             ? caml_string_notequal
                (param, cst_flush$0)
               ? caml_string_notequal
                  (param, cst_headers$0)
                 ? caml_string_notequal
                    (param, cst_status$0)
                   ? caml_string_notequal(param, cst_version$0) ? -1 : 2
                   : 3
                 : 1
               : 4
             : 0;
    }
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0,
              cst_encoding,
              1,
              Cohttp_Transfer[2],
              [0,
               cst_headers,
               1,
               Cohttp_Header[1],
               [0,
                cst_version,
                1,
                Cohttp_Code[2],
                [0,
                 cst_status,
                 1,
                 Cohttp_Code[26],
                 [0, cst_flush, 1, Sexplib0_Sexp_conv[30], 0]]]]],
             _I_,
             _H_,
             _G_,
             x_003);
   }
   function sexp_of_t(param){
    var
     flush_013 = param[5],
     status_011 = param[4],
     version_009 = param[3],
     headers_007 = param[2],
     encoding_005 = param[1],
     arg_014 = caml_call1(Sexplib0_Sexp_conv[6], flush_013),
     bnds_004 = [0, [1, [0, _a_, [0, arg_014, 0]]], 0],
     arg_012 = caml_call1(Cohttp_Code[25], status_011),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_012, 0]]], bnds_004],
     arg_010 = caml_call1(Cohttp_Code[1], version_009),
     bnds_004$1 = [0, [1, [0, _c_, [0, arg_010, 0]]], bnds_004$0],
     arg_008 = caml_call1(Cohttp_Header[2], headers_007),
     bnds_004$2 = [0, [1, [0, _d_, [0, arg_008, 0]]], bnds_004$1],
     arg_006 = caml_call1(Cohttp_Transfer[1], encoding_005),
     bnds_004$3 = [0, [1, [0, _e_, [0, arg_006, 0]]], bnds_004$2];
    return [1, bnds_004$3];
   }
   function compare(x, y){
    var i = caml_call2(Cohttp_Header[17], x[2], y[2]);
    if(0 !== i) return i;
    var headers = caml_call1(Cohttp_Header[3], 0);
    return runtime.caml_compare
            ([0, x[1], headers, x[3], x[4], x[5]],
             [0, y[1], headers, y[3], y[4], y[5]]);
   }
   function headers(t){return t[2];}
   function encoding(t){return t[1];}
   function version(t){return t[3];}
   function status(t){return t[4];}
   function flush(t){return t[5];}
   function make(opt, _F_, _E_, _D_, _C_, param){
    if(opt) var sth = opt[1], version = sth; else var version = 540315116;
    if(_F_) var sth$0 = _F_[1], status = sth$0; else var status = 17692;
    if(_E_) var sth$1 = _E_[1], flush = sth$1; else var flush = 0;
    if(_D_) var sth$2 = _D_[1], encoding = sth$2; else var encoding = 0;
    if(_C_)
     var sth$3 = _C_[1], headers = sth$3;
    else
     var headers = caml_call1(Cohttp_Header[3], 0);
    var enc = caml_call1(Cohttp_Header[37], headers);
    a:
    {
     if(typeof enc === "number" && enc){var encoding$0 = encoding; break a;}
     var encoding$0 = enc;
    }
    return [0, encoding$0, headers, version, status, flush];
   }
   function pp_hum(ppf, r){
    var _A_ = sexp_of_t(r), _B_ = caml_call2(Sexplib0_Sexp[13], 0, _A_);
    return caml_call3(Stdlib_Format[129], ppf, _f_, _B_);
   }
   var
    Cohttp_Response =
      [0,
       t_of_sexp,
       sexp_of_t,
       encoding,
       headers,
       version,
       status,
       flush,
       compare,
       make,
       pp_hum,
       function(IO){
        var
         Header_IO = caml_call1(Cohttp_Header_io[1], IO),
         Transfer_IO = caml_call1(Cohttp_Transfer_io[1], IO);
        function read(ic){
         function _t_(r){
          if(typeof r === "number") return caml_call1(IO[2], 3456156);
          if(144245463 <= r[1]) return caml_call1(IO[2], r);
          var match = r[2], status = match[2], version = match[1];
          function _y_(headers){
           var encoding = caml_call1(Cohttp_Header[37], headers);
           return caml_call1
                   (IO[2],
                    [0, 17724, [0, encoding, headers, version, status, 0]]);
          }
          var _z_ = caml_call1(Header_IO[1], ic);
          return caml_call2(IO[1], _z_, _y_);
         }
         function _q_(param){
          if(! param) return caml_call1(IO[2], 3456156);
          var
           response_line = param[1],
           match = caml_call3(Stringext[3], 0, response_line, 32);
          if(match){
           var match$0 = match[2];
           if(match$0){
            var
             code_raw = match$0[1],
             version_raw = match[1],
             v = caml_call1(Cohttp_Code[29], version_raw);
            if(typeof v === "number"){
             var
              _u_ = runtime.caml_int_of_string(code_raw),
              _v_ = [0, 17724, [0, v, caml_call1(Cohttp_Code[34], _u_)]];
             return caml_call1(IO[2], _v_);
            }
            var
             _w_ =
               [0,
                144245463,
                caml_call2
                 (Stdlib[28], cst_Malformed_response_version, version_raw)];
            return caml_call1(IO[2], _w_);
           }
          }
          var
           _x_ =
             [0,
              144245463,
              caml_call2
               (Stdlib[28], cst_Malformed_response_first_l, response_line)];
          return caml_call1(IO[2], _x_);
         }
         var _r_ = caml_call1(IO[3], ic), _s_ = caml_call2(IO[1], _r_, _q_);
         return caml_call2(IO[1], _s_, _t_);
        }
        function allowed_body(response){
         var match = response[4];
         a:
         if(typeof match === "number"){
          if(-498198474 <= match){
           if
            (-387970219 !== match
             && 192584839 !== match && 973294248 !== match)
            break a;
          }
          else if
           (-1021676630 !== match
            && -840540685 !== match && -527633381 > match)
           break a;
          return 0;
         }
         return 1;
        }
        function has_body(response){
         return allowed_body(response)
                 ? caml_call1(Cohttp_Transfer[6], response[1])
                 : 17505;
        }
        function make_body_reader(param, ic){
         var encoding = param[1];
         return caml_call2(Transfer_IO[1], encoding, ic);
        }
        var read_body_chunk = Transfer_IO[3];
        function write_header(res, oc){
         function _l_(param){
          var
           headers =
             allowed_body(res)
              ? caml_call2(Cohttp_Header[38], res[2], res[1])
              : res[2];
          return caml_call2(Header_IO[2], headers, oc);
         }
         var
          _m_ = caml_call1(Cohttp_Code[36], res[4]),
          _n_ = caml_call1(Cohttp_Code[28], res[3]),
          _o_ = caml_call3(Stdlib_Printf[4], _g_, _n_, _m_),
          _p_ = caml_call2(IO[5], oc, _o_);
         return caml_call2(IO[1], _p_, _l_);
        }
        function make_body_writer(flush, param, oc){
         var encoding = param[1];
         return caml_call3(Transfer_IO[2], flush, encoding, oc);
        }
        var write_body = Transfer_IO[4];
        function write(flush, fn, req, oc){
         function _h_(param){
          var writer = make_body_writer(flush, req, oc);
          function _j_(param){
           var encoding = req[1];
           if(typeof encoding === "number" && ! encoding)
            return caml_call2(IO[5], oc, cst_0);
           return caml_call1(IO[2], 0);
          }
          var _k_ = caml_call1(fn, writer);
          return caml_call2(IO[1], _k_, _j_);
         }
         var _i_ = write_header(req, oc);
         return caml_call2(IO[1], _i_, _h_);
        }
        return [0,
                IO,
                read,
                has_body,
                make_body_writer,
                make_body_reader,
                read_body_chunk,
                write_header,
                write_body,
                write];
       }];
   runtime.caml_register_global(33, Cohttp_Response, "Cohttp__Response");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Request
//# unitInfo: Requires: Cohttp__Code, Cohttp__Header, Cohttp__Header_io, Cohttp__Transfer, Cohttp__Transfer_io, Sexplib0__Sexp, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_record, Stdlib, Stdlib__Format, Stdlib__Int64, Stdlib__Printf, Stringext, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$12 = "",
    cst$13 = "*",
    cst$10 = "/",
    cst$11 = "//",
    cst_encoding$0 = "encoding",
    cst_headers$0 = "headers",
    cst_host$2 = "host",
    cst_http$1 = "http",
    cst_meth$0 = "meth",
    cst_resource$0 = "resource",
    cst_scheme$0 = "scheme",
    cst_version$0 = "version",
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$9 = cst$10,
    cst$7 = cst$11,
    cst$8 = cst$12,
    cst$2 = cst$11,
    cst$3 = cst$10,
    cst$4 = cst$12,
    cst$5 = "///",
    cst$6 = cst$11,
    cst$1 = cst$12,
    cst = ":",
    cst$0 = cst$12,
    error_source_002 = "cohttp/src/request.ml.t",
    Cohttp_Code = global_data.Cohttp__Code,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Cohttp_Header = global_data.Cohttp__Header,
    Cohttp_Transfer = global_data.Cohttp__Transfer,
    Stringext = global_data.Stringext,
    Stdlib = global_data.Stdlib,
    Cohttp_Header_io = global_data.Cohttp__Header_io,
    Cohttp_Transfer_io = global_data.Cohttp__Transfer_io,
    Uri = global_data.Uri,
    Sexplib0_Sexp = global_data.Sexplib0__Sexp,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    cst_0 = "0\r\n\r\n",
    _k_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [11, "\r\n", 0]]]]]],
       "%s %s %s\r\n"],
    _j_ = [0, 144245463, "bad request URI"],
    cst_Malformed_request_HTTP_ver = "Malformed request HTTP version: ",
    cst_Malformed_request_header = "Malformed request header: ",
    cst_host$1 = cst_host$2,
    _i_ = [0, 2],
    cst_http = cst_http$1,
    cst_http$0 = cst_http$1,
    cst_host$0 = cst_host$2,
    _h_ = [0, [2, 0, 0], "%s"],
    _g_ = [0, "localhost"],
    cst_host = cst_host$2,
    cst_user_agent = "user-agent",
    _a_ = [0, cst_encoding$0],
    _b_ = [0, cst_version$0],
    _c_ = [0, cst_resource$0],
    _d_ = [0, cst_scheme$0],
    _e_ = [0, cst_meth$0],
    _f_ = [0, cst_headers$0],
    cst_encoding = cst_encoding$0,
    cst_version = cst_version$0,
    cst_resource = cst_resource$0,
    cst_scheme = cst_scheme$0,
    cst_meth = cst_meth$0,
    cst_headers = cst_headers$0;
   function t_of_sexp(x_003){
    function _al_(param){
     var
      _aq_ = param[2],
      _ar_ = _aq_[2],
      _as_ = _ar_[2],
      _at_ = _as_[2],
      encoding = _at_[2][1],
      version = _at_[1],
      resource = _as_[1],
      scheme = _ar_[1],
      meth = _aq_[1],
      headers = param[1];
     return [0, headers, meth, scheme, resource, version, encoding];
    }
    var _am_ = 0;
    function _an_(param){
     return caml_string_notequal(param, cst_encoding$0)
             ? caml_string_notequal
                (param, cst_headers$0)
               ? caml_string_notequal
                  (param, cst_meth$0)
                 ? caml_string_notequal
                    (param, cst_resource$0)
                   ? caml_string_notequal
                      (param, cst_scheme$0)
                     ? caml_string_notequal(param, cst_version$0) ? -1 : 4
                     : 2
                   : 3
                 : 1
               : 0
             : 5;
    }
    var
     _ao_ =
       [0,
        cst_resource,
        1,
        Sexplib0_Sexp_conv[31],
        [0,
         cst_version,
         1,
         Cohttp_Code[2],
         [0, cst_encoding, 1, Cohttp_Transfer[2], 0]]],
     _ap_ =
       [0,
        cst_scheme,
        1,
        caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
        _ao_];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_002,
             [0,
              cst_headers,
              1,
              Cohttp_Header[1],
              [0, cst_meth, 1, Cohttp_Code[5], _ap_]],
             _an_,
             _am_,
             _al_,
             x_003);
   }
   function sexp_of_t(param){
    var
     encoding_015 = param[6],
     version_013 = param[5],
     resource_011 = param[4],
     scheme_009 = param[3],
     meth_007 = param[2],
     headers_005 = param[1],
     arg_016 = caml_call1(Cohttp_Transfer[1], encoding_015),
     bnds_004 = [0, [1, [0, _a_, [0, arg_016, 0]]], 0],
     arg_014 = caml_call1(Cohttp_Code[1], version_013),
     bnds_004$0 = [0, [1, [0, _b_, [0, arg_014, 0]]], bnds_004],
     arg_012 = caml_call1(Sexplib0_Sexp_conv[7], resource_011),
     bnds_004$1 = [0, [1, [0, _c_, [0, arg_012, 0]]], bnds_004$0],
     arg_010 =
       caml_call2(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7], scheme_009),
     bnds_004$2 = [0, [1, [0, _d_, [0, arg_010, 0]]], bnds_004$1],
     arg_008 = caml_call1(Cohttp_Code[4], meth_007),
     bnds_004$3 = [0, [1, [0, _e_, [0, arg_008, 0]]], bnds_004$2],
     arg_006 = caml_call1(Cohttp_Header[2], headers_005),
     bnds_004$4 = [0, [1, [0, _f_, [0, arg_006, 0]]], bnds_004$3];
    return [1, bnds_004$4];
   }
   function compare(x, y){
    var i = caml_call2(Cohttp_Header[17], x[1], y[1]);
    if(0 !== i) return i;
    var headers = caml_call1(Cohttp_Header[3], 0);
    return runtime.caml_compare
            ([0, headers, x[2], x[3], x[4], x[5], x[6]],
             [0, headers, y[2], y[3], y[4], y[5], y[6]]);
   }
   function headers(t){return t[1];}
   function meth(t){return t[2];}
   function scheme(t){return t[3];}
   function resource(t){return t[4];}
   function version(t){return t[5];}
   function encoding(t){return t[6];}
   var fixed_zero = [0, Stdlib_Int64[1]];
   function make(opt, _af_, encoding$0, headers, uri){
    if(opt) var sth$0 = opt[1], meth = sth$0; else var meth = 3546230;
    if(_af_)
     var sth$1 = _af_[1], version = sth$1;
    else
     var version = 540315116;
    if(headers)
     var h = headers[1], headers$0 = h;
    else
     var headers$0 = caml_call1(Cohttp_Header[3], 0);
    var match = caml_call1(Uri[29], uri);
    a:
    {
     if(match && ! caml_string_notequal(match[1], "httpunix")){var _aj_ = cst$1; break a;}
     var match$0 = caml_call1(Uri[39], uri);
     if(match$0)
      var
       p = match$0[1],
       _ag_ = caml_call1(Stdlib[33], p),
       _ah_ = caml_call2(Stdlib[28], cst, _ag_);
     else
      var _ah_ = cst$0;
     var
      _ai_ = caml_call2(Uri[38], _g_, uri),
      _aj_ = caml_call2(Stdlib[28], _ai_, _ah_);
    }
    var
     headers$1 = caml_call3(Cohttp_Header[12], headers$0, cst_host, _aj_),
     headers$2 =
       caml_call3
        (Cohttp_Header[12], headers$1, cst_user_agent, Cohttp_Header[46]),
     match$1 = caml_call1(Cohttp_Header[40], headers$2),
     match$2 = caml_call1(Uri[33], uri),
     match$3 = caml_call1(Uri[34], uri);
    a:
    {
     if(! match$1 && match$2 && match$3){
      var
       pass = match$3[1],
       user = match$2[1],
       auth = [0, -1058563442, [0, user, pass]],
       headers$3 = caml_call2(Cohttp_Header[39], headers$2, auth);
      break a;
     }
     var headers$3 = headers$2;
    }
    if(encoding$0)
     var sth = encoding$0[1], encoding = sth;
    else
     var encoding = fixed_zero;
    var enc = caml_call1(Cohttp_Header[37], headers$3);
    a:
    {
     if(typeof enc === "number" && enc){var encoding$1 = encoding; break a;}
     var encoding$1 = enc;
    }
    var _ak_ = caml_call1(Uri[27], uri);
    return [0,
            headers$3,
            meth,
            caml_call1(Uri[29], uri),
            _ak_,
            version,
            encoding$1];
   }
   function is_keep_alive(param){
    var
     version = param[5],
     headers = param[1],
     _ac_ = 540315115 === version ? 1 : 0;
    if(_ac_)
     var _ad_ = _ac_;
    else{
     var match = caml_call1(Cohttp_Header[48], headers);
     a:
     {
      if(match && -611285096 === match[1]){var _ae_ = 1; break a;}
      var _ae_ = 0;
     }
     var _ad_ = _ae_;
    }
    return 1 - _ad_;
   }
   function make_for_client(headers, opt, _ab_, meth, uri){
    if(opt) var sth = opt[1], chunked = sth; else var chunked = 1;
    if(_ab_)
     var sth$0 = _ab_[1], body_length = sth$0;
    else
     var body_length = Stdlib_Int64[1];
    var encoding = chunked ? 0 : [0, body_length];
    return make([0, meth], 0, [0, encoding], headers, uri);
   }
   function pp_hum(ppf, r){
    var _$_ = sexp_of_t(r), _aa_ = caml_call2(Sexplib0_Sexp[13], 0, _$_);
    return caml_call3(Stdlib_Format[129], ppf, _h_, _aa_);
   }
   function uri(param){
    var
     authority = param[4],
     scheme = param[3],
     meth = param[2],
     headers = param[1];
    if(caml_string_notequal(authority, cst$13)){
     if(357830602 === meth)
      var
       _N_ = caml_call2(Stdlib[28], cst$2, authority),
       _O_ = caml_call1(Uri[7], _N_);
     else{
      var uri$0 = caml_call1(Uri[7], authority);
      if(caml_call1(Uri[29], uri$0))
       var
        uri$1 =
          caml_string_notequal(caml_call2(Uri[26], 0, uri$0), cst$12)
           ? uri$0
           : caml_call2(Uri[28], uri$0, cst$3),
        uri$2 = uri$1;
      else{
       var
        empty = caml_call1(Uri[7], cst$4),
        empty_base = caml_call1(Uri[7], cst$5),
        match = caml_call3(Stringext[3], _i_, authority, 63);
       if(match){
        var match$0 = match[2], path = match[1];
        if(match$0)
         var
          qs = match$0[1],
          _P_ = caml_call2(Uri[28], empty, path),
          path_base = caml_call3(Uri[9], cst_http, empty_base, _P_),
          _Q_ = caml_call1(Uri[16], qs),
          _R_ = caml_call2(Uri[17], path_base, _Q_);
        else
         var
          _W_ = caml_call2(Uri[28], empty, path),
          _R_ = caml_call3(Uri[9], cst_http$0, empty_base, _W_);
        var pqs = _R_;
       }
       else
        var pqs = empty_base;
       var match$1 = caml_call2(Cohttp_Header[18], headers, cst_host$0);
       if(match$1)
        var
         host = match$1[1],
         _S_ = caml_call2(Stdlib[28], cst$6, host),
         host_uri = caml_call1(Uri[7], _S_),
         _T_ = caml_call1(Uri[36], host_uri),
         uri$3 = caml_call2(Uri[37], pqs, _T_),
         _U_ = caml_call1(Uri[39], host_uri),
         uri$4 = caml_call2(Uri[40], uri$3, _U_);
       else
        var
         _V_ = caml_call2(Uri[37], pqs, 0),
         uri$4 = caml_call2(Uri[30], _V_, 0);
       var uri$2 = uri$4;
      }
      var _O_ = uri$2;
     }
     var uri = _O_;
    }
    else{
     var match$2 = caml_call2(Cohttp_Header[18], headers, cst_host$1);
     if(match$2)
      var
       host$0 = match$2[1],
       _X_ = caml_call2(Stdlib[28], cst$7, host$0),
       host_uri$0 = caml_call1(Uri[7], _X_),
       _Y_ = caml_call1(Uri[39], host_uri$0),
       _Z_ = caml_call1(Uri[36], host_uri$0),
       ___ = caml_call8(Uri[11], 0, 0, _Z_, _Y_, 0, 0, 0, 0);
     else
      var ___ = caml_call1(Uri[7], cst$8);
     var uri = ___;
    }
    return caml_call1(Uri[29], uri) ? uri : caml_call2(Uri[30], uri, scheme);
   }
   var
    Cohttp_Request =
      [0,
       t_of_sexp,
       sexp_of_t,
       headers,
       meth,
       scheme,
       resource,
       version,
       encoding,
       compare,
       make,
       is_keep_alive,
       uri,
       make_for_client,
       pp_hum,
       function(IO){
        var
         Header_IO = caml_call1(Cohttp_Header_io[1], IO),
         Transfer_IO = caml_call1(Cohttp_Transfer_io[1], IO);
        function read(ic){
         function _z_(r){
          if(typeof r === "number") return caml_call1(IO[2], 3456156);
          if(144245463 <= r[1]) return caml_call1(IO[2], r);
          var
           match = r[2],
           version = match[3],
           resource = match[2],
           meth = match[1],
           _E_ = caml_string_equal(resource, cst$13);
          a:
          {
           if(_E_)
            var _F_ = _E_;
           else{
            var _G_ = 357830602 === meth ? 1 : 0;
            if(_G_)
             var _F_ = _G_;
            else{
             var _H_ = caml_call1(Uri[7], resource);
             if(caml_call1(Uri[29], _H_)){var _K_ = 1; break a;}
             var
              _I_ = 0 < runtime.caml_ml_string_length(resource) ? 1 : 0,
              _J_ =
                _I_
                 ? 47 !== runtime.caml_string_get(resource, 0) ? 1 : 0
                 : _I_,
              _F_ = 1 - _J_;
            }
           }
           var _K_ = _F_;
          }
          if(! _K_) return caml_call1(IO[2], _j_);
          function _L_(headers){
           var encoding = caml_call1(Cohttp_Header[37], headers);
           return caml_call1
                   (IO[2],
                    [0,
                     17724,
                     [0, headers, meth, 0, resource, version, encoding]]);
          }
          var _M_ = caml_call1(Header_IO[1], ic);
          return caml_call2(IO[1], _M_, _L_);
         }
         function _w_(param){
          if(! param) return caml_call1(IO[2], 3456156);
          var
           request_line = param[1],
           match = caml_call3(Stringext[3], 0, request_line, 32);
          if(match){
           var _A_ = match[2];
           if(_A_){
            var _B_ = _A_[2];
            if(_B_ && ! _B_[2]){
             var
              http_ver_raw = _B_[1],
              path = _A_[1],
              meth_raw = match[1],
              m = caml_call1(Cohttp_Code[32], meth_raw),
              v = caml_call1(Cohttp_Code[29], http_ver_raw);
             if(typeof v === "number")
              return caml_call1(IO[2], [0, 17724, [0, m, path, v]]);
             var
              _D_ =
                [0,
                 144245463,
                 caml_call2
                  (Stdlib[28], cst_Malformed_request_HTTP_ver, http_ver_raw)];
             return caml_call1(IO[2], _D_);
            }
           }
          }
          var
           _C_ =
             [0,
              144245463,
              caml_call2
               (Stdlib[28], cst_Malformed_request_header, request_line)];
          return caml_call1(IO[2], _C_);
         }
         var _x_ = caml_call1(IO[3], ic), _y_ = caml_call2(IO[1], _x_, _w_);
         return caml_call2(IO[1], _y_, _z_);
        }
        function has_body(req){
         var _v_ = req[2];
         a:
         if(typeof _v_ === "number"){
          if(3546230 !== _v_)
           if(492530731 <= _v_){
            if(801894688 !== _v_) break a;
           }
           else if(336447077 > _v_) break a;
          return 17505;
         }
         return caml_call1(Cohttp_Transfer[6], req[6]);
        }
        function make_body_reader(req, ic){
         return caml_call2(Transfer_IO[1], req[6], ic);
        }
        var read_body_chunk = Transfer_IO[3];
        function write_header(req, oc){
         var
          _q_ = caml_call1(Cohttp_Code[28], req[5]),
          _r_ = caml_string_equal(req[4], cst$12) ? cst$9 : req[4],
          _s_ = caml_call1(Cohttp_Code[31], req[2]),
          fst_line = caml_call4(Stdlib_Printf[4], _k_, _s_, _r_, _q_),
          headers = req[1],
          headers$0 =
            4448519 <= has_body(req)
             ? caml_call2(Cohttp_Header[38], headers, req[6])
             : headers;
         function _t_(param){return caml_call2(Header_IO[2], headers$0, oc);}
         var _u_ = caml_call2(IO[5], oc, fst_line);
         return caml_call2(IO[1], _u_, _t_);
        }
        function make_body_writer(flush, req, oc){
         return caml_call3(Transfer_IO[2], flush, req[6], oc);
        }
        var write_body = Transfer_IO[4];
        function write(flush, write_body, req, oc){
         function _l_(param){
          var writer = make_body_writer(flush, req, oc);
          function _n_(param){
           var _p_ = req[6];
           if(typeof _p_ === "number" && ! _p_)
            return caml_call2(IO[5], oc, cst_0);
           return caml_call1(IO[2], 0);
          }
          var _o_ = caml_call1(write_body, writer);
          return caml_call2(IO[1], _o_, _n_);
         }
         var _m_ = write_header(req, oc);
         return caml_call2(IO[1], _m_, _l_);
        }
        return [0,
                IO,
                read,
                has_body,
                make_body_writer,
                make_body_reader,
                read_body_chunk,
                write_header,
                write_body,
                write];
       }];
   runtime.caml_register_global(63, Cohttp_Request, "Cohttp__Request");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Path
//# unitInfo: Requires: Stdlib__Filename, Stdlib__String, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ml_string_length = runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "/",
    cst$0 = "",
    Uri = global_data.Uri,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Filename = global_data.Stdlib__Filename,
    cst_http = "http";
   function resolve_local_file(docroot, uri){
    var
     _a_ = caml_call1(Uri[7], cst),
     _b_ = caml_call3(Uri[9], cst_http, _a_, uri),
     _c_ = caml_call2(Uri[26], 0, _b_),
     path = caml_call1(Uri[6], _c_),
     rel_path =
       0 < caml_ml_string_length(path)
        ? caml_call3
          (Stdlib_String[15], path, 1, caml_ml_string_length(path) - 1 | 0)
        : cst$0;
    return caml_call2(Stdlib_Filename[4], docroot, rel_path);
   }
   var Cohttp_Path = [0, resolve_local_file];
   runtime.caml_register_global(6, Cohttp_Path, "Cohttp__Path");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Cookie
//# unitInfo: Requires: Cohttp__Header, Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Sexplib0__Sexp_conv_record, Stdlib, Stdlib__Char, Stdlib__Int64, Stdlib__List, Stdlib__String, Stringext
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$13 = "",
    cst$14 = " \t",
    cst$12 = "; ",
    cst$11 = "=",
    cst_Max_Age$1 = "Max-Age=",
    cst_Max_age = "Max_age",
    cst_Session = "Session",
    cst_cohttp_src_cookie_ml_expir = "cohttp/src/cookie.ml.expiration",
    cst_cookie$2 = "cookie",
    cst_domain$2 = "domain",
    cst_expiration$0 = "expiration",
    cst_http_only$0 = "http_only",
    cst_httponly$0 = "httponly",
    cst_path$2 = "path",
    cst_secure$2 = "secure",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$9 = cst$11,
    cst$10 = cst$12,
    cst$8 = cst$13,
    cst$6 = cst$14,
    cst$7 = ";",
    cst$5 = cst$11,
    cst$3 = cst$14,
    cst$4 = ",;",
    cst$2 = cst$13,
    cst$0 = cst$11,
    cst$1 = cst$12,
    attrs = [0, "Version=1", 0],
    cst = cst$12,
    error_source_006 = cst_cohttp_src_cookie_ml_expir,
    error_source_011 = cst_cohttp_src_cookie_ml_expir,
    error_source_019 = "cohttp/src/cookie.ml.cookie",
    error_source_025 = "cohttp/src/cookie.ml.Set_cookie_hdr.t",
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stringext = global_data.Stringext,
    Cohttp_Header = global_data.Cohttp__Header,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_record = global_data.Sexplib0__Sexp_conv_record,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    cst_cookie$1 = cst_cookie$2,
    _k_ = [0, 2],
    _l_ = [0, cst$13, cst$13],
    cst_cookie$0 = cst_cookie$2,
    cst_set_cookie = "set-cookie",
    cst_set_cookie2 = "set-cookie2",
    _j_ = [0, cst$13, cst$13],
    cst_path$1 = cst_path$2,
    cst_domain$1 = cst_domain$2,
    cst_httponly = cst_httponly$0,
    cst_secure$1 = cst_secure$2,
    _i_ = [0, cst_httponly$0, 0],
    cst_secure$0 = cst_secure$2,
    cst_path$0 = "path=",
    cst_domain$0 = "domain=",
    cst_Max_Age$0 = cst_Max_Age$1,
    cst_Set_Cookie = "Set-Cookie",
    cst_Secure = "Secure",
    cst_Path = "Path=",
    cst_Discard = "Discard",
    cst_Max_Age = cst_Max_Age$1,
    cst_Domain = "Domain=",
    cst_Set_Cookie2 = "Set-Cookie2",
    _c_ = [0, cst_http_only$0],
    _d_ = [0, cst_secure$2],
    _e_ = [0, cst_path$2],
    _f_ = [0, cst_domain$2],
    _g_ = [0, cst_expiration$0],
    _h_ = [0, cst_cookie$2],
    cst_http_only = cst_http_only$0,
    cst_secure = cst_secure$2,
    cst_path = cst_path$2,
    cst_domain = cst_domain$2,
    cst_expiration = cst_expiration$0,
    cst_cookie = cst_cookie$2,
    _a_ = [0, cst_Session],
    _b_ = [0, cst_Max_age];
   function expiration_of_sexp(sexp_004){
    if(0 === sexp_004[0]){
     var atom_002 = sexp_004[1];
     return caml_string_notequal(atom_002, cst_Max_age)
             ? caml_string_notequal
                (atom_002, cst_Session)
               ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
               : -521584842
             : caml_call2
               (Sexplib0_Sexp_conv_error[23], error_source_006, sexp_004);
    }
    var _ai_ = sexp_004[1];
    if(! _ai_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_004);
    var match = _ai_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_006, sexp_004);
    var sexp_args_005 = _ai_[2], atom_002$0 = match[1];
    if(caml_string_notequal(atom_002$0, cst_Max_age))
     return caml_string_notequal(atom_002$0, cst_Session)
             ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
             : caml_call2
               (Sexplib0_Sexp_conv_error[21], error_source_006, sexp_004);
    if(sexp_args_005 && ! sexp_args_005[2]){
     var
      arg0_008 = sexp_args_005[1],
      res0_009 = caml_call1(Sexplib0_Sexp_conv[37], arg0_008);
     return [0, 566070852, res0_009];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[22],
             error_source_006,
             atom_002$0,
             sexp_004);
   }
   function expiration_of_sexp$0(sexp_010){
    try{var _ag_ = expiration_of_sexp(sexp_010); return _ag_;}
    catch(_ah_){
     var _af_ = caml_wrap_exception(_ah_);
     if(_af_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_011, sexp_010);
     throw caml_maybe_attach_backtrace(_af_, 0);
    }
   }
   function sexp_of_expiration(param){
    if(typeof param === "number") return _a_;
    var v_012 = param[2];
    return [1, [0, _b_, [0, caml_call1(Sexplib0_Sexp_conv[13], v_012), 0]]];
   }
   function cookie_of_sexp(sexp_018){
    if(1 === sexp_018[0]){
     var _ad_ = sexp_018[1];
     if(_ad_){
      var _ae_ = _ad_[2];
      if(_ae_ && ! _ae_[2]){
       var
        arg1_015 = _ae_[1],
        arg0_014 = _ad_[1],
        res0_016 = caml_call1(Sexplib0_Sexp_conv[31], arg0_014),
        res1_017 = caml_call1(Sexplib0_Sexp_conv[31], arg1_015);
       return [0, res0_016, res1_017];
      }
     }
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[2], error_source_019, 2, sexp_018);
   }
   function t_of_sexp(x_026){
    function _V_(param){
     var
      _$_ = param[2],
      _aa_ = _$_[2],
      _ab_ = _aa_[2],
      _ac_ = _ab_[2],
      http_only = _ac_[2][1],
      secure = _ac_[1],
      path = _ab_[1],
      domain = _aa_[1],
      expiration = _$_[1],
      cookie = param[1];
     return [0, cookie, expiration, domain, path, secure, http_only];
    }
    var _W_ = 0;
    function _X_(param){
     return caml_string_notequal(param, cst_cookie$2)
             ? caml_string_notequal
                (param, cst_domain$2)
               ? caml_string_notequal
                  (param, cst_expiration$0)
                 ? caml_string_notequal
                    (param, cst_http_only$0)
                   ? caml_string_notequal
                      (param, cst_path$2)
                     ? caml_string_notequal(param, cst_secure$2) ? -1 : 4
                     : 3
                   : 5
                 : 1
               : 2
             : 0;
    }
    var
     _Y_ =
       [0,
        cst_secure,
        1,
        Sexplib0_Sexp_conv[30],
        [0, cst_http_only, 1, Sexplib0_Sexp_conv[30], 0]],
     _Z_ =
       [0,
        cst_path,
        1,
        caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
        _Y_],
     ___ =
       [0,
        cst_cookie,
        1,
        cookie_of_sexp,
        [0,
         cst_expiration,
         1,
         expiration_of_sexp$0,
         [0,
          cst_domain,
          1,
          caml_call1(Sexplib0_Sexp_conv[41], Sexplib0_Sexp_conv[31]),
          _Z_]]];
    return caml_call6
            (Sexplib0_Sexp_conv_record[3],
             error_source_025,
             ___,
             _X_,
             _W_,
             _V_,
             x_026);
   }
   function sexp_of_t(param){
    var
     http_only_038 = param[6],
     secure_036 = param[5],
     path_034 = param[4],
     domain_032 = param[3],
     expiration_030 = param[2],
     cookie_028 = param[1],
     arg_039 = caml_call1(Sexplib0_Sexp_conv[6], http_only_038),
     bnds_027 = [0, [1, [0, _c_, [0, arg_039, 0]]], 0],
     arg_037 = caml_call1(Sexplib0_Sexp_conv[6], secure_036),
     bnds_027$0 = [0, [1, [0, _d_, [0, arg_037, 0]]], bnds_027],
     arg_035 =
       caml_call2(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7], path_034),
     bnds_027$1 = [0, [1, [0, _e_, [0, arg_035, 0]]], bnds_027$0],
     arg_033 =
       caml_call2(Sexplib0_Sexp_conv[17], Sexplib0_Sexp_conv[7], domain_032),
     bnds_027$2 = [0, [1, [0, _f_, [0, arg_033, 0]]], bnds_027$1],
     arg_031 = sexp_of_expiration(expiration_030),
     bnds_027$3 = [0, [1, [0, _g_, [0, arg_031, 0]]], bnds_027$2],
     arg1_021 = cookie_028[2],
     arg0_020 = cookie_028[1],
     res0_022 = caml_call1(Sexplib0_Sexp_conv[7], arg0_020),
     res1_023 = caml_call1(Sexplib0_Sexp_conv[7], arg1_021),
     arg_029 = [1, [0, res0_022, [0, res1_023, 0]]],
     bnds_027$4 = [0, [1, [0, _h_, [0, arg_029, 0]]], bnds_027$3];
    return [1, bnds_027$4];
   }
   function cookie(t){return t[1];}
   function expiration(t){return t[2];}
   function domain(t){return t[3];}
   function path(t){return t[4];}
   function secure(t){return t[5];}
   function http_only(t){return t[6];}
   function make(opt, path, domain, _U_, _T_, cookie){
    if(opt)
     var sth = opt[1], expiration = sth;
    else
     var expiration = -521584842;
    if(_U_) var sth$0 = _U_[1], secure = sth$0; else var secure = 0;
    if(_T_) var sth$1 = _T_[1], http_only = sth$1; else var http_only = 0;
    return [0, cookie, expiration, domain, path, secure, http_only];
   }
   function serialize(opt, c$0){
    if(opt) var sth = opt[1], version = sth; else var version = 540315115;
    if(540315116 <= version){
     var attrs$0 = c$0[5] ? [0, cst_Secure, attrs] : attrs, match = c$0[4];
     if(match)
      var
       p = match[1],
       attrs$1 = [0, caml_call2(Stdlib[28], cst_Path, p), attrs$0];
     else
      var attrs$1 = attrs$0;
     var match$0 = c$0[2];
     if(typeof match$0 === "number")
      var attrs$2 = [0, cst_Discard, attrs$1];
     else
      var
       age = match$0[2],
       _Q_ = caml_call1(Stdlib_Int64[14], age),
       attrs$2 = [0, caml_call2(Stdlib[28], cst_Max_Age, _Q_), attrs$1];
     var match$1 = c$0[3];
     if(match$1)
      var
       d = match$1[1],
       attrs$3 = [0, caml_call2(Stdlib[28], cst_Domain, d), attrs$2];
     else
      var attrs$3 = attrs$2;
     return [0, cst_Set_Cookie2, caml_call2(Stdlib_String[6], cst, attrs$3)];
    }
    var
     attrs$4 = c$0[6] ? _i_ : 0,
     attrs$5 = c$0[5] ? [0, cst_secure$0, attrs$4] : attrs$4,
     match$2 = c$0[4];
    if(match$2)
     var
      p$0 = match$2[1],
      attrs$6 = [0, caml_call2(Stdlib[28], cst_path$0, p$0), attrs$5];
    else
     var attrs$6 = attrs$5;
    var match$3 = c$0[3];
    if(match$3)
     var
      d$0 = match$3[1],
      attrs$7 = [0, caml_call2(Stdlib[28], cst_domain$0, d$0), attrs$6];
    else
     var attrs$7 = attrs$6;
    var match$4 = c$0[2];
    if(typeof match$4 === "number")
     var attrs$8 = attrs$7;
    else
     var
      age$0 = match$4[2],
      _S_ = caml_call1(Stdlib_Int64[14], age$0),
      attrs$8 = [0, caml_call2(Stdlib[28], cst_Max_Age$0, _S_), attrs$7];
    var
     match$5 = c$0[1],
     c = match$5[2],
     n = match$5[1],
     _R_ =
       caml_string_notequal(c, cst$13)
        ? caml_call2(Stdlib[28], cst$0, c)
        : cst$2,
     attrs$9 = [0, caml_call2(Stdlib[28], n, _R_), attrs$8];
    return [0, cst_Set_Cookie, caml_call2(Stdlib_String[6], cst$1, attrs$9)];
   }
   function caseless_equal(a, b){
    if(a === b) return 1;
    var
     len = caml_ml_string_length(a),
     _N_ = len === caml_ml_string_length(b) ? 1 : 0;
    if(_N_){
     var stop = [0, 0], idx = [0, 0];
     for(;;){
      if(! stop[1] && idx[1] < len){
       var
        c1 = caml_string_unsafe_get(a, idx[1]),
        c2 = caml_string_unsafe_get(b, idx[1]),
        _P_ = caml_call1(Stdlib_Char[5], c2);
       if(caml_call1(Stdlib_Char[5], c1) !== _P_) stop[1] = 1;
       idx[1]++;
       continue;
      }
      var _O_ = 1 - stop[1];
      break;
     }
    }
    else
     var _O_ = _N_;
    return _O_;
   }
   function extract(hdr){
    var _w_ = 0;
    function _x_(k, cstr, alist){
     if(! caseless_equal(k, cst_set_cookie))
      return caseless_equal(k, cst_set_cookie2) ? alist : alist;
     var attrs = caml_call3(Stringext[6], cstr, cst$4, cst$3);
     function _y_(attr){
      var match = caml_call3(Stringext[3], 0, attr, 61);
      if(! match) return _j_;
      var v = match[2], n = match[1];
      return [0, n, caml_call2(Stdlib_String[6], cst$5, v)];
     }
     var attrs$0 = caml_call2(Stdlib_List[19], _y_, attrs);
     try{
      var
       cookie = caml_call1(Stdlib_List[5], attrs$0),
       _A_ = caml_call1(Stdlib_List[6], attrs$0),
       _B_ =
         function(param){
          var v = param[2], n = param[1];
          return [0, caml_call1(Stdlib_String[26], n), v];
         },
       attrs$1 = caml_call2(Stdlib_List[19], _B_, _A_);
      a:
      try{
       var v$0 = caml_call2(Stdlib_List[46], cst_path$1, attrs$1);
       if(! caml_string_equal(v$0, cst$13) && 47 === caml_string_get(v$0, 0)){var _J_ = [0, v$0], path = _J_; break a;}
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      }
      catch(_M_){
       var _C_ = caml_wrap_exception(_M_);
       if(_C_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_C_, 0);
       var path = 0;
      }
      try{
       var v = caml_call2(Stdlib_List[46], cst_domain$1, attrs$1);
       if(caml_string_equal(v, cst$13))
        throw caml_maybe_attach_backtrace(Stdlib[8], 1);
       var
        _H_ =
          46 === caml_string_get(v, 0) ? caml_call2(Stringext[1], v, 1) : v,
        _I_ = [0, caml_call1(Stdlib_String[26], _H_)],
        domain = _I_;
      }
      catch(_L_){
       var _D_ = caml_wrap_exception(_L_);
       if(_D_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_D_, 0);
       var domain = 0;
      }
      var
       _E_ = caml_call2(Stdlib_List[50], cst_httponly, attrs$1),
       _F_ =
         [0,
          cookie,
          -521584842,
          domain,
          path,
          caml_call2(Stdlib_List[50], cst_secure$1, attrs$1),
          _E_],
       _G_ = [0, [0, cookie[1], _F_], alist];
      return _G_;
     }
     catch(_K_){
      var _z_ = caml_wrap_exception(_K_);
      if(_z_[1] === Stdlib[7]) return alist;
      throw caml_maybe_attach_backtrace(_z_, 0);
     }
    }
    return caml_call3(Cohttp_Header[25], _x_, hdr, _w_);
   }
   function value(param){var v = param[1][2]; return v;}
   function extract$0(hdr){
    var _p_ = caml_call2(Cohttp_Header[19], hdr, cst_cookie$0), _q_ = 0;
    function _r_(acc, header){
     var comps = caml_call3(Stringext[6], header, cst$7, cst$6);
     function _s_(s){
      var
       _u_ = 0 < caml_ml_string_length(s) ? 1 : 0,
       _v_ = _u_ ? 36 !== caml_string_get(s, 0) ? 1 : 0 : _u_;
      return _v_;
     }
     var cookies = caml_call2(Stdlib_List[41], _s_, comps);
     function split_pair(nvp){
      var match = caml_call3(Stringext[3], _k_, nvp, 61);
      if(! match) return _l_;
      var match$0 = match[2], n = match[1];
      if(! match$0) return [0, n, cst$8];
      var v = match$0[1];
      return [0, n, v];
     }
     var _t_ = caml_call2(Stdlib_List[19], split_pair, cookies);
     return caml_call2(Stdlib[37], _t_, acc);
    }
    return caml_call3(Stdlib_List[25], _r_, _q_, _p_);
   }
   function serialize$0(cookies){
    function _m_(param){
     var v = param[2], k = param[1], _o_ = caml_call2(Stdlib[28], cst$9, v);
     return caml_call2(Stdlib[28], k, _o_);
    }
    var _n_ = caml_call2(Stdlib_List[19], _m_, cookies);
    return [0, cst_cookie$1, caml_call2(Stdlib_String[6], cst$10, _n_)];
   }
   var
    Cookie_hdr = [0, extract$0, serialize$0],
    Cohttp_Cookie =
      [0,
       sexp_of_expiration,
       expiration_of_sexp$0,
       expiration_of_sexp,
       [0,
        t_of_sexp,
        sexp_of_t,
        make,
        serialize,
        extract,
        cookie,
        value,
        expiration,
        domain,
        path,
        secure,
        http_only],
       Cookie_hdr];
   runtime.caml_register_global(77, Cohttp_Cookie, "Cohttp__Cookie");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Connection
//# unitInfo: Requires: Sexplib0__Sexp_conv, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Stdlib = global_data.Stdlib,
    t_of_sexp = Sexplib0_Sexp_conv[34],
    sexp_of_t = Sexplib0_Sexp_conv[10],
    to_string = Stdlib[33],
    count = [0, 0];
   function create(param){count[1]++; return count[1];}
   var
    compare = runtime.caml_int_compare,
    Cohttp_Connection = [0, t_of_sexp, sexp_of_t, create, to_string, compare];
   runtime.caml_register_global(2, Cohttp_Connection, "Cohttp__Connection");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp__Body
//# unitInfo: Requires: Sexplib0__Sexp_conv, Sexplib0__Sexp_conv_error, Stdlib__List, Stdlib__String, Uri
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Empty = "Empty",
    cst_String = "String",
    cst_Strings = "Strings",
    cst_cohttp_src_body_ml_t = "cohttp/src/body.ml.t",
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$1,
    cst$0 = cst$1,
    error_source_006 = cst_cohttp_src_body_ml_t,
    error_source_014 = cst_cohttp_src_body_ml_t,
    Uri = global_data.Uri,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Sexplib0_Sexp_conv = global_data.Sexplib0__Sexp_conv,
    Sexplib0_Sexp_conv_error = global_data.Sexplib0__Sexp_conv_error,
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _f_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = [0, runtime.caml_int64_create_lo_mi_hi(0, 0, 0)],
    _a_ = [0, cst_Empty],
    _b_ = [0, cst_Strings],
    _c_ = [0, cst_String];
   function t_of_sexp(sexp_004){
    if(0 === sexp_004[0]){
     var atom_002 = sexp_004[1];
     return caml_string_notequal(atom_002, cst_Empty)
             ? caml_string_notequal
                (atom_002, cst_String)
               ? caml_string_notequal
                  (atom_002, cst_Strings)
                 ? caml_call1(Sexplib0_Sexp_conv_error[19], 0)
                 : caml_call2
                   (Sexplib0_Sexp_conv_error[23], error_source_006, sexp_004)
               : caml_call2
                 (Sexplib0_Sexp_conv_error[23], error_source_006, sexp_004)
             : 50834029;
    }
    var _m_ = sexp_004[1];
    if(! _m_)
     return caml_call2
             (Sexplib0_Sexp_conv_error[25], error_source_006, sexp_004);
    var match = _m_[1];
    if(0 !== match[0])
     return caml_call2
             (Sexplib0_Sexp_conv_error[24], error_source_006, sexp_004);
    var sexp_args_005 = _m_[2], atom_002$0 = match[1];
    if(! caml_string_notequal(atom_002$0, cst_Empty))
     return caml_call2
             (Sexplib0_Sexp_conv_error[21], error_source_006, sexp_004);
    if(caml_string_notequal(atom_002$0, cst_String)){
     if(caml_string_notequal(atom_002$0, cst_Strings))
      return caml_call1(Sexplib0_Sexp_conv_error[19], 0);
     if(sexp_args_005 && ! sexp_args_005[2]){
      var
       arg0_008 = sexp_args_005[1],
       res0_009 =
         caml_call2(Sexplib0_Sexp_conv[44], Sexplib0_Sexp_conv[31], arg0_008);
      return [0, -968575390, res0_009];
     }
     return caml_call3
             (Sexplib0_Sexp_conv_error[22],
              error_source_006,
              atom_002$0,
              sexp_004);
    }
    if(sexp_args_005 && ! sexp_args_005[2]){
     var
      arg0_011 = sexp_args_005[1],
      res0_012 = caml_call1(Sexplib0_Sexp_conv[31], arg0_011);
     return [0, -976970511, res0_012];
    }
    return caml_call3
            (Sexplib0_Sexp_conv_error[22],
             error_source_006,
             atom_002$0,
             sexp_004);
   }
   function t_of_sexp$0(sexp_013){
    try{var _k_ = t_of_sexp(sexp_013); return _k_;}
    catch(_l_){
     var _j_ = caml_wrap_exception(_l_);
     if(_j_ === Sexplib0_Sexp_conv_error[18])
      return caml_call2
              (Sexplib0_Sexp_conv_error[20], error_source_014, sexp_013);
     throw caml_maybe_attach_backtrace(_j_, 0);
    }
   }
   function sexp_of_t(param){
    if(typeof param === "number") return _a_;
    if(-968575390 <= param[1]){
     var v_016 = param[2];
     return [1,
             [0,
              _b_,
              [0,
               caml_call2
                (Sexplib0_Sexp_conv[20], Sexplib0_Sexp_conv[7], v_016),
               0]]];
    }
    var v_015 = param[2];
    return [1, [0, _c_, [0, caml_call1(Sexplib0_Sexp_conv[7], v_015), 0]]];
   }
   var empty = 50834029;
   function is_empty(param){
    if(typeof param !== "number"){
     if(-968575390 <= param[1]){
      var
       xs = param[2],
       _i_ = function(s){return caml_string_notequal(s, cst$1);};
      return caml_call2(Stdlib_List[41], _i_, xs) ? 0 : 1;
     }
     if(caml_string_notequal(param[2], cst$1)) return 0;
    }
    return 1;
   }
   function to_string(param){
    if(typeof param === "number") return cst;
    if(-968575390 <= param[1]){
     var sl = param[2];
     return caml_call2(Stdlib_String[6], cst$0, sl);
    }
    var s = param[2];
    return s;
   }
   function to_string_list(param){
    if(typeof param === "number") return 0;
    if(-968575390 <= param[1]){var sl = param[2]; return sl;}
    var s = param[2];
    return [0, s, 0];
   }
   function of_string(s){return [0, -976970511, s];}
   function of_string_list(s){return [0, -968575390, s];}
   function transfer_encoding(param){
    if(typeof param === "number") return _d_;
    if(-968575390 <= param[1]) return 0;
    var s = param[2];
    return [0, caml_int64_of_int32(caml_ml_string_length(s))];
   }
   function length(param){
    if(typeof param === "number") return _e_;
    if(-968575390 <= param[1]){
     var
      sl = param[2],
      _h_ =
        function(a, b){
         return runtime.caml_int64_add
                 (a, caml_int64_of_int32(caml_ml_string_length(b)));
        };
     return caml_call1(caml_call2(Stdlib_List[25], _h_, _f_), sl);
    }
    var s = param[2];
    return caml_int64_of_int32(caml_ml_string_length(s));
   }
   function map(f, param){
    if(typeof param === "number") return 50834029;
    if(-968575390 <= param[1]){
     var sl = param[2];
     return [0, -968575390, caml_call2(Stdlib_List[19], f, sl)];
    }
    var s = param[2];
    return [0, -976970511, caml_call1(f, s)];
   }
   function to_form(t){
    var _g_ = to_string(t);
    return caml_call1(Uri[16], _g_);
   }
   function of_form(scheme, f){
    return of_string(caml_call3(Uri[15], scheme, 0, f));
   }
   var
    Cohttp_Body =
      [0,
       sexp_of_t,
       t_of_sexp$0,
       t_of_sexp,
       to_string,
       to_string_list,
       to_form,
       empty,
       is_empty,
       of_string,
       of_string_list,
       of_form,
       map,
       transfer_encoding,
       length];
   runtime.caml_register_global(23, Cohttp_Body, "Cohttp__Body");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Cohttp
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Cohttp = [0];
   runtime.caml_register_global(0, Cohttp, "Cohttp");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
