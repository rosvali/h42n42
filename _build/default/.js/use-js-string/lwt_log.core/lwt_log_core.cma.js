// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Lwt_log_rules
//# unitInfo: Requires: Stdlib__Array, Stdlib__Lexing
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "*",
    ocaml_lex_tables =
      [0,
       "\0\0\xfd\xff\x02\0r\0\xe4\0\x04\0t\0V\x01\xc8\x01:\x02t\x02\0\0\xfa\x02 \0\xfe\xff\xff\xff\xe6\0",
       "\x03\0\xff\xff\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff\xff\xff\x02\0\xff\xff\xff\xff\xff\xff",
       "\x02\0\0\0\x02\0\x02\0\x02\0\xff\xff\x02\0\x02\0\xff\xff\x02\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\x05\0\0\0\x05\0\0\0\0\0\0\0\0\0\x10\0\x10\0\0\0\0\0\0\0\0\0\x06\0\0\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\x10\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x0f\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x05\0\x05\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x05\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x10\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\xff\xff\0\0\x04\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0e\0\x0f\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\b\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\b\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0b\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\x05\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\0\0\0\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x02\0\x02\0\x05\0\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\r\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\x05\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\xff\xff\r\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\x06\0\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x03\0\x04\0\x04\0\x10\0\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x04\0\xff\xff\x10\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\r\0\x10\0\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x04\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x04\0\xff\xff\x10\0\xff\xff\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\b\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\n\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\0\0\0\0\x02\0\x04\0\x06\0\0\0\b\0\n\0\f\0|\0\0\0\0\0\xee\0\0\0\0\0\0\0\0\0",
       "\0\0\0\0\0\0\f\0\0\0\0\0\0\0\0\0\0\0'\0'\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\x01\0\0\0\x01\0\x01\0\x01\0\0\0\x01\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\x04\0\0\0\0\0\0\0\0\0\x0f\0\x0f\0\x17\0\x17\0$\0$\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\x0f\0\0\0\x17\0\0\0$\0\0\0$\0\x14\0\0\0\t\0\0\0\t\0\0\0\0\0\0\0\x1a\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1f\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0$\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x17\0\x
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\0\0\x02\0\x02\0\x03\0\x03\0\x04\0\x04\0\x06\0\x06\0\x07\0\x07\0\b\0\b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\x04\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\b\0\x05\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x0b\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x06\0\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\x07\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\t\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\x02\0\xff\xff\x03\0\xff\xff\x04\0\xff\xff\x06\0\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\t\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       "\xff\x05\xff\xff\x04\xff\x03\xff\xff\x06\xff\xff\0\x04\xff\x03\xff\x04\xff\xff\x06\x05\xff\x05\x06\xff\x05\x06\x06\xff\xff\x07\xff\x06\xff\xff\x07\xff\xff\0\x03\x01\x05\x02\x07\xff"],
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Parse_error =
      [248, "Lwt_log_rules.Parse_error", runtime.caml_fresh_oo_id(0)];
   function rules(lexbuf){
    lexbuf[10] = runtime.caml_make_vect(8, -1);
    var _d_ = lexbuf[6];
    caml_check_bound(lexbuf[10], 4)[5] = _d_;
    var _e_ = lexbuf[6];
    caml_check_bound(lexbuf[10], 3)[4] = _e_;
    var ocaml_lex_state = 0;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_call3
         (Stdlib_Lexing[21], ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state = ocaml_lex_state$0;
    }
    switch(ocaml_lex_state$0){
      case 0:
       var
        _f_ = caml_check_bound(lexbuf[10], 1)[2],
        _g_ = caml_check_bound(lexbuf[10], 0)[1],
        pattern = caml_call3(Stdlib_Lexing[16], lexbuf, _g_, _f_),
        _h_ = lexbuf[6],
        _i_ = caml_check_bound(lexbuf[10], 2)[3],
        level = caml_call3(Stdlib_Lexing[16], lexbuf, _i_, _h_);
       return [0, [0, pattern, level], semi_colon_and_rules(lexbuf)];
      case 1:
       var
        _j_ = lexbuf[6],
        _k_ = caml_check_bound(lexbuf[10], 0)[1],
        level$0 = caml_call3(Stdlib_Lexing[16], lexbuf, _k_, _j_);
       return [0, [0, cst, level$0], semi_colon_and_rules(lexbuf)];
      case 2:
       return 0;
      default: throw caml_maybe_attach_backtrace(Parse_error, 1);
    }
   }
   function semi_colon_and_rules(lexbuf){
    var ocaml_lex_state = 13;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_call3
         (Stdlib_Lexing[20], ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return rules(lexbuf);
        case 1:
         return 0;
        default: throw caml_maybe_attach_backtrace(Parse_error, 1);
      }
     caml_call1(lexbuf[1], lexbuf);
     var ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function rules$0(buf){
    try{var _b_ = [0, rules(buf)]; return _b_;}
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_ === Parse_error) return 0;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   var Lwt_log_rules = [0, rules$0];
   runtime.caml_register_global(4, Lwt_log_rules, "Lwt_log_rules");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_log_core
//# unitInfo: Requires: CamlinternalLazy, Lwt, Lwt_list, Lwt_log_rules, Stdlib, Stdlib__Buffer, Stdlib__Hashtbl, Stdlib__Lazy, Stdlib__Lexing, Stdlib__Printexc, Stdlib__Printf, Stdlib__String, Stdlib__Sys, Stdlib__Weak
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    cst_Invalid_log_rules$1 = "Invalid log rules",
    cst_Lwt_log = "Lwt_log: ",
    cst_debug$0 = "debug",
    cst_error$0 = "error",
    cst_fatal$0 = "fatal",
    cst_info$0 = "info",
    cst_notice$0 = "notice",
    cst_warning$0 = "warning",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = ": ",
    file = "<unknown>",
    fmt =
      [0,
       [11, "invalid log level (", [2, 0, [12, 41, 0]]],
       "invalid log level (%s)"],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Lwt = global_data.Lwt,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Lwt_list = global_data.Lwt_list,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    Lwt_log_rules = global_data.Lwt_log_rules,
    Stdlib_Weak = global_data.Stdlib__Weak,
    cst_backtrace = "\nbacktrace:\n",
    _m_ =
      [0,
       [11, "Lwt_log_core.render: unknown variable ", [3, 0, 0]],
       "Lwt_log_core.render: unknown variable %S"],
    cst_Invalid_log_rules = cst_Invalid_log_rules$1,
    cst_Invalid_log_rules$0 = cst_Invalid_log_rules$1,
    _k_ = [0, [11, "Invalid log rules\n", [10, 0]], "Invalid log rules\n%!"],
    _j_ = [0, cst$1, 0],
    _i_ = [0, cst$1, 0],
    _c_ = [0, 3],
    _d_ = [0, 2],
    _e_ = [0, 1],
    _f_ = [0, 5],
    _g_ = [0, 4],
    _h_ = [0, 0],
    cst_debug = cst_debug$0,
    cst_info = cst_info$0,
    cst_notice = cst_notice$0,
    cst_warning = cst_warning$0,
    cst_error = cst_error$0,
    cst_fatal = cst_fatal$0,
    _a_ = [0, [12, 10, [10, 0]], "\n%!"],
    _b_ = [0, [11, cst_Lwt_log, 0], cst_Lwt_log],
    cst_main = "main",
    cst_Lwt_log_core_Logger_closed = "Lwt_log_core.Logger_closed";
   function string_of_level(param){
    switch(param){
      case 0:
       return cst_debug;
      case 1:
       return cst_info;
      case 2:
       return cst_notice;
      case 3:
       return cst_warning;
      case 4:
       return cst_error;
      default: return cst_fatal;
    }
   }
   function level_of_string(str){
    var str$0 = caml_call1(Stdlib_String[26], str);
    return caml_string_notequal(str$0, cst_debug$0)
            ? caml_string_notequal
               (str$0, cst_error$0)
              ? caml_string_notequal
                 (str$0, cst_fatal$0)
                ? caml_string_notequal
                   (str$0, cst_info$0)
                  ? caml_string_notequal
                     (str$0, cst_notice$0)
                    ? caml_string_notequal(str$0, cst_warning$0) ? 0 : _c_
                    : _d_
                  : _e_
                : _f_
              : _g_
            : _h_;
   }
   function sub_equal(str, ofs, patt){
    var
     str_len = caml_ml_string_length(str),
     patt_len = caml_ml_string_length(patt),
     _aM_ = (ofs + patt_len | 0) <= str_len ? 1 : 0;
    if(! _aM_) return _aM_;
    var ofs$0 = ofs, ofs_patt = 0;
    for(;;){
     var _aI_ = ofs_patt === patt_len ? 1 : 0;
     if(_aI_)
      var _aJ_ = _aI_;
     else{
      var
       _aK_ = caml_string_get(patt, ofs_patt),
       _aL_ = caml_string_get(str, ofs$0) === _aK_ ? 1 : 0;
      if(_aL_){
       var
        ofs_patt$0 = ofs_patt + 1 | 0,
        ofs$1 = ofs$0 + 1 | 0,
        ofs$0 = ofs$1,
        ofs_patt = ofs_patt$0;
       continue;
      }
      var _aJ_ = _aL_;
     }
     return _aJ_;
    }
   }
   function split(pattern){
    var len = caml_ml_string_length(pattern);
    function loop(ofs){
     if(ofs === len) return _j_;
     try{
      var
       _aG_ = [0, caml_call3(Stdlib_String[31], pattern, ofs, 42)],
       match = _aG_;
     }
     catch(_aH_){
      var _aE_ = caml_wrap_exception(_aH_);
      if(_aE_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_aE_, 0);
      var match = 0;
     }
     if(! match)
      return [0,
              caml_call3(Stdlib_String[15], pattern, ofs, len - ofs | 0),
              0];
     var ofs$0 = match[1], _aF_ = loop(ofs$0 + 1 | 0);
     return [0,
             caml_call3(Stdlib_String[15], pattern, ofs, ofs$0 - ofs | 0),
             _aF_];
    }
    return loop(0);
   }
   var rules = [0, 0];
   function load_rules(str, fail_on_error){
    function loop(param){
     var param$0 = param;
     for(;;){
      if(! param$0) return 0;
      var
       rest = param$0[2],
       match = param$0[1],
       level_str = match[2],
       pattern = match[1],
       pattern$0 = split(pattern),
       level = level_of_string(level_str);
      if(level){
       var level$0 = level[1];
       return [0, [0, pattern$0, level$0], loop(rest)];
      }
      if(fail_on_error)
       throw caml_maybe_attach_backtrace
              ([0, Stdlib[7], cst_Invalid_log_rules], 1);
      var
       _aC_ = caml_call2(Stdlib[98], fmt, _a_),
       _aD_ = caml_call2(Stdlib[98], _b_, _aC_);
      caml_call1(caml_call1(Stdlib_Printf[3], _aD_), level_str);
      var param$0 = rest;
     }
    }
    var
     _aB_ = caml_call2(Stdlib_Lexing[3], 0, str),
     match = caml_call1(Lwt_log_rules[1], _aB_);
    if(match){var l = match[1]; rules[1] = loop(l); return;}
    if(fail_on_error)
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[7], cst_Invalid_log_rules$0], 1);
    return caml_call1(Stdlib_Printf[3], _k_);
   }
   try{var _o_ = [0, runtime.caml_sys_getenv("LWT_LOG")], match = _o_;}
   catch(_aA_){
    var _l_ = caml_wrap_exception(_aA_);
    if(_l_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_l_, 0);
    var match = 0;
   }
   if(match){var str = match[1]; load_rules(str, 0);}
   function equal(a, b){return caml_string_equal(a[1], b[1]);}
   function hash(s){return caml_call1(Stdlib_Hashtbl[28], s[1]);}
   var
    Sections = caml_call1(Stdlib_Weak[9], [0, equal, hash]),
    sections = caml_call1(Sections[1], 32);
   function find_level(string){
    var param = rules[1];
    for(;;){
     if(! param) return 2;
     var
      rest = param[2],
      match = param[1],
      level = match[2],
      pattern$0 = match[1],
      length = caml_ml_string_length(string),
      loop$0 =
        function(length){
         function loop(offset, pattern){
          if(offset === length){
           var
            _au_ = 0 === pattern ? 1 : 0,
            _av_ = _au_ || runtime.caml_equal(pattern, _i_);
           return _av_;
          }
          if(! pattern) return 0;
          var
           pattern$0 = pattern[2],
           literal = pattern[1],
           literal_length = caml_ml_string_length(literal),
           max_offset = length - literal_length | 0,
           offset$0 = offset;
          for(;;){
           var _aw_ = offset$0 <= max_offset ? 1 : 0;
           if(_aw_){
            var
             _ax_ = sub_equal(string, offset$0, literal),
             _ay_ =
               _ax_ ? loop(offset$0 + literal_length | 0, pattern$0) : _ax_;
            if(! _ay_){
             var offset$1 = offset$0 + 1 | 0, offset$0 = offset$1;
             continue;
            }
            var _az_ = _ay_;
           }
           else
            var _az_ = _aw_;
           return _az_;
          }
         }
         return loop;
        },
      loop = loop$0(length);
     if(pattern$0)
      var
       pattern = pattern$0[2],
       literal = pattern$0[1],
       _as_ = sub_equal(string, 0, literal),
       _at_ = _as_ ? loop(caml_ml_string_length(literal), pattern) : _as_;
     else
      var _at_ = caml_string_equal(string, cst$1);
     if(_at_) return level;
     var param = rest;
    }
   }
   function recompute_levels(param){
    function _ap_(section){
     var
      _aq_ = 1 - section[3],
      _ar_ = _aq_ ? (section[2] = find_level(section[1]), 0) : _aq_;
     return _ar_;
    }
    return caml_call2(Sections[10], _ap_, sections);
   }
   function make(name){
    var section = [0, name, 2, 0];
    try{var _an_ = caml_call2(Sections[6], sections, section); return _an_;}
    catch(_ao_){
     var _am_ = caml_wrap_exception(_ao_);
     if(_am_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_am_, 0);
     section[2] = find_level(name);
     caml_call2(Sections[4], sections, section);
     return section;
    }
   }
   function name(section){return section[1];}
   var main = make(cst_main);
   function level(section){return section[2];}
   function set_level(section, level){
    section[2] = level;
    section[3] = 1;
    return 0;
   }
   function reset_level(section){
    var
     _ak_ = section[3],
     _al_ =
       _ak_ ? (section[3] = 0, section[2] = find_level(section[1]), 0) : _ak_;
    return _al_;
   }
   function load_rules$0(opt, str){
    if(opt) var sth = opt[1], fail_on_error = sth; else var fail_on_error = 0;
    load_rules(str, fail_on_error);
    return recompute_levels(0);
   }
   function add_rule(pattern, level){
    var _aj_ = rules[1];
    rules[1] = [0, [0, split(pattern), level], _aj_];
    return recompute_levels(0);
   }
   function append_rule(pattern, level){
    var _ai_ = [0, [0, split(pattern), level], 0];
    rules[1] = caml_call2(Stdlib[37], rules[1], _ai_);
    return recompute_levels(0);
   }
   function reset_rules(param){rules[1] = 0; return recompute_levels(0);}
   var
    Logger_closed =
      [248, cst_Lwt_log_core_Logger_closed, runtime.caml_fresh_oo_id(0)];
   function close(logger){
    logger[1] = 1;
    var _ag_ = logger[3], _ah_ = runtime.caml_obj_tag(_ag_);
    return 250 === _ah_
            ? _ag_[1]
            : 246 === _ah_ ? caml_call1(CamlinternalLazy[2], _ag_) : _ag_;
   }
   function make$0(output, close){
    return [0, 0, output, caml_call1(Stdlib_Lazy[6], close)];
   }
   function broadcast(loggers){
    var _ae_ = Lwt[4];
    return make$0
            (function(section, level, lines){
              function _af_(logger){
               return caml_call3(logger[2], section, level, lines);
              }
              return caml_call2(Lwt_list[2], _af_, loggers);
             },
             _ae_);
   }
   function dispatch(f){
    var _ad_ = Lwt[4];
    return make$0
            (function(section, level, lines){
              return caml_call3
                      (caml_call2(f, section, level)[2], section, level, lines);
             },
             _ad_);
   }
   var location_key = caml_call1(Lwt[49], 0);
   function render(buffer, template, section, level, message){
    var match = caml_call1(Lwt[50], location_key);
    if(match)
     var loc = match[1], column = loc[3], line = loc[2], file$0 = loc[1];
    else
     var column = -1, line = -1, file$0 = file;
    function _ac_(var$0){
     return caml_string_notequal(var$0, "level")
             ? caml_string_notequal
                (var$0, "loc-column")
               ? caml_string_notequal
                  (var$0, "loc-file")
                 ? caml_string_notequal
                    (var$0, "loc-line")
                   ? caml_string_notequal
                      (var$0, "message")
                     ? caml_string_notequal
                        (var$0, "section")
                       ? caml_call3(Stdlib_Printf[10], Stdlib[1], _m_, var$0)
                       : section[1]
                     : message
                   : caml_call1(Stdlib[33], line)
                 : file$0
               : caml_call1(Stdlib[33], column)
             : string_of_level(level);
    }
    return caml_call3(Stdlib_Buffer[20], buffer, _ac_, template);
   }
   var
    _n_ = Lwt[4],
    null$0 = make$0(function(section, level, lines){return Lwt[36];}, _n_),
    default$0 = [0, null$0];
   function split$0(str){
    var
     r = [0, 0],
     j = [0, caml_ml_string_length(str)],
     ___ = caml_ml_string_length(str) - 1 | 0;
    if(___ >= 0){
     var i = ___;
     for(;;){
      if(runtime.caml_string_unsafe_get(str, i) === 10){
       var _aa_ = r[1];
       r[1] =
        [0,
         caml_call3(Stdlib_String[15], str, i + 1 | 0, (j[1] - i | 0) - 1 | 0),
         _aa_];
       j[1] = i;
      }
      var _ab_ = i - 1 | 0;
      if(0 === i) break;
      var i = _ab_;
     }
    }
    var _$_ = r[1];
    return [0, caml_call3(Stdlib_String[15], str, 0, j[1]), _$_];
   }
   function log(exn, opt, location, logger, level, message){
    if(opt) var sth = opt[1], section = sth; else var section = main;
    if(logger)
     var logger$0 = logger[1], logger$1 = logger$0;
    else
     var logger$1 = default$0[1];
    if(logger$1[1]) return caml_call1(Lwt[5], Logger_closed);
    if(section[2] > level) return Lwt[36];
    if(! exn){
     var
      _X_ =
        function(param){
         var _Z_ = split$0(message);
         return caml_call3(logger$1[2], section, level, _Z_);
        };
     return caml_call3(Lwt[51], location_key, location, _X_);
    }
    var
     exn$0 = exn[1],
     bt =
       caml_call1(Stdlib_Printexc[8], 0)
        ? caml_call1(Stdlib_Printexc[6], 0)
        : cst$0,
     _T_ = caml_call1(Stdlib_Printexc[1], exn$0),
     _U_ = caml_call2(Stdlib[28], cst, _T_),
     message$0 = caml_call2(Stdlib[28], message, _U_);
    if(0 === caml_ml_string_length(bt))
     var message$1 = message$0;
    else
     var
      _W_ = caml_call2(Stdlib[28], cst_backtrace, bt),
      message$1 = caml_call2(Stdlib[28], message$0, _W_);
    function _V_(param){
     var _Y_ = split$0(message$1);
     return caml_call3(logger$1[2], section, level, _Y_);
    }
    return caml_call3(Lwt[51], location_key, location, _V_);
   }
   function log_f(exn, section, location, logger, level, format){
    function _R_(_S_){return log(exn, section, location, logger, level, _S_);}
    return caml_call2(Stdlib_Printf[10], _R_, format);
   }
   function ign_log(exn, section, location, logger, level, message){
    try{
     log(exn, section, location, logger, level, message);
     var _P_ = 0;
     return _P_;
    }
    catch(_Q_){return 0;}
   }
   function ign_log_f(exn, section, location, logger, level, format){
    function _N_(_O_){
     return ign_log(exn, section, location, logger, level, _O_);
    }
    return caml_call2(Stdlib_Printf[10], _N_, format);
   }
   function debug(exn, section, location, logger, msg){
    return log(exn, section, location, logger, 0, msg);
   }
   function debug_f(exn, section, location, logger, fmt){
    function _L_(_M_){return debug(exn, section, location, logger, _M_);}
    return caml_call2(Stdlib_Printf[10], _L_, fmt);
   }
   function info(exn, section, location, logger, msg){
    return log(exn, section, location, logger, 1, msg);
   }
   function info_f(exn, section, location, logger, fmt){
    function _J_(_K_){return info(exn, section, location, logger, _K_);}
    return caml_call2(Stdlib_Printf[10], _J_, fmt);
   }
   function notice(exn, section, location, logger, msg){return log(exn, section, location, logger, 2, msg);
   }
   function notice_f(exn, section, location, logger, fmt){
    function _H_(_I_){return notice(exn, section, location, logger, _I_);}
    return caml_call2(Stdlib_Printf[10], _H_, fmt);
   }
   function warning(exn, section, location, logger, msg){return log(exn, section, location, logger, 3, msg);
   }
   function warning_f(exn, section, location, logger, fmt){
    function _F_(_G_){return warning(exn, section, location, logger, _G_);}
    return caml_call2(Stdlib_Printf[10], _F_, fmt);
   }
   function error(exn, section, location, logger, msg){
    return log(exn, section, location, logger, 4, msg);
   }
   function error_f(exn, section, location, logger, fmt){
    function _D_(_E_){return error(exn, section, location, logger, _E_);}
    return caml_call2(Stdlib_Printf[10], _D_, fmt);
   }
   function fatal(exn, section, location, logger, msg){
    return log(exn, section, location, logger, 5, msg);
   }
   function fatal_f(exn, section, location, logger, fmt){
    function _B_(_C_){return fatal(exn, section, location, logger, _C_);}
    return caml_call2(Stdlib_Printf[10], _B_, fmt);
   }
   function ign_debug(exn, section, location, logger, msg){
    return ign_log(exn, section, location, logger, 0, msg);
   }
   function ign_debug_f(exn, section, location, logger, fmt){
    function _z_(_A_){return ign_debug(exn, section, location, logger, _A_);}
    return caml_call2(Stdlib_Printf[10], _z_, fmt);
   }
   function ign_info(exn, section, location, logger, msg){
    return ign_log(exn, section, location, logger, 1, msg);
   }
   function ign_info_f(exn, section, location, logger, fmt){
    function _x_(_y_){return ign_info(exn, section, location, logger, _y_);}
    return caml_call2(Stdlib_Printf[10], _x_, fmt);
   }
   function ign_notice(exn, section, location, logger, msg){return ign_log(exn, section, location, logger, 2, msg);
   }
   function ign_notice_f(exn, section, location, logger, fmt){
    function _v_(_w_){return ign_notice(exn, section, location, logger, _w_);}
    return caml_call2(Stdlib_Printf[10], _v_, fmt);
   }
   function ign_warning(exn, section, location, logger, msg){return ign_log(exn, section, location, logger, 3, msg);
   }
   function ign_warning_f(exn, section, location, logger, fmt){
    function _t_(_u_){
     return ign_warning(exn, section, location, logger, _u_);
    }
    return caml_call2(Stdlib_Printf[10], _t_, fmt);
   }
   function ign_error(exn, section, location, logger, msg){
    return ign_log(exn, section, location, logger, 4, msg);
   }
   function ign_error_f(exn, section, location, logger, fmt){
    function _r_(_s_){return ign_error(exn, section, location, logger, _s_);}
    return caml_call2(Stdlib_Printf[10], _r_, fmt);
   }
   function ign_fatal(exn, section, location, logger, msg){
    return ign_log(exn, section, location, logger, 5, msg);
   }
   function ign_fatal_f(exn, section, location, logger, fmt){
    function _p_(_q_){return ign_fatal(exn, section, location, logger, _q_);}
    return caml_call2(Stdlib_Printf[10], _p_, fmt);
   }
   var
    Lwt_log_core =
      [0,
       string_of_level,
       level_of_string,
       load_rules$0,
       add_rule,
       append_rule,
       reset_rules,
       log,
       log_f,
       ign_log,
       ign_log_f,
       debug,
       debug_f,
       ign_debug,
       ign_debug_f,
       info,
       info_f,
       ign_info,
       ign_info_f,
       notice,
       notice_f,
       ign_notice,
       ign_notice_f,
       warning,
       warning_f,
       ign_warning,
       ign_warning_f,
       error,
       error_f,
       ign_error,
       ign_error_f,
       fatal,
       fatal_f,
       ign_fatal,
       ign_fatal_f,
       [0, make, name, main, level, set_level, reset_level],
       render,
       location_key,
       Logger_closed,
       make$0,
       close,
       default$0,
       broadcast,
       dispatch,
       null$0];
   runtime.caml_register_global(54, Lwt_log_core, "Lwt_log_core");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
