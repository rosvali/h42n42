// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Re__
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Re = [0];
   runtime.caml_register_global(0, Re, "Re__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Category
//# unitInfo: Requires: Stdlib__Format
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format;
   function equal(x, y){return x === y ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function to_int(x){return x;}
   var pp = Stdlib_Format[19];
   function intersect(x, y){return 0 !== (x & y) ? 1 : 0;}
   function symbol(x, y){return x | y;}
   var
    dummy = -1,
    inexistant = 1,
    letter = 2,
    not_letter = 4,
    newline = 8,
    lastnewline = 16,
    search_boundary = 32;
   function from_char(param){
    a:
    {
     if(170 <= param)
      if(187 <= param){
       var _a_ = param - 192 | 0;
       if(54 < _a_ >>> 0){if(56 <= _a_) break a;} else if(23 !== _a_) break a;
      }
      else{
       var _b_ = param - 171 | 0;
       if(14 < _b_ >>> 0 || 10 === _b_) break a;
      }
     else if(65 <= param){
      var _c_ = param - 91 | 0;
      if(5 < _c_ >>> 0){if(32 > _c_) break a;} else if(4 === _c_) break a;
     }
     else
      if(48 <= param){
       if(58 > param) break a;
      }
      else if(10 === param) return 12;
     return not_letter;
    }
    return letter;
   }
   var
    Re_Category =
      [0,
       symbol,
       from_char,
       dummy,
       inexistant,
       letter,
       not_letter,
       newline,
       lastnewline,
       search_boundary,
       to_int,
       equal,
       compare,
       intersect,
       pp];
   runtime.caml_register_global(1, Re_Category, "Re__Category");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Fmt
//# unitInfo: Requires: Stdlib__Buffer, Stdlib__Format
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, cst_3 = "<3>", cst = "@ ";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Format = global_data.Stdlib__Format,
    pp_open_box = Stdlib_Format[1],
    open_box = Stdlib_Format[2],
    pp_close_box = Stdlib_Format[3],
    close_box = Stdlib_Format[4],
    pp_open_hbox = Stdlib_Format[5],
    open_hbox = Stdlib_Format[6],
    pp_open_vbox = Stdlib_Format[7],
    open_vbox = Stdlib_Format[8],
    pp_open_hvbox = Stdlib_Format[9],
    open_hvbox = Stdlib_Format[10],
    pp_open_hovbox = Stdlib_Format[11],
    open_hovbox = Stdlib_Format[12],
    pp_print_string = Stdlib_Format[13],
    print_string = Stdlib_Format[14],
    pp_print_bytes = Stdlib_Format[15],
    print_bytes = Stdlib_Format[16],
    pp_print_as = Stdlib_Format[17],
    print_as = Stdlib_Format[18],
    pp_print_int = Stdlib_Format[19],
    print_int = Stdlib_Format[20],
    pp_print_float = Stdlib_Format[21],
    print_float = Stdlib_Format[22],
    pp_print_char = Stdlib_Format[23],
    print_char = Stdlib_Format[24],
    pp_print_bool = Stdlib_Format[25],
    print_bool = Stdlib_Format[26],
    pp_print_space = Stdlib_Format[27],
    print_space = Stdlib_Format[28],
    pp_print_cut = Stdlib_Format[29],
    print_cut = Stdlib_Format[30],
    pp_print_break = Stdlib_Format[31],
    print_break = Stdlib_Format[32],
    pp_print_custom_break = Stdlib_Format[33],
    pp_force_newline = Stdlib_Format[34],
    force_newline = Stdlib_Format[35],
    pp_print_if_newline = Stdlib_Format[36],
    print_if_newline = Stdlib_Format[37],
    pp_print_flush = Stdlib_Format[38],
    print_flush = Stdlib_Format[39],
    pp_print_newline = Stdlib_Format[40],
    print_newline = Stdlib_Format[41],
    pp_set_margin = Stdlib_Format[42],
    set_margin = Stdlib_Format[43],
    pp_get_margin = Stdlib_Format[44],
    get_margin = Stdlib_Format[45],
    pp_set_max_indent = Stdlib_Format[46],
    set_max_indent = Stdlib_Format[47],
    pp_get_max_indent = Stdlib_Format[48],
    get_max_indent = Stdlib_Format[49],
    check_geometry = Stdlib_Format[50],
    pp_set_geometry = Stdlib_Format[51],
    set_geometry = Stdlib_Format[52],
    pp_safe_set_geometry = Stdlib_Format[53],
    safe_set_geometry = Stdlib_Format[54],
    pp_update_geometry = Stdlib_Format[55],
    update_geometry = Stdlib_Format[56],
    pp_get_geometry = Stdlib_Format[57],
    get_geometry = Stdlib_Format[58],
    pp_set_max_boxes = Stdlib_Format[59],
    set_max_boxes = Stdlib_Format[60],
    pp_get_max_boxes = Stdlib_Format[61],
    get_max_boxes = Stdlib_Format[62],
    pp_over_max_boxes = Stdlib_Format[63],
    over_max_boxes = Stdlib_Format[64],
    pp_open_tbox = Stdlib_Format[65],
    open_tbox = Stdlib_Format[66],
    pp_close_tbox = Stdlib_Format[67],
    close_tbox = Stdlib_Format[68],
    pp_set_tab = Stdlib_Format[69],
    set_tab = Stdlib_Format[70],
    pp_print_tab = Stdlib_Format[71],
    print_tab = Stdlib_Format[72],
    pp_print_tbreak = Stdlib_Format[73],
    print_tbreak = Stdlib_Format[74],
    pp_set_ellipsis_text = Stdlib_Format[75],
    set_ellipsis_text = Stdlib_Format[76],
    pp_get_ellipsis_text = Stdlib_Format[77],
    get_ellipsis_text = Stdlib_Format[78],
    String_tag = Stdlib_Format[79],
    pp_open_stag = Stdlib_Format[80],
    open_stag = Stdlib_Format[81],
    pp_close_stag = Stdlib_Format[82],
    close_stag = Stdlib_Format[83],
    pp_set_tags = Stdlib_Format[84],
    set_tags = Stdlib_Format[85],
    pp_set_print_tags = Stdlib_Format[86],
    set_print_tags = Stdlib_Format[87],
    pp_set_mark_tags = Stdlib_Format[88],
    set_mark_tags = Stdlib_Format[89],
    pp_get_print_tags = Stdlib_Format[90],
    get_print_tags = Stdlib_Format[91],
    pp_get_mark_tags = Stdlib_Format[92],
    get_mark_tags = Stdlib_Format[93],
    pp_set_formatter_out_channel = Stdlib_Format[94],
    set_formatter_out_channel = Stdlib_Format[95],
    pp_set_formatter_output_functi = Stdlib_Format[96],
    set_formatter_output_functions = Stdlib_Format[97],
    pp_get_formatter_output_functi = Stdlib_Format[98],
    get_formatter_output_functions = Stdlib_Format[99],
    pp_set_formatter_out_functions = Stdlib_Format[100],
    set_formatter_out_functions = Stdlib_Format[101],
    pp_get_formatter_out_functions = Stdlib_Format[102],
    get_formatter_out_functions = Stdlib_Format[103],
    pp_set_formatter_stag_function = Stdlib_Format[104],
    set_formatter_stag_functions = Stdlib_Format[105],
    pp_get_formatter_stag_function = Stdlib_Format[106],
    get_formatter_stag_functions = Stdlib_Format[107],
    formatter_of_out_channel = Stdlib_Format[108],
    std_formatter = Stdlib_Format[109],
    err_formatter = Stdlib_Format[110],
    formatter_of_buffer = Stdlib_Format[111],
    stdbuf = Stdlib_Format[112],
    str_formatter = Stdlib_Format[113],
    flush_str_formatter = Stdlib_Format[114],
    make_formatter = Stdlib_Format[115],
    formatter_of_out_functions = Stdlib_Format[116],
    make_symbolic_output_buffer = Stdlib_Format[117],
    clear_symbolic_output_buffer = Stdlib_Format[118],
    get_symbolic_output_buffer = Stdlib_Format[119],
    flush_symbolic_output_buffer = Stdlib_Format[120],
    add_symbolic_output_item = Stdlib_Format[121],
    formatter_of_symbolic_output_b = Stdlib_Format[122],
    pp_print_list = Stdlib_Format[123],
    pp_print_seq = Stdlib_Format[124],
    pp_print_text = Stdlib_Format[125],
    pp_print_option = Stdlib_Format[126],
    pp_print_result = Stdlib_Format[127],
    pp_print_either = Stdlib_Format[128],
    fprintf = Stdlib_Format[129],
    printf = Stdlib_Format[130],
    eprintf = Stdlib_Format[131],
    sprintf = Stdlib_Format[132],
    asprintf = Stdlib_Format[133],
    dprintf = Stdlib_Format[134],
    ifprintf = Stdlib_Format[135],
    kfprintf = Stdlib_Format[136],
    kdprintf = Stdlib_Format[137],
    ikfprintf = Stdlib_Format[138],
    ksprintf = Stdlib_Format[139],
    kasprintf = Stdlib_Format[140],
    bprintf = Stdlib_Format[141],
    kprintf = Stdlib_Format[142],
    set_all_formatter_output_funct = Stdlib_Format[143],
    get_all_formatter_output_funct = Stdlib_Format[144],
    pp_set_all_formatter_output_fu = Stdlib_Format[145],
    pp_get_all_formatter_output_fu = Stdlib_Format[146],
    pp_open_tag = Stdlib_Format[147],
    open_tag = Stdlib_Format[148],
    pp_close_tag = Stdlib_Format[149],
    close_tag = Stdlib_Format[150],
    pp_set_formatter_tag_functions = Stdlib_Format[151],
    set_formatter_tag_functions = Stdlib_Format[152],
    pp_get_formatter_tag_functions = Stdlib_Format[153],
    get_formatter_tag_functions = Stdlib_Format[154],
    _d_ = [0, [12, 59, [17, [0, cst, 1, 0], 0]], ";@ "],
    _e_ =
      [0,
       [18,
        [1, [0, [11, cst_3, 0], cst_3]],
        [12,
         91,
         [17,
          [0, cst, 1, 0],
          [15, [17, [0, cst, 1, 0], [12, 93, [17, 0, 0]]]]]]],
       "@[<3>[@ %a@ ]@]"],
    _c_ = [0, [12, 34, [2, 0, [12, 34, 0]]], '"%s"'],
    _b_ = [0, [17, [0, cst, 1, 0], [4, 0, 0, 0, 0]], "@ %d"],
    _a_ =
      [0,
       [18,
        [1, [0, [11, cst_3, 0], cst_3]],
        [12, 40, [2, 0, [17, [0, cst, 1, 0], [15, [12, 41, [17, 0, 0]]]]]]],
       "@[<3>(%s@ %a)@]"];
   function sexp(fmt, s, pp, x){
    return caml_call5(fprintf, fmt, _a_, s, pp, x);
   }
   function pair(pp1, pp2, fmt, param){
    var v2 = param[2], v1 = param[1];
    caml_call2(pp1, fmt, v1);
    caml_call2(pp_print_space, fmt, 0);
    return caml_call2(pp2, fmt, v2);
   }
   function triple(pp1, pp2, pp3, fmt, param){
    var v3 = param[3], v2 = param[2], v1 = param[1];
    caml_call2(pp1, fmt, v1);
    caml_call2(pp_print_space, fmt, 0);
    caml_call2(pp2, fmt, v2);
    caml_call2(pp_print_space, fmt, 0);
    return caml_call2(pp3, fmt, v3);
   }
   function optint(fmt, param){
    if(! param) return 0;
    var i = param[1];
    return caml_call3(fprintf, fmt, _b_, i);
   }
   function quote(fmt, s){return caml_call3(Stdlib_Format[129], fmt, _c_, s);}
   function pp_olist(pp_elem, fmt){
    var
     _g_ =
       caml_call2
        (pp_print_list,
         [0, function(fmt, param){return caml_call2(fprintf, fmt, _d_);}],
         pp_elem);
    return caml_call3(Stdlib_Format[129], fmt, _e_, _g_);
   }
   function pp_str_list(_f_){return pp_olist(quote, _f_);}
   function to_to_string(pp, x){
    var
     b = caml_call1(Stdlib_Buffer[1], 16),
     fmt = caml_call1(Stdlib_Format[111], b);
    caml_call2(pp, fmt, x);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   var
    Re_Fmt =
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string,
       pp_print_bytes,
       print_bytes,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int,
       pp_print_float,
       print_float,
       pp_print_char,
       print_char,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_update_geometry,
       update_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       std_formatter,
       err_formatter,
       formatter_of_buffer,
       stdbuf,
       str_formatter,
       flush_str_formatter,
       make_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_list,
       pp_print_seq,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       pp_print_either,
       fprintf,
       printf,
       eprintf,
       sprintf,
       asprintf,
       dprintf,
       ifprintf,
       kfprintf,
       kdprintf,
       ikfprintf,
       ksprintf,
       kasprintf,
       bprintf,
       kprintf,
       set_all_formatter_output_funct,
       get_all_formatter_output_funct,
       pp_set_all_formatter_output_fu,
       pp_get_all_formatter_output_fu,
       pp_open_tag,
       open_tag,
       pp_close_tag,
       close_tag,
       pp_set_formatter_tag_functions,
       set_formatter_tag_functions,
       pp_get_formatter_tag_functions,
       get_formatter_tag_functions,
       pp_print_list,
       pp_print_string,
       sexp,
       pair,
       triple,
       pp_print_int,
       optint,
       quote,
       pp_olist,
       pp_str_list,
       to_to_string];
   runtime.caml_register_global(7, Re_Fmt, "Re__Fmt");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Cset
//# unitInfo: Requires: Assert_failure, Re__Fmt, Stdlib, Stdlib__Format, Stdlib__List, Stdlib__Map
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_compare = runtime.caml_compare,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cany = [0, [0, 0, 255], 0],
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Format = global_data.Stdlib__Format,
    Re_Fmt = global_data.Re__Fmt,
    Stdlib_Map = global_data.Stdlib__Map,
    _c_ = [0, "lib/cset.ml", 153, 9],
    cst_Re_cset_pick = "Re_cset.pick",
    _a_ = [0, [4, 0, 0, 0, 0], "%d"],
    _b_ = [0, [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]], "%d-%d"];
   function union(l$0, l){
    var l$2 = l$0, l$1 = l;
    for(;;){
     if(! l$1) return l$2;
     if(! l$2) return l$1;
     var
      r = l$1[2],
      _n_ = l$1[1],
      c2 = _n_[2],
      c1 = _n_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
     if((c2$0 + 1 | 0) < c1) return [0, [0, c1$0, c2$0], union(r$0, l$1)];
     if((c2 + 1 | 0) < c1$0) return [0, [0, c1, c2], union(l$2, r)];
     if(c2$0 < c2)
      var
       l$3 = [0, [0, caml_call2(Stdlib[16], c1$0, c1), c2], r],
       l$2 = r$0,
       l$1 = l$3;
     else
      var
       l$4 = [0, [0, caml_call2(Stdlib[16], c1$0, c1), c2$0], r$0],
       l$2 = l$4,
       l$1 = r;
    }
   }
   function inter(l$0, l){
    var l$2 = l$0, l$1 = l;
    for(;;){
     if(! l$1) return 0;
     if(! l$2) return 0;
     var
      r = l$1[2],
      _k_ = l$1[1],
      c2 = _k_[2],
      c1 = _k_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
     if(caml_lessthan(c2$0, c1))
      var l$2 = r$0;
     else{
      if(! caml_lessthan(c2, c1$0)){
       if(caml_lessthan(c2$0, c2)){
        var _l_ = inter(r$0, l$1);
        return [0, [0, caml_call2(Stdlib[17], c1$0, c1), c2$0], _l_];
       }
       var _m_ = inter(l$2, r);
       return [0, [0, caml_call2(Stdlib[17], c1$0, c1), c2], _m_];
      }
      var l$1 = r;
     }
    }
   }
   function diff(l$0, l){
    var l$2 = l$0, l$1 = l;
    for(;;){
     if(! l$1) return l$2;
     if(! l$2) return 0;
     var
      r = l$1[2],
      _j_ = l$1[1],
      c2 = _j_[2],
      c1 = _j_[1],
      r$0 = l$2[2],
      match = l$2[1],
      c2$0 = match[2],
      c1$0 = match[1];
     if(c2$0 < c1) return [0, [0, c1$0, c2$0], diff(r$0, l$1)];
     if(c2 < c1$0)
      var l$1 = r;
     else{
      var r$1 = c2 < c2$0 ? [0, [0, c2 + 1 | 0, c2$0], r$0] : r$0;
      if(c1$0 < c1) return [0, [0, c1$0, c1 - 1 | 0], diff(r$1, r)];
      var l$2 = r$1, l$1 = r;
     }
    }
   }
   function single(c){return [0, [0, c, c], 0];}
   function add(c, l){return union(single(c), l);}
   function seq(c$0, c){
    return runtime.caml_lessequal(c$0, c)
            ? [0, [0, c$0, c], 0]
            : [0, [0, c, c$0], 0];
   }
   function offset(o, l){
    if(! l) return 0;
    var r = l[2], match = l[1], c2 = match[2], c1 = match[1];
    return [0, [0, c1 + o | 0, c2 + o | 0], offset(o, r)];
   }
   var empty = 0;
   function mem(c, s){
    var s$0 = s;
    for(;;){
     if(! s$0) return 0;
     var rem = s$0[2], match = s$0[1], c2 = match[2], c1 = match[1];
     if(c <= c2) return c1 <= c ? 1 : 0;
     var s$0 = rem;
    }
   }
   function hash_rec(param){
    if(! param) return 0;
    var r = param[2], match = param[1], j = match[2], i = match[1];
    return (i + (13 * j | 0) | 0) + (257 * hash_rec(r) | 0) | 0;
   }
   function hash(l){return hash_rec(l) & 1073741823;}
   function print_one(ch, param){
    var c2 = param[2], c1 = param[1];
    return c1 === c2
            ? caml_call3(Stdlib_Format[129], ch, _a_, c1)
            : caml_call4(Stdlib_Format[129], ch, _b_, c1, c2);
   }
   var pp = caml_call2(Re_Fmt[155], 0, print_one);
   function iter(t, f){
    var t$0 = t;
    for(;;){
     if(! t$0) return 0;
     var xs = t$0[2], match = t$0[1], y = match[2], x = match[1];
     caml_call2(f, x, y);
     var t$0 = xs;
    }
   }
   function one_char(param){
    if(param && ! param[2]){
     var match = param[1], j = match[2], i = match[1];
     if(runtime.caml_equal(i, j)) return [0, i];
    }
    return 0;
   }
   function compare(param, _i_){
    var
     v = _i_[2],
     j = _i_[1],
     u = param[2],
     i = param[1],
     c = caml_compare(i, j);
    return 0 === c ? caml_compare(u, v) : c;
   }
   var CSetMap = caml_call1(Stdlib_Map[1], [0, compare]);
   function fold_right(t, init, f){
    return caml_call3(Stdlib_List[26], f, t, init);
   }
   function csingle(c){return single(c);}
   function is_empty(param){return param ? 0 : 1;}
   function prepend(s, x, l){
    var s$0 = s;
    for(;;){
     if(! s$0) return l;
     if(! l) return 0;
     var _d_ = l[1], _e_ = _d_[1];
     if(_e_ && ! _e_[2]){
      var
       x$0 = _d_[2],
       _f_ = _e_[1],
       d = _f_[2],
       d$0 = _f_[1],
       r = s$0[2],
       match = s$0[1],
       c = match[2],
       c$0 = match[1];
      if(c < d$0){var s$0 = r; continue;}
      var r$0 = l[2];
      if(c$0 > d$0)
       return d < c$0
               ? [0, [0, [0, [0, d$0, d], 0], x$0], prepend(s$0, x, r$0)]
               : [0,
                 [0, [0, [0, d$0, c$0 - 1 | 0], 0], x$0],
                 prepend(s$0, x, [0, [0, [0, [0, c$0, d], 0], x$0], r$0])];
      if(c < d){
       var _g_ = prepend(r, x, [0, [0, [0, [0, c + 1 | 0, d], 0], x$0], r$0]);
       return [0,
               [0, [0, [0, d$0, c], 0], caml_call2(Stdlib[37], x, x$0)],
               _g_];
      }
      var _h_ = prepend(s$0, x, r$0);
      return [0,
              [0, [0, [0, d$0, d], 0], caml_call2(Stdlib[37], x, x$0)],
              _h_];
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, _c_], 1);
    }
   }
   function pick(param){
    if(! param) return caml_call1(Stdlib[1], cst_Re_cset_pick);
    var x = param[1][1];
    return x;
   }
   var
    Re_Cset =
      [0,
       iter,
       union,
       inter,
       diff,
       offset,
       empty,
       single,
       seq,
       add,
       mem,
       hash,
       pp,
       one_char,
       fold_right,
       hash_rec,
       CSetMap,
       cany,
       csingle,
       is_empty,
       prepend,
       pick];
   runtime.caml_register_global(11, Re_Cset, "Re__Cset");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Pmark
//# unitInfo: Requires: Stdlib__Format, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Set = global_data.Stdlib__Set;
   function equal(x, y){return x === y ? 1 : 0;}
   var compare = runtime.caml_int_compare, r = [0, 0];
   function gen(param){r[1]++; return r[1];}
   var
    pp = Stdlib_Format[19],
    Set = caml_call1(Stdlib_Set[1], [0, compare]),
    Re_Pmark = [0, equal, compare, gen, pp, Set];
   runtime.caml_register_global(2, Re_Pmark, "Re__Pmark");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Automata
//# unitInfo: Requires: Assert_failure, Re__Category, Re__Cset, Re__Fmt, Re__Pmark, Stdlib, Stdlib__Array, Stdlib__Format, Stdlib__Hashtbl, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "()",
    cst_Exp = "(Exp",
    cst_2 = "<2>",
    cst$0 = "@ ",
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_equal = runtime.caml_equal,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    partial = [17, 0, 0],
    partial$0 = [12, 41, [17, 0, 0]],
    eps_expr = [0, 0, 0],
    Re_Fmt = global_data.Re__Fmt,
    Re_Cset = global_data.Re__Cset,
    Re_Category = global_data.Re__Category,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Re_Pmark = global_data.Re__Pmark,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    cst_eps = "eps",
    cst_cst = "cst",
    cst_alt = "alt",
    cst_seq = "seq",
    cst_rep = "rep",
    cst_mark = "mark",
    cst_erase = "erase",
    cst_before = "before",
    cst_after = "after",
    cst_pmark = "pmark",
    _n_ = [0, "lib/automata.ml", 360, 21],
    _e_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, "(Seq", [17, [0, cst$0, 1, 0], 0]]],
       "@[<2>(Seq@ "],
    _f_ = [0, [17, [0, cst$0, 1, 0], [15, [12, 41, [17, 0, 0]]]], "@ %a)@]"],
    _g_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_Exp,
         [17,
          [0, cst$0, 1, 0],
          [4,
           0,
           0,
           0,
           [17,
            [0, cst$0, 1, 0],
            [12,
             40,
             [15, [12, 41, [17, [0, cst$0, 1, 0], [11, "(eps))", partial]]]]]]]]]],
       "@[<2>(Exp@ %d@ (%a)@ (eps))@]"],
    _h_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11,
         cst_Exp,
         [17,
          [0, cst$0, 1, 0],
          [4,
           0,
           0,
           0,
           [17,
            [0, cst$0, 1, 0],
            [12, 40, [15, [12, 41, [17, [0, cst$0, 1, 0], [15, partial$0]]]]]]]]]],
       "@[<2>(Exp@ %d@ (%a)@ %a)@]"],
    _i_ =
      [0,
       [18,
        [1, [0, [11, cst_2, 0], cst_2]],
        [11, "(Match", [17, [0, cst$0, 1, 0], [15, [12, 41, [17, 0, 0]]]]]],
       "@[<2>(Match@ %a)@]"],
    _j_ = [0, [17, [0, cst$0, 1, 0], [11, "| ", 0]], "@ | "],
    _k_ = [0, [11, cst$1, 0], cst$1],
    _l_ = [0, 0, 0],
    _d_ = [1, 0],
    cst_Non_greedy = "Non_greedy",
    cst_Greedy = "Greedy",
    cst_first = "first",
    cst_short = "short",
    cst_long = "long",
    _c_ = [0, [12, 32, [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]]], " %d-%d"],
    _b_ = [0, [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]], "%d-%d"];
   function hash_combine(h, accu){return (accu * 65599 | 0) + h | 0;}
   var empty = [0, 0, Re_Pmark[5][1]];
   function merge_marks_offset(old, param){
    if(! param) return old;
    var
     rem = param[2],
     match = param[1],
     v = match[2],
     i = match[1],
     nw = merge_marks_offset(caml_call2(Stdlib_List[53], i, old), rem);
    return -2 === v ? nw : [0, [0, i, v], nw];
   }
   function merge(old, nw){
    var _aV_ = caml_call2(Re_Pmark[5][7], old[2], nw[2]);
    return [0, merge_marks_offset(old[1], nw[1]), _aV_];
   }
   function hash(m, accu$1){
    var
     accu$2 = hash_combine(caml_call1(Stdlib_Hashtbl[28], m[2]), accu$1),
     l$0 = m[1],
     l = l$0,
     accu = accu$2;
    for(;;){
     if(! l) return accu;
     var
      r = l[2],
      match = l[1],
      i = match[2],
      a = match[1],
      accu$0 = hash_combine(a, hash_combine(i, accu)),
      l = r,
      accu = accu$0;
    }
   }
   function _a_(idx, marks){
    if(marks){
     var _aU_ = marks[1];
     if(-1 === _aU_[2]){
      var rem = marks[2], a = _aU_[1];
      return [0, [0, a, idx], _a_(idx, rem)];
     }
    }
    return marks;
   }
   function marks_set_idx(marks, idx){
    var _aT_ = marks[2];
    return [0, _a_(idx, marks[1]), _aT_];
   }
   function pp_marks(ch, t){
    var _aR_ = t[1];
    if(! _aR_) return 0;
    var r = _aR_[2], match = _aR_[1], i = match[2], a = match[1];
    caml_call4(Stdlib_Format[129], ch, _b_, a, i);
    function _aS_(param){
     var i = param[2], a = param[1];
     return caml_call4(Stdlib_Format[129], ch, _c_, a, i);
    }
    return caml_call2(Stdlib_List[17], _aS_, r);
   }
   function pp_sem(ch, k){
    var
     _aQ_ =
       -730718166 === k ? cst_long : 332064784 <= k ? cst_first : cst_short;
    return caml_call2(Stdlib_Format[13], ch, _aQ_);
   }
   function pp_rep_kind(fmt, param){
    return 620821490 <= param
            ? caml_call2(Stdlib_Format[13], fmt, cst_Non_greedy)
            : caml_call2(Stdlib_Format[13], fmt, cst_Greedy);
   }
   function pp(ch, e){
    var match = e[2];
    if(typeof match === "number") return caml_call2(Re_Fmt[156], ch, cst_eps);
    switch(match[0]){
      case 0:
       var l = match[1];
       return caml_call4(Re_Fmt[157], ch, cst_cst, Re_Cset[12], l);
      case 1:
       var l$0 = match[1], _aM_ = caml_call2(Re_Fmt[155], 0, pp);
       return caml_call4(Re_Fmt[157], ch, cst_alt, _aM_, l$0);
      case 2:
       var
        e$0 = match[3],
        e$1 = match[2],
        k = match[1],
        _aN_ = caml_call3(Re_Fmt[159], pp_sem, pp, pp);
       return caml_call4(Re_Fmt[157], ch, cst_seq, _aN_, [0, k, e$1, e$0]);
      case 3:
       var
        e$2 = match[3],
        k$0 = match[2],
        _aO_ = caml_call2(Re_Fmt[158], pp_sem, pp);
       return caml_call4(Re_Fmt[157], ch, cst_rep, _aO_, [0, k$0, e$2]);
      case 4:
       var i = match[1];
       return caml_call4(Re_Fmt[157], ch, cst_mark, Re_Fmt[160], i);
      case 5:
       var
        e$3 = match[2],
        b = match[1],
        _aP_ = caml_call2(Re_Fmt[158], Re_Fmt[160], Re_Fmt[160]);
       return caml_call4(Re_Fmt[157], ch, cst_erase, _aP_, [0, b, e$3]);
      case 6:
       var c = match[1];
       return caml_call4(Re_Fmt[157], ch, cst_before, Re_Category[14], c);
      case 7:
       var c$0 = match[1];
       return caml_call4(Re_Fmt[157], ch, cst_after, Re_Category[14], c$0);
      default:
       var i$0 = match[1];
       return caml_call4(Re_Fmt[157], ch, cst_pmark, Re_Fmt[160], i$0);
    }
   }
   function first(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var r = param$0[2], x = param$0[1], res = caml_call1(f, x);
     if(res) return res;
     var param$0 = r;
    }
   }
   function create_ids(param){return [0, 0];}
   function mk_expr(ids, def){ids[1]++; return [0, ids[1], def];}
   function empty$0(ids){return mk_expr(ids, _d_);}
   function cst(ids, s){
    return caml_call1(Re_Cset[19], s) ? empty$0(ids) : mk_expr(ids, [0, s]);
   }
   function alt(ids, l){
    if(! l) return empty$0(ids);
    if(l[2]) return mk_expr(ids, [1, l]);
    var c = l[1];
    return c;
   }
   function seq(ids, kind, x, y){
    var _aK_ = x[2], _aL_ = y[2];
    if(typeof _aK_ !== "number" && 1 === _aK_[0] && ! _aK_[1]) return x;
    if(typeof _aL_ !== "number" && 1 === _aL_[0] && ! _aL_[1]) return y;
    if(typeof _aK_ === "number") return y;
    if(typeof _aL_ === "number" && 332064784 === kind) return x;
    return mk_expr(ids, [2, kind, x, y]);
   }
   function is_eps(expr){return typeof expr[2] === "number" ? 1 : 0;}
   function eps(ids){return mk_expr(ids, 0);}
   function rep(ids, kind, sem, x){return mk_expr(ids, [3, kind, sem, x]);}
   function mark(ids, m){return mk_expr(ids, [4, m]);}
   function pmark(ids, i){return mk_expr(ids, [8, i]);}
   function erase(ids, m$0, m){return mk_expr(ids, [5, m$0, m]);}
   function before(ids, c){return mk_expr(ids, [6, c]);}
   function after(ids, c){return mk_expr(ids, [7, c]);}
   function rename(ids, x){
    var match = x[2];
    if(typeof match !== "number")
     switch(match[0]){
       case 1:
        var l = match[1], _aH_ = function(_aJ_){return rename(ids, _aJ_);};
        return mk_expr(ids, [1, caml_call2(Stdlib_List[19], _aH_, l)]);
       case 2:
        var z = match[3], y = match[2], k = match[1], _aI_ = rename(ids, z);
        return mk_expr(ids, [2, k, rename(ids, y), _aI_]);
       case 3:
        var y$0 = match[3], k$0 = match[2], g = match[1];
        return mk_expr(ids, [3, g, k$0, rename(ids, y$0)]);
     }
    return mk_expr(ids, x[2]);
   }
   function equal(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      var _az_ = l1$0[1];
      switch(_az_[0]){
        case 0:
         if(l2$0){
          var match = l2$0[1], r1 = l1$0[2], e1 = _az_[2], l1$1 = _az_[1];
          if(0 === match[0]){
           var
            r2 = l2$0[2],
            e2 = match[2],
            l2$1 = match[1],
            _aA_ = e1[1] === e2[1] ? 1 : 0;
           if(_aA_){
            var _aB_ = equal(l1$1, l2$1);
            if(_aB_){var l1$0 = r1, l2$0 = r2; continue;}
            var _aC_ = _aB_;
           }
           else
            var _aC_ = _aA_;
           return _aC_;
          }
         }
         break;
        case 1:
         if(l2$0){
          var
           match$0 = l2$0[1],
           r1$0 = l1$0[2],
           e1$0 = _az_[2],
           marks1 = _az_[1];
          if(1 === match$0[0]){
           var
            r2$0 = l2$0[2],
            e2$0 = match$0[2],
            marks2 = match$0[1],
            _aD_ = e1$0[1] === e2$0[1] ? 1 : 0;
           if(_aD_){
            var _aE_ = caml_equal(marks1, marks2);
            if(_aE_){var l1$0 = r1$0, l2$0 = r2$0; continue;}
            var _aF_ = _aE_;
           }
           else
            var _aF_ = _aD_;
           return _aF_;
          }
         }
         break;
        default:
         if(l2$0){
          var match$1 = l2$0[1], r1$1 = l1$0[2], marks1$0 = _az_[1];
          if(2 === match$1[0]){
           var
            r2$1 = l2$0[2],
            marks2$0 = match$1[1],
            _aG_ = caml_equal(marks1$0, marks2$0);
           if(! _aG_) return _aG_;
           var l1$0 = r1$1, l2$0 = r2$1;
           continue;
          }
         }
      }
     }
     else if(! l2$0) return 1;
     return 0;
    }
   }
   function hash$0(l, accu){
    var l$0 = l, accu$0 = accu;
    for(;;){
     if(! l$0) return accu$0;
     var match = l$0[1];
     switch(match[0]){
       case 0:
        var
         r = l$0[2],
         e = match[2],
         l$1 = match[1],
         _ax_ = hash$0(l$1, accu$0),
         accu$1 = hash_combine(388635598, hash_combine(e[1], _ax_)),
         l$0 = r,
         accu$0 = accu$1;
        break;
       case 1:
        var
         r$0 = l$0[2],
         e$0 = match[2],
         marks = match[1],
         _ay_ = hash(marks, accu$0),
         accu$2 = hash_combine(726404471, hash_combine(e$0[1], _ay_)),
         l$0 = r$0,
         accu$0 = accu$2;
        break;
       default:
        var
         r$1 = l$0[2],
         marks$0 = match[1],
         accu$3 = hash_combine(471882453, hash(marks$0, accu$0)),
         l$0 = r$1,
         accu$0 = accu$3;
     }
    }
   }
   function tseq(kind, x, y, rem){
    if(! x) return rem;
    var _aw_ = x[1];
    if(1 === _aw_[0] && typeof _aw_[2][2] === "number" && ! x[2]){var marks = _aw_[1]; return [0, [1, marks, y], rem];}
    return [0, [0, x, y, kind], rem];
   }
   function print_state_rec(ch, e, y){
    switch(e[0]){
      case 0:
       var x = e[2], l = e[1];
       caml_call2(Stdlib_Format[129], ch, _e_);
       print_state_lst(ch, l, x);
       return caml_call4(Stdlib_Format[129], ch, _f_, pp, x);
      case 1:
       var marks = e[1];
       if(typeof e[2][2] === "number")
        return caml_call5(Stdlib_Format[129], ch, _g_, y[1], pp_marks, marks);
       var x$0 = e[2];
       return caml_call7
               (Stdlib_Format[129], ch, _h_, x$0[1], pp_marks, marks, pp, x$0);
      default:
       var marks$0 = e[1];
       return caml_call4(Stdlib_Format[129], ch, _i_, pp_marks, marks$0);
    }
   }
   function print_state_lst(ch, l, y){
    if(! l) return caml_call2(Stdlib_Format[129], ch, _k_);
    var rem = l[2], e = l[1];
    print_state_rec(ch, e, y);
    function _av_(e){
     caml_call2(Stdlib_Format[129], ch, _j_);
     return print_state_rec(ch, e, y);
    }
    return caml_call2(Stdlib_List[17], _av_, rem);
   }
   function pp$0(ch, t){return print_state_lst(ch, [0, t, 0], _l_);}
   var dummy = [0, -1, Re_Category[3], 0, 0, -1];
   function mk(idx, cat, desc){
    return [0,
            idx,
            cat,
            desc,
            0,
            hash$0
             (desc,
              hash_combine
               (idx, hash_combine(caml_call1(Re_Category[10], cat), 0)))
            & 1073741823];
   }
   function create(cat, e){return mk(0, cat, [0, [1, empty, e], 0]);}
   function equal$0(x, y){
    var _ar_ = x[5] === y[5] ? 1 : 0;
    if(_ar_){
     var _as_ = x[1] === y[1] ? 1 : 0;
     if(_as_){
      var _at_ = caml_call2(Re_Category[11], x[2], y[2]);
      if(_at_) return equal(x[3], y[3]);
      var _au_ = _at_;
     }
     else
      var _au_ = _as_;
    }
    else
     var _au_ = _ar_;
    return _au_;
   }
   function hash$1(t){return t[5];}
   var Table = caml_call1(Stdlib_Hashtbl[26], [0, equal$0, hash$1]);
   function create_working_area(param){return [0, [0, 0]];}
   function index_count(w){return w[1].length - 1;}
   function mark_used_indices(tbl){
    function _am_(param){
     if(0 === param[0]){
      var l = param[1];
      return caml_call1(mark_used_indices(tbl), l);
     }
     var marks = param[1], _an_ = marks[1];
     function _ao_(param){
      var
       i = param[2],
       _ap_ = 0 <= i ? 1 : 0,
       _aq_ = _ap_ ? (caml_check_bound(tbl, i)[1 + i] = 1, 0) : _ap_;
      return _aq_;
     }
     return caml_call2(Stdlib_List[17], _ao_, _an_);
    }
    return caml_call1(Stdlib_List[17], _am_);
   }
   function free_index(tbl_ref, l){
    var tbl = tbl_ref[1];
    caml_call4(Stdlib_Array[9], tbl, 0, tbl.length - 1, 0);
    caml_call1(mark_used_indices(tbl), l);
    var len = tbl.length - 1, idx = 0;
    for(;;){
     if(idx !== len && caml_check_bound(tbl, idx)[1 + idx]){var idx$0 = idx + 1 | 0, idx = idx$0; continue;}
     if(idx === len) tbl_ref[1] = caml_make_vect(2 * len | 0, 0);
     return idx;
    }
   }
   function _m_(param){return 2 === param[0] ? 0 : 1;}
   var remove_matches = caml_call1(Stdlib_List[41], _m_);
   function split_at_match(l$1){
    var l = 0, param = l$1;
    for(;;){
     if(! param)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _n_], 1);
     var x = param[1];
     if(2 === x[0]){
      var r$0 = param[2], _al_ = caml_call1(remove_matches, r$0);
      return [0, caml_call1(Stdlib_List[9], l), _al_];
     }
     var r = param[2], l$0 = [0, x, l], l = l$0, param = r;
    }
   }
   function remove_duplicates(prev, l, y){
    var l$0 = l;
    for(;;){
     if(! l$0) return [0, 0, prev];
     var x = l$0[1];
     switch(x[0]){
       case 0:
        var
         r = l$0[2],
         kind = x[3],
         x$0 = x[2],
         l$1 = x[1],
         match = remove_duplicates(prev, l$1, x$0),
         prev$0 = match[2],
         l$2 = match[1],
         match$0 = remove_duplicates(prev$0, r, y),
         prev$1 = match$0[2],
         r$0 = match$0[1];
        return [0, tseq(kind, l$2, x$0, r$0), prev$1];
       case 1:
        if(typeof x[2][2] === "number"){
         var r$1 = l$0[2];
         if(! caml_call2(Stdlib_List[37], y[1], prev)){
          var
           match$1 = remove_duplicates([0, y[1], prev], r$1, y),
           prev$2 = match$1[2],
           r$2 = match$1[1];
          return [0, [0, x, r$2], prev$2];
         }
         var l$0 = r$1;
        }
        else{
         var r$3 = l$0[2], x$1 = x[2];
         if(! caml_call2(Stdlib_List[37], x$1[1], prev)){
          var
           match$2 = remove_duplicates([0, x$1[1], prev], r$3, y),
           prev$3 = match$2[2],
           r$4 = match$2[1];
          return [0, [0, x, r$4], prev$3];
         }
         var l$0 = r$3;
        }
        break;
       default: return [0, [0, x, 0], prev];
     }
    }
   }
   function set_idx(idx, param){
    if(! param) return 0;
    var match = param[1];
    switch(match[0]){
      case 0:
       var
        r = param[2],
        kind = match[3],
        x = match[2],
        l = match[1],
        _ai_ = set_idx(idx, r);
       return [0, [0, set_idx(idx, l), x, kind], _ai_];
      case 1:
       var
        r$0 = param[2],
        x$0 = match[2],
        marks = match[1],
        _aj_ = set_idx(idx, r$0);
       return [0, [1, marks_set_idx(marks, idx), x$0], _aj_];
      default:
       var r$1 = param[2], marks$0 = match[1], _ak_ = set_idx(idx, r$1);
       return [0, [2, marks_set_idx(marks$0, idx)], _ak_];
    }
   }
   function filter_marks(b, e, marks){
    var _ad_ = marks[2], _ae_ = marks[1];
    function _af_(param){
     var i = param[1], _ag_ = i < b ? 1 : 0, _ah_ = _ag_ || (e < i ? 1 : 0);
     return _ah_;
    }
    return [0, caml_call2(Stdlib_List[41], _af_, _ae_), _ad_];
   }
   function delta_1$0(counter, marks, c, next_cat, prev_cat, x, rem){
    var match = x[2];
    if(typeof match === "number") return [0, [2, marks], rem];
    switch(match[0]){
      case 0:
       var s = match[1];
       return caml_call2(Re_Cset[10], c, s)
               ? [0, [1, marks, eps_expr], rem]
               : rem;
      case 1:
       var l = match[1];
       if(counter >= 50)
        return caml_trampoline_return
                (delta_2$0, [0, marks, c, next_cat, prev_cat, l, rem]);
       var counter$0 = counter + 1 | 0;
       return delta_2$0(counter$0, marks, c, next_cat, prev_cat, l, rem);
      case 2:
       var
        z = match[3],
        y = match[2],
        kind = match[1],
        y$0 = delta_1(marks, c, next_cat, prev_cat, y, 0);
       if(counter >= 50)
        return caml_trampoline_return
                (delta_seq$0, [0, c, next_cat, prev_cat, kind, y$0, z, rem]);
       var counter$1 = counter + 1 | 0;
       return delta_seq$0(counter$1, c, next_cat, prev_cat, kind, y$0, z, rem);
      case 3:
       var
        y$1 = match[3],
        kind$0 = match[2],
        rep_kind = match[1],
        y$2 = delta_1(marks, c, next_cat, prev_cat, y$1, 0),
        match$0 =
          first
           (function(param){
             if(2 !== param[0]) return 0;
             var marks = param[1];
             return [0, marks];
            },
            y$2);
       if(match$0)
        var
         marks$0 = match$0[1],
         marks$1 = marks$0,
         y$3 = caml_call1(remove_matches, y$2);
       else
        var marks$1 = marks, y$3 = y$2;
       return 620821490 <= rep_kind
               ? [0, [2, marks], tseq(kind$0, y$3, x, rem)]
               : tseq(kind$0, y$3, x, [0, [2, marks$1], rem]);
      case 4:
       var
        i = match[1],
        _ab_ = marks[2],
        marks$2 =
          [0, [0, [0, i, -1], caml_call2(Stdlib_List[53], i, marks[1])], _ab_];
       return [0, [2, marks$2], rem];
      case 5:
       var e = match[2], b = match[1];
       return [0, [2, filter_marks(b, e, marks)], rem];
      case 6:
       var cat = match[1];
       return caml_call2(Re_Category[13], next_cat, cat)
               ? [0, [2, marks], rem]
               : rem;
      case 7:
       var cat$0 = match[1];
       return caml_call2(Re_Category[13], prev_cat, cat$0)
               ? [0, [2, marks], rem]
               : rem;
      default:
       var
        i$0 = match[1],
        _ac_ = caml_call2(Re_Pmark[5][4], i$0, marks[2]),
        marks$3 = [0, marks[1], _ac_];
       return [0, [2, marks$3], rem];
    }
   }
   function delta_2$0(counter, marks, c, next_cat, prev_cat, l, rem){
    if(! l) return rem;
    var
     r = l[2],
     y = l[1],
     _aa_ = delta_2(marks, c, next_cat, prev_cat, r, rem);
    if(counter >= 50)
     return caml_trampoline_return
             (delta_1$0, [0, marks, c, next_cat, prev_cat, y, _aa_]);
    var counter$0 = counter + 1 | 0;
    return delta_1$0(counter$0, marks, c, next_cat, prev_cat, y, _aa_);
   }
   function delta_seq$0(counter, c, next_cat, prev_cat, kind, y, z, rem){
    var
     match =
       first
        (function(param){
          if(2 !== param[0]) return 0;
          var marks = param[1];
          return [0, marks];
         },
         y);
    if(! match) return tseq(kind, y, z, rem);
    var marks = match[1];
    if(-730718166 === kind){
     var ___ = delta_1(marks, c, next_cat, prev_cat, z, rem);
     return tseq(kind, caml_call1(remove_matches, y), z, ___);
    }
    if(332064784 <= kind){
     var match$0 = split_at_match(y), y$0 = match$0[2], y$1 = match$0[1];
     return tseq
             (kind,
              y$1,
              z,
              delta_1
               (marks, c, next_cat, prev_cat, z, tseq(kind, y$0, z, rem)));
    }
    var _$_ = tseq(kind, caml_call1(remove_matches, y), z, rem);
    if(counter >= 50)
     return caml_trampoline_return
             (delta_1$0, [0, marks, c, next_cat, prev_cat, z, _$_]);
    var counter$0 = counter + 1 | 0;
    return delta_1$0(counter$0, marks, c, next_cat, prev_cat, z, _$_);
   }
   function delta_1(marks, c, next_cat, prev_cat, x, rem){
    return caml_trampoline(delta_1$0(0, marks, c, next_cat, prev_cat, x, rem));
   }
   function delta_2(marks, c, next_cat, prev_cat, l, rem){
    return caml_trampoline(delta_2$0(0, marks, c, next_cat, prev_cat, l, rem));
   }
   function delta_seq(c, next_cat, prev_cat, kind, y, z, rem){
    return caml_trampoline
            (delta_seq$0(0, c, next_cat, prev_cat, kind, y, z, rem));
   }
   function delta_4(c, next_cat, prev_cat, l, rem){
    if(! l) return rem;
    var r = l[2], y$1 = l[1], rem$0 = delta_4(c, next_cat, prev_cat, r, rem);
    switch(y$1[0]){
      case 0:
       var
        kind = y$1[3],
        z = y$1[2],
        y = y$1[1],
        y$0 = delta_4(c, next_cat, prev_cat, y, 0);
       return delta_seq(c, next_cat, prev_cat, kind, y$0, z, rem$0);
      case 1:
       var e = y$1[2], marks = y$1[1];
       return delta_1(marks, c, next_cat, prev_cat, e, rem$0);
      default: return [0, y$1, rem$0];
    }
   }
   function delta(tbl_ref, next_cat, char$0, st){
    var
     prev_cat = st[2],
     expr =
       remove_duplicates
         (0, delta_4(char$0, next_cat, prev_cat, st[3], 0), eps_expr)
        [1],
     idx = free_index(tbl_ref, expr),
     expr$0 = set_idx(idx, expr);
    return mk(idx, next_cat, expr$0);
   }
   function red_tr(l){
    var l$0 = l;
    for(;;){
     if(l$0){
      var match = l$0[2];
      if(match){
       var
        rem = match[2],
        tr2 = match[1],
        st2 = tr2[2],
        s2 = tr2[1],
        tr1 = l$0[1],
        st1 = tr1[2],
        s1 = tr1[1];
       if(! equal$0(st1, st2)) return [0, tr1, red_tr([0, tr2, rem])];
       var
        l$1 = [0, [0, caml_call2(Re_Cset[2], s1, s2), st1], rem],
        l$0 = l$1;
       continue;
      }
     }
     return l$0;
    }
   }
   function _o_(param, l){
    var x = param[2], s = param[1];
    return caml_call3(Re_Cset[20], s, x, l);
   }
   var prepend_deriv = caml_call1(Stdlib_List[26], _o_);
   function restrict(s, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var
      rem = param$0[2],
      match = param$0[1],
      x = match[2],
      s$0 = match[1],
      s$1 = caml_call2(Re_Cset[3], s, s$0);
     if(! caml_call1(Re_Cset[19], s$1))
      return [0, [0, s$1, x], restrict(s, rem)];
     var param$0 = rem;
    }
   }
   function prepend_marks_expr_lst(m, l){
    function _Z_(param){
     switch(param[0]){
       case 0:
        var s = param[3], e = param[2], l = param[1];
        return [0, prepend_marks_expr_lst(m, l), e, s];
       case 1:
        var e$0 = param[2], m$0 = param[1]; return [1, merge(m, m$0), e$0];
       default: var m$1 = param[1]; return [2, merge(m, m$1)];
     }
    }
    return caml_call2(Stdlib_List[19], _Z_, l);
   }
   function deriv_1$0(counter, all_chars, categories, marks, cat, x, rem$1){
    var match = x[2];
    if(typeof match === "number")
     return caml_call3(Re_Cset[20], all_chars, [0, [2, marks], 0], rem$1);
    switch(match[0]){
      case 0:
       var s = match[1];
       return caml_call3(Re_Cset[20], s, [0, [1, marks, eps_expr], 0], rem$1);
      case 1:
       var l = match[1];
       if(counter >= 50)
        return caml_trampoline_return
                (deriv_2$0, [0, all_chars, categories, marks, cat, l, rem$1]);
       var counter$0 = counter + 1 | 0;
       return deriv_2$0
               (counter$0, all_chars, categories, marks, cat, l, rem$1);
      case 2:
       var
        z = match[3],
        y = match[2],
        kind = match[1],
        y$0 =
          deriv_1
           (all_chars, categories, marks, cat, y, [0, [0, all_chars, 0], 0]);
       return deriv_seq(all_chars, categories, cat, kind, y$0, z, rem$1);
      case 3:
       var
        y$1 = match[3],
        kind$0 = match[2],
        rep_kind = match[1],
        y$2 =
          deriv_1
           (all_chars, categories, marks, cat, y$1, [0, [0, all_chars, 0], 0]),
        _S_ =
          function(param, rem){
           var
            z = param[2],
            s = param[1],
            match =
              first
               (function(param){
                 if(2 !== param[0]) return 0;
                 var marks = param[1];
                 return [0, marks];
                },
                z);
           if(match)
            var
             marks$0 = match[1],
             marks$1 = marks$0,
             z$0 = caml_call1(remove_matches, z);
           else
            var marks$1 = marks, z$0 = z;
           var
            _Y_ =
              620821490 <= rep_kind
               ? [0, [2, marks], tseq(kind$0, z$0, x, 0)]
               : tseq(kind$0, z$0, x, [0, [2, marks$1], 0]);
           return caml_call3(Re_Cset[20], s, _Y_, rem);
          };
       return caml_call3(Stdlib_List[26], _S_, y$2, rem$1);
      case 4:
       var
        i = match[1],
        _T_ = marks[2],
        _U_ =
          [0,
           [2,
            [0,
             [0, [0, i, -1], caml_call2(Stdlib_List[53], i, marks[1])],
             _T_]],
           0];
       return caml_call3(Re_Cset[20], all_chars, _U_, rem$1);
      case 5:
       var
        e$1 = match[2],
        b = match[1],
        _W_ = marks[2],
        rem$2 = filter_marks(b, e$1, marks)[1],
        e = e$1,
        rem = rem$2,
        _V_ = 0;
       for(;;){
        if(e < b)
         return caml_call3
                 (Re_Cset[20], all_chars, [0, [2, [0, rem, _W_]], _V_], rem$1);
        var
         rem$0 = [0, [0, e, -2], rem],
         e$0 = e - 1 | 0,
         e = e$0,
         rem = rem$0;
       }
       break;
      case 6:
       var
        cat$0 = match[1],
        _X_ = caml_call2(Stdlib_List[48], cat$0, categories);
       return caml_call3(Re_Cset[20], _X_, [0, [2, marks], 0], rem$1);
      case 7:
       var cat$1 = match[1];
       return caml_call2(Re_Category[13], cat, cat$1)
               ? caml_call3(Re_Cset[20], all_chars, [0, [2, marks], 0], rem$1)
               : rem$1;
      default:
       return caml_call3(Re_Cset[20], all_chars, [0, [2, marks], 0], rem$1);
    }
   }
   function deriv_2$0(counter, all_chars, categories, marks, cat, l, rem){
    if(! l) return rem;
    var
     r = l[2],
     y = l[1],
     _R_ = deriv_2(all_chars, categories, marks, cat, r, rem);
    if(counter >= 50)
     return caml_trampoline_return
             (deriv_1$0, [0, all_chars, categories, marks, cat, y, _R_]);
    var counter$0 = counter + 1 | 0;
    return deriv_1$0(counter$0, all_chars, categories, marks, cat, y, _R_);
   }
   function deriv_1(all_chars, categories, marks, cat, x, rem){
    return caml_trampoline
            (deriv_1$0(0, all_chars, categories, marks, cat, x, rem));
   }
   function deriv_2(all_chars, categories, marks, cat, l, rem){
    return caml_trampoline
            (deriv_2$0(0, all_chars, categories, marks, cat, l, rem));
   }
   function deriv_seq(all_chars, categories, cat, kind, y, z, rem){
    function _C_(param){
     var xl = param[2];
     function _Q_(param){return 2 === param[0] ? 1 : 0;}
     return caml_call2(Stdlib_List[33], _Q_, xl);
    }
    if(caml_call2(Stdlib_List[33], _C_, y)){
     var
      z$0 =
        deriv_1
         (all_chars, categories, empty, cat, z, [0, [0, all_chars, 0], 0]),
      _D_ =
        function(param, rem){
         var
          y = param[2],
          s = param[1],
          match =
            first
             (function(param){
               if(2 !== param[0]) return 0;
               var marks = param[1];
               return [0, marks];
              },
              y);
         if(! match){
          var _P_ = tseq(kind, y, z, 0);
          return caml_call3(Re_Cset[20], s, _P_, rem);
         }
         var marks = match[1];
         function _G_(param){
          var x = param[2], s = param[1];
          return [0, s, prepend_marks_expr_lst(marks, x)];
         }
         var z$1 = caml_call1(caml_call1(Stdlib_List[19], _G_), z$0);
         if(-730718166 === kind){
          var
           _H_ = caml_call2(prepend_deriv, restrict(s, z$1), rem),
           _I_ = tseq(kind, caml_call1(remove_matches, y), z, 0);
          return caml_call3(Re_Cset[20], s, _I_, _H_);
         }
         if(332064784 <= kind){
          var
           match$0 = split_at_match(y),
           y$0 = match$0[2],
           y$1 = match$0[1],
           _J_ = tseq(kind, y$0, z, 0),
           _K_ = caml_call3(Re_Cset[20], s, _J_, rem),
           _L_ = caml_call2(prepend_deriv, restrict(s, z$1), _K_),
           _M_ = tseq(kind, y$1, z, 0);
          return caml_call3(Re_Cset[20], s, _M_, _L_);
         }
         var
          _N_ = tseq(kind, caml_call1(remove_matches, y), z, 0),
          _O_ = caml_call3(Re_Cset[20], s, _N_, rem);
         return caml_call2(prepend_deriv, restrict(s, z$1), _O_);
        };
     return caml_call3(Stdlib_List[26], _D_, y, rem);
    }
    function _E_(param, rem){
     var xl = param[2], s = param[1], _F_ = tseq(kind, xl, z, 0);
     return caml_call3(Re_Cset[20], s, _F_, rem);
    }
    return caml_call3(Stdlib_List[26], _E_, y, rem);
   }
   function deriv_4(all_chars, categories, cat, l, rem){
    if(! l) return rem;
    var
     r = l[2],
     y$1 = l[1],
     rem$0 = deriv_4(all_chars, categories, cat, r, rem);
    switch(y$1[0]){
      case 0:
       var
        kind = y$1[3],
        z = y$1[2],
        y = y$1[1],
        y$0 =
          deriv_4(all_chars, categories, cat, y, [0, [0, all_chars, 0], 0]);
       return deriv_seq(all_chars, categories, cat, kind, y$0, z, rem$0);
      case 1:
       var e = y$1[2], marks = y$1[1];
       return deriv_1(all_chars, categories, marks, cat, e, rem$0);
      default: return caml_call3(Re_Cset[20], all_chars, [0, y$1, 0], rem$0);
    }
   }
   function deriv(tbl_ref, all_chars, categories, st){
    var
     der =
       deriv_4(all_chars, categories, st[2], st[3], [0, [0, all_chars, 0], 0]),
     _x_ = 0;
    function _y_(param, rem){
     var
      expr = param[2],
      s = param[1],
      expr$0 = remove_duplicates(0, expr, eps_expr)[1],
      idx = free_index(tbl_ref, expr$0),
      expr$1 = set_idx(idx, expr$0);
     function _B_(param, rem){
      var
       s$0 = param[2],
       cat = param[1],
       s$1 = caml_call2(Re_Cset[3], s, s$0);
      return caml_call1(Re_Cset[19], s$1)
              ? rem
              : [0, [0, s$1, mk(idx, cat, expr$1)], rem];
     }
     return caml_call3(Stdlib_List[26], _B_, categories, rem);
    }
    var l = caml_call3(Stdlib_List[26], _y_, der, _x_);
    function _u_(param, _A_){
     var
      st2 = _A_[2],
      st1 = param[2],
      c = runtime.caml_int_compare(st1[5], st2[5]);
     if(0 !== c) return c;
     var c$0 = caml_call2(Re_Category[12], st1[2], st2[2]);
     return 0 === c$0 ? caml_compare(st1[3], st2[3]) : c$0;
    }
    var _v_ = red_tr(caml_call2(Stdlib_List[56], _u_, l));
    function _w_(param, _z_){
     var s2 = _z_[1], s1 = param[1];
     return caml_compare(s1, s2);
    }
    return caml_call2(Stdlib_List[56], _w_, _v_);
   }
   function status(s){
    var match = s[4];
    if(match){var st = match[1]; return st;}
    var _s_ = s[3];
    if(_s_){
     var match$0 = _s_[1];
     if(2 === match$0[0]){
      var
       m = match$0[1],
       m$0 = m[1],
       _t_ = m[2],
       _p_ = -1,
       _q_ =
         function(ma, param){
          var i = param[1];
          return caml_call2(Stdlib[17], ma, i);
         },
       ma = caml_call3(Stdlib_List[25], _q_, _p_, m$0),
       res = caml_make_vect(ma + 1 | 0, -1),
       _r_ =
         function(param){
          var v = param[2], i = param[1];
          caml_check_bound(res, i)[1 + i] = v;
          return 0;
         };
      caml_call2(Stdlib_List[17], _r_, m$0);
      var st$0 = [0, res, _t_];
     }
     else
      var st$0 = 1;
    }
    else
     var st$0 = 0;
    s[4] = [0, st$0];
    return st$0;
   }
   var
    Re_Automata =
      [0,
       pp_sem,
       pp_rep_kind,
       is_eps,
       pp,
       create_ids,
       cst,
       empty$0,
       alt,
       seq,
       eps,
       rep,
       mark,
       pmark,
       erase,
       before,
       after,
       rename,
       [0],
       [0, pp$0],
       [0, dummy, create, Table],
       create_working_area,
       index_count,
       delta,
       deriv,
       status];
   runtime.caml_register_global(38, Re_Automata, "Re__Automata");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Color_map
//# unitInfo: Requires: Re__Cset, Stdlib__Bytes, Stdlib__Char
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Cset = global_data.Re__Cset,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes;
   function make(param){return caml_call2(Stdlib_Bytes[1], 257, 0);}
   function flatten(cm){
    var
     c = caml_create_bytes(256),
     color_repr = caml_create_bytes(256),
     v = [0, 0];
    caml_bytes_set(c, 0, 0);
    caml_bytes_set(color_repr, 0, 0);
    var i = 1;
    for(;;){
     if(0 !== runtime.caml_bytes_get(cm, i)) v[1]++;
     caml_bytes_set(c, i, caml_call1(Stdlib_Char[1], v[1]));
     var _d_ = caml_call1(Stdlib_Char[1], i);
     caml_bytes_set(color_repr, v[1], _d_);
     var _e_ = i + 1 | 0;
     if(255 === i){
      var
       _b_ = v[1] + 1 | 0,
       _c_ = caml_call3(Stdlib_Bytes[8], color_repr, 0, v[1] + 1 | 0);
      return [0, caml_call1(Stdlib_Bytes[48], c), _c_, _b_];
     }
     var i = _e_;
    }
   }
   function split(s, cm){
    function _a_(i, j){
     caml_bytes_set(cm, i, 1);
     return caml_bytes_set(cm, j + 1 | 0, 1);
    }
    return caml_call2(Re_Cset[1], s, _a_);
   }
   var Re_Color_map = [0, make, flatten, split];
   runtime.caml_register_global(3, Re_Color_map, "Re__Color_map");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Group
//# unitInfo: Requires: Re__Fmt, Stdlib, Stdlib__Array, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    dummy_offset = [0, -1, -1],
    Re_Fmt = global_data.Re__Fmt,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    _a_ =
      [0,
       [18,
        [1, [0, 0, cst]],
        [12,
         40,
         [2,
          0,
          [11,
           " (",
           [4, 0, 0, 0, [12, 32, [4, 0, 0, 0, [11, "))", [17, 0, 0]]]]]]]]],
       "@[(%s (%d %d))@]"],
    cst_Group = "Group";
   function offset(t, i){
    if(t[2].length - 1 <= ((2 * i | 0) + 1 | 0))
     throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var _t_ = 2 * i | 0, m1 = caml_check_bound(t[2], _t_)[1 + _t_];
    if(-1 === m1) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var
     p1 = caml_check_bound(t[4], m1)[1 + m1],
     _u_ = (2 * i | 0) + 1 | 0,
     _v_ = caml_check_bound(t[2], _u_)[1 + _u_],
     p2 = caml_check_bound(t[4], _v_)[1 + _v_];
    return [0, p1, p2];
   }
   function get(t, i){
    var match = offset(t, i), p2 = match[2], p1 = match[1];
    return caml_call3(Stdlib_String[15], t[1], p1, p2 - p1 | 0);
   }
   function start(subs, i){return offset(subs, i)[1];}
   function stop(subs, i){return offset(subs, i)[2];}
   function test(t, i){
    if(t[2].length - 1 <= (2 * i | 0)) return 0;
    var _s_ = 2 * i | 0, idx = caml_check_bound(t[2], _s_)[1 + _s_];
    return -1 !== idx ? 1 : 0;
   }
   function get_opt(t, i){return test(t, i) ? [0, get(t, i)] : 0;}
   function all_offset(t){
    var
     res = caml_make_vect(t[5], dummy_offset),
     _n_ = ((t[2].length - 1) / 2 | 0) - 1 | 0,
     _m_ = 0;
    if(_n_ >= 0){
     var i = _m_;
     for(;;){
      var _o_ = 2 * i | 0, m1 = caml_check_bound(t[2], _o_)[1 + _o_];
      if(-1 !== m1){
       var
        p1 = caml_check_bound(t[4], m1)[1 + m1],
        _p_ = (2 * i | 0) + 1 | 0,
        _q_ = caml_check_bound(t[2], _p_)[1 + _p_],
        p2 = caml_check_bound(t[4], _q_)[1 + _q_];
       caml_check_bound(res, i)[1 + i] = [0, p1, p2];
      }
      var _r_ = i + 1 | 0;
      if(_n_ === i) break;
      var i = _r_;
     }
    }
    return res;
   }
   function all(t){
    var
     res = caml_make_vect(t[5], cst),
     _g_ = ((t[2].length - 1) / 2 | 0) - 1 | 0,
     _f_ = 0;
    if(_g_ >= 0){
     var i = _f_;
     for(;;){
      var _h_ = 2 * i | 0, m1 = caml_check_bound(t[2], _h_)[1 + _h_];
      if(-1 !== m1){
       var
        p1 = caml_check_bound(t[4], m1)[1 + m1],
        _i_ = (2 * i | 0) + 1 | 0,
        _j_ = caml_check_bound(t[2], _i_)[1 + _i_],
        p2 = caml_check_bound(t[4], _j_)[1 + _j_],
        _k_ = caml_call3(Stdlib_String[15], t[1], p1, p2 - p1 | 0);
       caml_check_bound(res, i)[1 + i] = _k_;
      }
      var _l_ = i + 1 | 0;
      if(_g_ === i) break;
      var i = _l_;
     }
    }
    return res;
   }
   function pp(fmt, t){
    var offsets = all_offset(t), strs = all(t);
    function _b_(i){
     var _e_ = caml_check_bound(offsets, i)[1 + i];
     return [0, caml_check_bound(strs, i)[1 + i], _e_];
    }
    var
     _c_ = caml_call2(Stdlib_Array[2], strs.length - 1, _b_),
     matches = caml_call1(Stdlib_Array[11], _c_);
    function pp_match(fmt, param){
     var match = param[2], stop = match[2], start = match[1], str = param[1];
     return caml_call5(Re_Fmt[129], fmt, _a_, str, start, stop);
    }
    var _d_ = caml_call2(Re_Fmt[155], 0, pp_match);
    return caml_call4(Re_Fmt[157], fmt, cst_Group, _d_, matches);
   }
   function nb_groups(t){return t[5];}
   var
    Re_Group =
      [0,
       get,
       get_opt,
       offset,
       start,
       stop,
       all,
       all_offset,
       test,
       nb_groups,
       pp];
   runtime.caml_register_global(8, Re_Group, "Re__Group");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Core
//# unitInfo: Requires: Assert_failure, Re__Automata, Re__Category, Re__Color_map, Re__Cset, Re__Fmt, Re__Group, Re__Pmark, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Char, Stdlib__List, Stdlib__Seq, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$2 = "",
    cst_Re_all$1 = "Re.all",
    cst_Re_replace$1 = "Re.replace",
    cst_Re_repn$1 = "Re.repn",
    cst_Re_split$1 = "Re.split",
    cst_lib_core_ml = "lib/core.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$2,
    cst$1 = cst$2,
    cst = "\t ",
    Re_Fmt = global_data.Re__Fmt,
    Re_Cset = global_data.Re__Cset,
    Re_Automata = global_data.Re__Automata,
    Re_Pmark = global_data.Re__Pmark,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Re_Category = global_data.Re__Category,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Re_Group = global_data.Re__Group,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Re_Color_map = global_data.Re__Color_map,
    Stdlib_Array = global_data.Stdlib__Array,
    _b_ = [0, [15, [17, [0, "@ ", 1, 0], [4, 0, 0, 0, [15, 0]]]], "%a@ %d%a"],
    cst_Beg_of_line = "Beg_of_line",
    cst_End_of_line = "End_of_line",
    cst_Beg_of_word = "Beg_of_word",
    cst_End_of_word = "End_of_word",
    cst_Not_bound = "Not_bound",
    cst_Beg_of_str = "Beg_of_str",
    cst_End_of_str = "End_of_str",
    cst_Last_end_of_line = "Last_end_of_line",
    cst_Start = "Start",
    cst_Stop = "Stop",
    cst_Set = "Set",
    cst_Sequence = "Sequence",
    cst_Alternative = "Alternative",
    cst_Repeat = "Repeat",
    cst_Sem = "Sem",
    cst_Sem_greedy = "Sem_greedy",
    cst_Named_group = "Named_group",
    cst_Group = "Group",
    cst_No_group = "No_group",
    cst_Nest = "Nest",
    cst_Case = "Case",
    cst_No_case = "No_case",
    cst_Intersection = "Intersection",
    cst_Complement = "Complement",
    cst_Difference = "Difference",
    cst_Pmark = "Pmark",
    _j_ = [0, cst_lib_core_ml, 695, 4],
    _H_ = [0, cst_lib_core_ml, 1162, 24],
    _I_ = [0, cst_lib_core_ml, 1173, 27],
    cst_Re_replace = cst_Re_replace$1,
    cst_Re_replace$0 = cst_Re_replace$1,
    cst_Re_split = cst_Re_split$1,
    cst_Re_split$0 = cst_Re_split$1,
    cst_Re_all = cst_Re_all$1,
    cst_Re_all$0 = cst_Re_all$1,
    cst_Re_exec_partial_detailed = "Re.exec_partial_detailed",
    cst_Re_exec_partial = "Re.exec_partial",
    cst_Re_execp = "Re.execp",
    cst_Re_exec_opt = "Re.exec_opt",
    cst_Re_exec = "Re.exec",
    cst_Re_diff = "Re.diff",
    cst_Re_compl = "Re.compl",
    cst_Re_inter = "Re.inter",
    _l_ = [0, 1],
    cst_Re_repn = cst_Re_repn$1,
    cst_Re_repn$0 = cst_Re_repn$1,
    _k_ = [0, cst_lib_core_ml, 728, 13],
    _i_ = [0, cst_lib_core_ml, 493, 35],
    _a_ = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    _h_ = [0, 170, [0, 181, [0, 186, [0, 223, [0, 255, 0]]]]];
   function iter(n, f, v){
    var n$0 = n, v$0 = v;
    for(;;){
     if(0 === n$0) return v$0;
     var v$1 = caml_call1(f, v$0), n$1 = n$0 - 1 | 0, n$0 = n$1, v$0 = v$1;
    }
   }
   var unknown = -2, break$0 = -3;
   function pp_re(ch, re){return caml_call2(Re_Automata[4], ch, re[1]);}
   function group_count(re){return re[10];}
   function group_names(re){return re[9];}
   function category(re, color){
    if(-1 === color) return Re_Category[4];
    if(color === re[6]){
     var
      _cp_ = Re_Category[6],
      _cq_ = caml_call2(Re_Category[1], Re_Category[8], Re_Category[7]);
     return caml_call2(Re_Category[1], _cq_, _cp_);
    }
    var _cr_ = caml_string_get(re[4], color);
    return caml_call1(Re_Category[2], _cr_);
   }
   var
    dummy_next = [0],
    unknown_state = [0, unknown, 0, dummy_next, 0, Re_Automata[20][1]];
   function find_state(re, desc){
    try{
     var _cn_ = caml_call2(Re_Automata[20][3][7], re[8], desc);
     return _cn_;
    }
    catch(_co_){
     var _cm_ = caml_wrap_exception(_co_);
     if(_cm_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_cm_, 0);
     var ncol = re[5], match = caml_call1(Re_Automata[25], desc);
     a:
     {
      if(typeof match === "number" && match){var break_state = 0; break a;}
      var break_state = 1;
     }
     var
      _ci_ = 0,
      _cj_ = break_state ? dummy_next : caml_make_vect(ncol, unknown_state),
      _ck_ = desc[1],
      _cl_ = break_state ? break$0 : desc[1],
      st = [0, _cl_, _ck_, _cj_, _ci_, desc];
     caml_call3(Re_Automata[20][3][5], re[8], desc, st);
     return st;
    }
   }
   function delta(info, cat, color, st){
    var
     desc = caml_call4(Re_Automata[23], info[1][7], cat, color, st[5]),
     len = info[3].length - 1,
     _cg_ = desc[1] === len ? 1 : 0,
     _ch_ = _cg_ ? 0 < len ? 1 : 0 : _cg_;
    if(_ch_){
     var pos = info[3];
     info[3] = caml_make_vect(2 * len | 0, 0);
     caml_call5(Stdlib_Array[10], pos, 0, info[3], 0, len);
    }
    return desc;
   }
   function validate(info, s, pos, st){
    var
     _cf_ = caml_string_get(s, pos),
     color = caml_string_get(info[2], _cf_),
     cat = category(info[1], color),
     desc = delta(info, cat, color, st),
     st$0 = find_state(info[1], desc);
    caml_check_bound(st[3], color)[1 + color] = st$0;
    return;
   }
   function get_color(re, s, pos){
    if(0 > pos) return -1;
    var slen = caml_ml_string_length(s);
    if(slen <= pos) return -1;
    if
     (pos === (slen - 1 | 0) && -1 !== re[6] && 10 === caml_string_get(s, pos))
     return re[6];
    var _ce_ = caml_string_get(s, pos);
    return caml_string_get(re[3], _ce_);
   }
   function scan_str(info, s, initial_state, groups){
    var pos$3 = info[4], last = info[5];
    if
     (last === caml_ml_string_length(s)
      &&
       -1 !== info[1][6]
       && pos$3 < last && 10 === caml_string_get(s, last - 1 | 0)){
     var
      info$0 = [0, info[1], info[2], info[3], info[4], last - 1 | 0],
      st$5 = scan_str(info$0, s, initial_state, groups);
     if(st$5[1] === -3) return st$5;
     var pos$4 = last - 1 | 0;
     for(;;){
      var
       _cb_ = info$0[1][6],
       st$3 = caml_check_bound(st$5[3], _cb_)[1 + _cb_];
      if(0 <= st$3[1]){
       if(groups){
        var _cc_ = st$3[1];
        caml_check_bound(info$0[3], _cc_)[1 + _cc_] = pos$4;
       }
       return st$3;
      }
      if(st$3[1] === -3){
       if(groups){
        var _cd_ = st$3[2];
        caml_check_bound(info$0[3], _cd_)[1 + _cd_] = pos$4;
       }
       return st$3;
      }
      var
       color = info$0[1][6],
       real_c = caml_string_get(info$0[2], 10),
       cat = category(info$0[1], color),
       desc = delta(info$0, cat, real_c, st$5),
       st$4 = find_state(info$0[1], desc);
      caml_check_bound(st$5[3], color)[1 + color] = st$4;
     }
    }
    if(groups){
     var pos = pos$3, st = initial_state;
     for(;;){
      if(pos >= info[5]) return st;
      var
       _b8_ = caml_string_get(s, pos),
       _b9_ = caml_string_get(info[2], _b8_),
       st$0 = caml_check_bound(st[3], _b9_)[1 + _b9_],
       idx = st$0[1];
      if(0 <= idx){
       caml_check_bound(info[3], idx)[1 + idx] = pos;
       var pos$0 = pos + 1 | 0, pos = pos$0, st = st$0;
      }
      else{
       if(idx === -3){
        var _b__ = st$0[2];
        caml_check_bound(info[3], _b__)[1 + _b__] = pos;
        return st$0;
       }
       validate(info, s, pos, st);
      }
     }
    }
    else{
     var pos$1 = pos$3, st$1 = initial_state;
     for(;;){
      if(pos$1 >= last) return st$1;
      var
       _b$_ = caml_string_get(s, pos$1),
       _ca_ = caml_string_get(info[2], _b$_),
       st$2 = caml_check_bound(st$1[3], _ca_)[1 + _ca_];
      if(0 <= st$2[1])
       var pos$2 = pos$1 + 1 | 0, pos$1 = pos$2, st$1 = st$2;
      else{if(st$2[1] === -3) return st$2; validate(info, s, pos$1, st$1);}
     }
    }
   }
   function final_boundary_check(last, slen, re, s, info, st$0, groups){
    if(last === slen)
     var
      final_cat = caml_call2(Re_Category[1], Re_Category[9], Re_Category[4]);
    else
     var
      _b6_ = category(re, get_color(re, s, last)),
      final_cat = caml_call2(Re_Category[1], Re_Category[9], _b6_);
    try{
     var _b5_ = caml_call2(Stdlib_List[48], final_cat, st$0[4]), match = _b5_;
    }
    catch(_b7_){
     var _b3_ = caml_wrap_exception(_b7_);
     if(_b3_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b3_, 0);
     var
      st = delta(info, final_cat, -1, st$0),
      _b4_ = caml_call1(Re_Automata[25], st),
      res = [0, st[1], _b4_];
     st$0[4] = [0, [0, final_cat, res], st$0[4]];
     var match = res;
    }
    var res$0 = match[2], idx = match[1];
    a:
    if(groups && typeof res$0 !== "number"){
     caml_check_bound(info[3], idx)[1 + idx] = last;
     break a;
    }
    return res$0;
   }
   function match_str(groups, partial, re, s, pos, len){
    var
     slen = caml_ml_string_length(s),
     last = -1 === len ? slen : pos + len | 0;
    if(groups)
     var
      n = caml_call1(Re_Automata[22], re[7]) + 1 | 0,
      _bX_ = 10 < n ? caml_make_vect(n, 0) : _a_.slice(),
      _bY_ = _bX_;
    else
     var _bY_ = [0];
    var info = [0, re, re[3], _bY_, pos, last];
    if(0 === pos)
     var
      initial_cat = caml_call2(Re_Category[1], Re_Category[9], Re_Category[4]);
    else
     var
      _b1_ = category(re, get_color(re, s, pos - 1 | 0)),
      initial_cat = caml_call2(Re_Category[1], Re_Category[9], _b1_);
    try{
     var
      _bW_ = caml_call2(Stdlib_List[48], initial_cat, re[2]),
      initial_state = _bW_;
    }
    catch(_b2_){
     var _bV_ = caml_wrap_exception(_b2_);
     if(_bV_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_bV_, 0);
     var
      st = find_state(re, caml_call2(Re_Automata[20][2], initial_cat, re[1]));
     re[2] = [0, [0, initial_cat, st], re[2]];
     var initial_state = st;
    }
    var st$0 = scan_str(info, s, initial_state, groups);
    a:
    {
     b:
     if(st$0[1] !== -3){
      if(partial && ! groups) break b;
      if(partial && groups){
       var status = caml_call1(Re_Automata[25], st$0[5]);
       c:
       {
        if(typeof status === "number" && status){
         var
          status$0 =
            final_boundary_check(last, slen, re, s, info, st$0, groups),
          _bZ_ = typeof status$0 === "number" ? 1 : status$0,
          _b0_ = _bZ_;
         break c;
        }
        var _b0_ = status;
       }
       var res = _b0_;
       break a;
      }
      var res = final_boundary_check(last, slen, re, s, info, st$0, groups);
      break a;
     }
     var res = caml_call1(Re_Automata[25], st$0[5]);
    }
    if(typeof res !== "number"){
     var pmarks = res[2], marks = res[1];
     return [0, [0, s, marks, pmarks, info[3], re[10]]];
    }
    if(! res) return 0;
    var no_match_starts_before = groups ? caml_check_bound(info[3], 0)[1] : 0;
    return [1, no_match_starts_before];
   }
   function cseq(c$0, c){return caml_call2(Re_Cset[8], c$0, c);}
   function cadd(c, s){return caml_call2(Re_Cset[9], c, s);}
   function view(t){return t;}
   var View = [0, view];
   function pp(fmt, t){
    function var$0(s, re){return caml_call4(Re_Fmt[157], fmt, s, pp, re);}
    function seq(s, rel){
     var _bU_ = caml_call2(Re_Fmt[155], 0, pp);
     return caml_call4(Re_Fmt[157], fmt, s, _bU_, rel);
    }
    if(typeof t === "number")
     switch(t){
       case 0:
        return caml_call2(Re_Fmt[156], fmt, cst_Beg_of_line);
       case 1:
        return caml_call2(Re_Fmt[156], fmt, cst_End_of_line);
       case 2:
        return caml_call2(Re_Fmt[156], fmt, cst_Beg_of_word);
       case 3:
        return caml_call2(Re_Fmt[156], fmt, cst_End_of_word);
       case 4:
        return caml_call2(Re_Fmt[156], fmt, cst_Not_bound);
       case 5:
        return caml_call2(Re_Fmt[156], fmt, cst_Beg_of_str);
       case 6:
        return caml_call2(Re_Fmt[156], fmt, cst_End_of_str);
       case 7:
        return caml_call2(Re_Fmt[156], fmt, cst_Last_end_of_line);
       case 8:
        return caml_call2(Re_Fmt[156], fmt, cst_Start);
       default: return caml_call2(Re_Fmt[156], fmt, cst_Stop);
     }
    switch(t[0]){
      case 0:
       var s = t[1];
       return caml_call4(Re_Fmt[157], fmt, cst_Set, Re_Cset[12], s);
      case 1:
       var sq = t[1]; return seq(cst_Sequence, sq);
      case 2:
       var alt = t[1]; return seq(cst_Alternative, alt);
      case 3:
       var
        stop = t[3],
        start = t[2],
        re = t[1],
        pp$0 =
          function(fmt, param){
           return caml_call7
                   (Re_Fmt[129], fmt, _b_, pp, re, start, Re_Fmt[161], stop);
          };
       return caml_call4(Re_Fmt[157], fmt, cst_Repeat, pp$0, 0);
      case 4:
       var
        re$0 = t[2],
        sem = t[1],
        _bP_ = caml_call2(Re_Fmt[158], Re_Automata[1], pp);
       return caml_call4(Re_Fmt[157], fmt, cst_Sem, _bP_, [0, sem, re$0]);
      case 5:
       var
        re$1 = t[2],
        k = t[1],
        _bQ_ = caml_call2(Re_Fmt[158], Re_Automata[2], pp);
       return caml_call4(Re_Fmt[157], fmt, cst_Sem_greedy, _bQ_, [0, k, re$1]);
      case 6:
       var match = t[1];
       if(match){
        var
         c = t[2],
         n = match[1],
         _bR_ = caml_call2(Re_Fmt[158], Re_Fmt[156], pp);
        return caml_call4(Re_Fmt[157], fmt, cst_Named_group, _bR_, [0, n, c]);
       }
       var c$0 = t[2];
       return var$0(cst_Group, c$0);
      case 7:
       var c$1 = t[1]; return var$0(cst_No_group, c$1);
      case 8:
       var c$2 = t[1]; return var$0(cst_Nest, c$2);
      case 9:
       var c$3 = t[1]; return var$0(cst_Case, c$3);
      case 10:
       var c$4 = t[1]; return var$0(cst_No_case, c$4);
      case 11:
       var c$5 = t[1]; return seq(cst_Intersection, c$5);
      case 12:
       var c$6 = t[1]; return seq(cst_Complement, c$6);
      case 13:
       var b = t[2], a = t[1], _bS_ = caml_call2(Re_Fmt[158], pp, pp);
       return caml_call4(Re_Fmt[157], fmt, cst_Difference, _bS_, [0, a, b]);
      default:
       var
        r = t[2],
        m = t[1],
        _bT_ = caml_call2(Re_Fmt[158], Re_Pmark[4], pp);
       return caml_call4(Re_Fmt[157], fmt, cst_Pmark, _bT_, [0, m, r]);
    }
   }
   function is_charset(param){
    var param$0 = param;
    for(;;){
     a:
     if(typeof param$0 !== "number"){
      switch(param$0[0]){
        case 0:
         return 1;
        case 13:
         var r$0 = param$0[2], r$1 = param$0[1], _bO_ = is_charset(r$1);
         if(! _bO_) return _bO_;
         var param$0 = r$0;
         continue;
        case 4:
        case 5:
         var r = param$0[2]; break;
        case 2:
        case 11:
        case 12:
         var l = param$0[1];
         return caml_call2(Stdlib_List[32], is_charset, l);
        case 7:
        case 9:
        case 10:
         var r = param$0[1]; break;
        default: break a;
      }
      var param$0 = r;
      continue;
     }
     return 0;
    }
   }
   var
    _c_ = cseq(216, 222),
    _d_ = cseq(192, 214),
    _e_ = caml_call2(Re_Cset[2], _d_, _c_),
    _f_ = cseq(65, 90),
    cupper = caml_call2(Re_Cset[2], _f_, _e_),
    clower = caml_call2(Re_Cset[5], 32, cupper),
    _g_ = caml_call2(Re_Cset[2], clower, cupper),
    calpha = caml_call3(Stdlib_List[26], cadd, _h_, _g_),
    cdigit = cseq(48, 57),
    calnum = caml_call2(Re_Cset[2], calpha, cdigit),
    cword = cadd(95, calnum);
   function equal(x1, x2){
    var x1$0 = x1, x2$0 = x2;
    for(;;){
     a:
     {
      if(typeof x1$0 === "number"){
       switch(x1$0){
         case 0:
          if(typeof x2$0 !== "number" || x2$0) break a; break;
         case 1:
          if(typeof x2$0 !== "number" || 1 !== x2$0) break a; break;
         case 2:
          if(typeof x2$0 !== "number" || 2 !== x2$0) break a; break;
         case 3:
          if(typeof x2$0 !== "number" || 3 !== x2$0) break a; break;
         case 4:
          if(typeof x2$0 !== "number" || 4 !== x2$0) break a; break;
         case 5:
          if(typeof x2$0 !== "number" || 5 !== x2$0) break a; break;
         case 6:
          if(typeof x2$0 !== "number" || 6 !== x2$0) break a; break;
         case 7:
          if(typeof x2$0 !== "number" || 7 !== x2$0) break a; break;
         case 8:
          if(typeof x2$0 !== "number" || 8 !== x2$0) break a; break;
         default: if(typeof x2$0 !== "number" || 9 > x2$0) break a;
       }
       return 1;
      }
      switch(x1$0[0]){
        case 0:
         if(typeof x2$0 !== "number" && 0 === x2$0[0]){
          var s2 = x2$0[1], s1 = x1$0[1];
          return caml_equal(s1, s2);
         }
         break;
        case 1:
         if(typeof x2$0 !== "number" && 1 === x2$0[0]){
          var l2 = x2$0[1], l1 = x1$0[1];
          return eq_list(l1, l2);
         }
         break;
        case 2:
         if(typeof x2$0 !== "number" && 2 === x2$0[0]){
          var l2$0 = x2$0[1], l1$0 = x1$0[1];
          return eq_list(l1$0, l2$0);
         }
         break;
        case 3:
         if(typeof x2$0 !== "number" && 3 === x2$0[0]){
          var
           j2 = x2$0[3],
           i2 = x2$0[2],
           x2$1 = x2$0[1],
           j1 = x1$0[3],
           i1 = x1$0[2],
           x1$1 = x1$0[1],
           _bH_ = i1 === i2 ? 1 : 0;
          if(_bH_){
           var _bI_ = caml_equal(j1, j2);
           if(_bI_){var x1$0 = x1$1, x2$0 = x2$1; continue;}
           var _bJ_ = _bI_;
          }
          else
           var _bJ_ = _bH_;
          return _bJ_;
         }
         break;
        case 4:
         if(typeof x2$0 !== "number" && 4 === x2$0[0]){
          var
           x2$2 = x2$0[2],
           sem2 = x2$0[1],
           x1$2 = x1$0[2],
           sem1 = x1$0[1],
           _bK_ = sem1 === sem2 ? 1 : 0;
          if(! _bK_) return _bK_;
          var x1$0 = x1$2, x2$0 = x2$2;
          continue;
         }
         break;
        case 5:
         if(typeof x2$0 !== "number" && 5 === x2$0[0]){
          var
           x2$3 = x2$0[2],
           k2 = x2$0[1],
           x1$3 = x1$0[2],
           k1 = x1$0[1],
           _bL_ = k1 === k2 ? 1 : 0;
          if(! _bL_) return _bL_;
          var x1$0 = x1$3, x2$0 = x2$3;
          continue;
         }
         break;
        case 6:
         if(typeof x2$0 !== "number" && 6 === x2$0[0]) return 0; break;
        case 7:
         if(typeof x2$0 !== "number" && 7 === x2$0[0]){
          var x2$4 = x2$0[1], x1$4 = x1$0[1], x1$0 = x1$4, x2$0 = x2$4;
          continue;
         }
         break;
        case 8:
         if(typeof x2$0 !== "number" && 8 === x2$0[0]){
          var x2$5 = x2$0[1], x1$5 = x1$0[1], x1$0 = x1$5, x2$0 = x2$5;
          continue;
         }
         break;
        case 9:
         if(typeof x2$0 !== "number" && 9 === x2$0[0]){
          var x2$6 = x2$0[1], x1$6 = x1$0[1], x1$0 = x1$6, x2$0 = x2$6;
          continue;
         }
         break;
        case 10:
         if(typeof x2$0 !== "number" && 10 === x2$0[0]){
          var x2$7 = x2$0[1], x1$7 = x1$0[1], x1$0 = x1$7, x2$0 = x2$7;
          continue;
         }
         break;
        case 11:
         if(typeof x2$0 !== "number" && 11 === x2$0[0]){
          var l2$1 = x2$0[1], l1$1 = x1$0[1];
          return eq_list(l1$1, l2$1);
         }
         break;
        case 12:
         if(typeof x2$0 !== "number" && 12 === x2$0[0]){
          var l2$2 = x2$0[1], l1$2 = x1$0[1];
          return eq_list(l1$2, l2$2);
         }
         break;
        case 13:
         if(typeof x2$0 !== "number" && 13 === x2$0[0]){
          var
           x2$8 = x2$0[2],
           x2$9 = x2$0[1],
           x1$8 = x1$0[2],
           x1$9 = x1$0[1],
           _bM_ = equal(x1$9, x2$9);
          if(! _bM_) return _bM_;
          var x1$0 = x1$8, x2$0 = x2$8;
          continue;
         }
         break;
        default:
         if(typeof x2$0 !== "number" && 14 === x2$0[0]){
          var
           r2 = x2$0[2],
           m2 = x2$0[1],
           r1 = x1$0[2],
           m1 = x1$0[1],
           _bN_ = caml_call2(Re_Pmark[1], m1, m2);
          if(! _bN_) return _bN_;
          var x1$0 = r1, x2$0 = r2;
          continue;
         }
      }
     }
     return 0;
    }
   }
   function eq_list(l1, l2){
    var l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        r2 = l2$0[2],
        x2 = l2$0[1],
        r1 = l1$0[2],
        x1 = l1$0[1],
        _bG_ = equal(x1, x2);
       if(! _bG_) return _bG_;
       var l1$0 = r1, l2$0 = r2;
       continue;
      }
     }
     else if(! l2$0) return 1;
     return 0;
    }
   }
   function sequence(l){
    if(l && ! l[2]){var x = l[1]; return x;}
    return [1, l];
   }
   function merge_sequences(param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var x = param$0[1];
     if(typeof x !== "number")
      switch(x[0]){
        case 1:
         var match = x[1];
         if(match){
          var
           r$0 = param$0[2],
           y = match[2],
           x$0 = match[1],
           r$1 = merge_sequences(r$0);
          a:
          if(r$1){
           var _bE_ = r$1[1];
           if(typeof _bE_ !== "number" && 1 === _bE_[0]){
            var match$0 = _bE_[1];
            if(! match$0) break a;
            var r$2 = r$1[2], y$0 = match$0[2], x$1 = match$0[1];
            if(! equal(x$0, x$1)) break a;
            var _bF_ = [0, sequence(y$0), 0];
            return [0,
                    [1, [0, x$0, [0, [2, [0, sequence(y), _bF_]], 0]]],
                    r$2];
           }
          }
          return [0, [1, [0, x$0, y]], r$1];
         }
         break;
        case 2:
         var
          r$3 = param$0[2],
          l = x[1],
          param$0 = caml_call2(Stdlib[37], l, r$3);
         continue;
      }
     var r = param$0[2];
     return [0, x, merge_sequences(r)];
    }
   }
   function enforce_kind(ids, kind$0, kind, cr){
    if(332064784 !== kind$0) return cr;
    if(332064784 === kind) return cr;
    var _bD_ = caml_call1(Re_Automata[10], ids);
    return caml_call4(Re_Automata[9], ids, kind, cr, _bD_);
   }
   function translate
   (ids, kind, ign_group, ign_case, greedy, pos, names, cache, cm, param){
    var ign_group$0 = ign_group, greedy$0 = greedy, param$0 = param;
    for(;;){
     if(typeof param$0 === "number")
      switch(param$0){
        case 0:
         var
          _a6_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[7]);
         return [0, caml_call2(Re_Automata[16], ids, _a6_), kind];
        case 1:
         var
          _a7_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[7]);
         return [0, caml_call2(Re_Automata[15], ids, _a7_), kind];
        case 2:
         var
          _a8_ = caml_call2(Re_Automata[15], ids, Re_Category[5]),
          _a9_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[6]),
          _a__ = caml_call2(Re_Automata[16], ids, _a9_);
         return [0,
                 caml_call4(Re_Automata[9], ids, 332064784, _a__, _a8_),
                 kind];
        case 3:
         var
          _a$_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[6]),
          _ba_ = caml_call2(Re_Automata[15], ids, _a$_),
          _bb_ = caml_call2(Re_Automata[16], ids, Re_Category[5]);
         return [0,
                 caml_call4(Re_Automata[9], ids, 332064784, _bb_, _ba_),
                 kind];
        case 4:
         var
          _bc_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[6]),
          _bd_ = caml_call2(Re_Automata[15], ids, _bc_),
          _be_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[6]),
          _bf_ = caml_call2(Re_Automata[16], ids, _be_),
          _bg_ =
            [0, caml_call4(Re_Automata[9], ids, 332064784, _bf_, _bd_), 0],
          _bh_ = caml_call2(Re_Automata[15], ids, Re_Category[5]),
          _bi_ = caml_call2(Re_Automata[16], ids, Re_Category[5]),
          _bj_ =
            [0, caml_call4(Re_Automata[9], ids, 332064784, _bi_, _bh_), _bg_];
         return [0, caml_call2(Re_Automata[8], ids, _bj_), kind];
        case 5:
         return [0, caml_call2(Re_Automata[16], ids, Re_Category[4]), kind];
        case 6:
         return [0, caml_call2(Re_Automata[15], ids, Re_Category[4]), kind];
        case 7:
         var
          _bk_ = caml_call2(Re_Category[1], Re_Category[4], Re_Category[8]);
         return [0, caml_call2(Re_Automata[15], ids, _bk_), kind];
        case 8:
         return [0, caml_call2(Re_Automata[16], ids, Re_Category[9]), kind];
        default:
         return [0, caml_call2(Re_Automata[15], ids, Re_Category[9]), kind];
      }
     switch(param$0[0]){
       case 0:
        var s = param$0[1], match = caml_call1(Re_Cset[13], s);
        if(match)
         var
          i = match[1],
          _a2_ = caml_string_get(cm, i),
          _bl_ = caml_call1(Re_Cset[18], _a2_);
        else{
         var v = [0, caml_call1(Re_Cset[15], s), s];
         try{var _a5_ = caml_call2(Re_Cset[16][28], v, cache[1]), _bl_ = _a5_;
         }
         catch(_bA_){
          var _a3_ = caml_wrap_exception(_bA_);
          if(_a3_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a3_, 0);
          var
           _a4_ =
             function(param, l){
              var
               j = param[2],
               i = param[1],
               _bB_ = caml_string_get(cm, j),
               _bC_ = cseq(caml_string_get(cm, i), _bB_);
              return caml_call2(Re_Cset[2], _bC_, l);
             },
           l = caml_call3(Re_Cset[14], s, Re_Cset[6], _a4_);
          cache[1] = caml_call3(Re_Cset[16][4], v, l, cache[1]);
          var _bl_ = l;
         }
        }
        return [0, caml_call2(Re_Automata[6], ids, _bl_), kind];
       case 1:
        var l$0 = param$0[1];
        return [0,
                trans_seq
                 (ids,
                  kind,
                  ign_group$0,
                  ign_case,
                  greedy$0,
                  pos,
                  names,
                  cache,
                  cm,
                  l$0),
                kind];
       case 2:
        var l$1 = param$0[1], merged_sequences = merge_sequences(l$1);
        if(merged_sequences && ! merged_sequences[2]){
         var
          r = merged_sequences[1],
          match$0 =
            translate
             (ids,
              kind,
              ign_group$0,
              ign_case,
              greedy$0,
              pos,
              names,
              cache,
              cm,
              r),
          kind$0 = match$0[2],
          cr = match$0[1];
         return [0, enforce_kind(ids, kind, kind$0, cr), kind];
        }
        var
         _bm_ =
           function(r){
            var
             match =
               translate
                (ids,
                 kind,
                 ign_group$0,
                 ign_case,
                 greedy$0,
                 pos,
                 names,
                 cache,
                 cm,
                 r),
             kind$0 = match[2],
             cr = match[1];
            return enforce_kind(ids, kind, kind$0, cr);
           },
         _bn_ = caml_call2(Stdlib_List[19], _bm_, merged_sequences);
        return [0, caml_call2(Re_Automata[8], ids, _bn_), kind];
       case 3:
        var
         j = param$0[3],
         i$0 = param$0[2],
         r$0 = param$0[1],
         match$1 =
           translate
            (ids,
             kind,
             ign_group$0,
             ign_case,
             greedy$0,
             pos,
             names,
             cache,
             cm,
             r$0),
         kind$1 = match$1[2],
         cr$0 = match$1[1];
        if(j)
         var
          j$0 = j[1],
          f =
            620821490 <= greedy$0
             ? function
              (rem){
               var
                _bu_ = caml_call2(Re_Automata[17], ids, cr$0),
                _bv_ =
                  [0, caml_call4(Re_Automata[9], ids, kind$1, _bu_, rem), 0],
                _bw_ = [0, caml_call1(Re_Automata[10], ids), _bv_];
               return caml_call2(Re_Automata[8], ids, _bw_);
              }
             : function
              (rem){
               var
                _bx_ = [0, caml_call1(Re_Automata[10], ids), 0],
                _by_ = caml_call2(Re_Automata[17], ids, cr$0),
                _bz_ =
                  [0,
                   caml_call4(Re_Automata[9], ids, kind$1, _by_, rem),
                   _bx_];
               return caml_call2(Re_Automata[8], ids, _bz_);
              },
          rem = iter(j$0 - i$0 | 0, f, caml_call1(Re_Automata[10], ids));
        else
         var rem = caml_call4(Re_Automata[11], ids, greedy$0, kind$1, cr$0);
        return [0,
                iter
                 (i$0,
                  function(rem){
                   var _bt_ = caml_call2(Re_Automata[17], ids, cr$0);
                   return caml_call4(Re_Automata[9], ids, kind$1, _bt_, rem);
                  },
                  rem),
                kind];
       case 4:
        var
         r$1 = param$0[2],
         kind$2 = param$0[1],
         match$2 =
           translate
            (ids,
             kind$2,
             ign_group$0,
             ign_case,
             greedy$0,
             pos,
             names,
             cache,
             cm,
             r$1),
         kind$3 = match$2[2],
         cr$1 = match$2[1];
        return [0, enforce_kind(ids, kind$2, kind$3, cr$1), kind$2];
       case 5:
        var
         r$2 = param$0[2],
         greedy$1 = param$0[1],
         greedy$0 = greedy$1,
         param$0 = r$2;
        break;
       case 6:
        var r$3 = param$0[2], n = param$0[1];
        if(! ign_group$0){
         var p = pos[1];
         if(n){
          var name = n[1];
          names[1] = [0, [0, name, p / 2 | 0], names[1]];
         }
         pos[1] = pos[1] + 2 | 0;
         var
          match$3 =
            translate
             (ids,
              kind,
              ign_group$0,
              ign_case,
              greedy$0,
              pos,
              names,
              cache,
              cm,
              r$3),
          kind$4 = match$3[2],
          cr$2 = match$3[1],
          _bo_ = caml_call2(Re_Automata[12], ids, p + 1 | 0),
          _bp_ = caml_call4(Re_Automata[9], ids, 332064784, cr$2, _bo_),
          _bq_ = caml_call2(Re_Automata[12], ids, p);
         return [0,
                 caml_call4(Re_Automata[9], ids, 332064784, _bq_, _bp_),
                 kind$4];
        }
        var param$0 = r$3;
        break;
       case 7:
        var r$4 = param$0[1], ign_group$0 = 1, param$0 = r$4; break;
       case 8:
        var
         r$5 = param$0[1],
         b = pos[1],
         match$4 =
           translate
            (ids,
             kind,
             ign_group$0,
             ign_case,
             greedy$0,
             pos,
             names,
             cache,
             cm,
             r$5),
         kind$5 = match$4[2],
         cr$3 = match$4[1],
         e = pos[1] - 1 | 0;
        if(e < b) return [0, cr$3, kind$5];
        var _br_ = caml_call3(Re_Automata[14], ids, b, e);
        return [0,
                caml_call4(Re_Automata[9], ids, 332064784, _br_, cr$3),
                kind$5];
       case 14:
        var
         r$6 = param$0[2],
         i$1 = param$0[1],
         match$5 =
           translate
            (ids,
             kind,
             ign_group$0,
             ign_case,
             greedy$0,
             pos,
             names,
             cache,
             cm,
             r$6),
         kind$6 = match$5[2],
         cr$4 = match$5[1],
         _bs_ = caml_call2(Re_Automata[13], ids, i$1);
        return [0,
                caml_call4(Re_Automata[9], ids, 332064784, _bs_, cr$4),
                kind$6];
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _j_], 1);
     }
    }
   }
   function trans_seq
   (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, param){
    if(! param) return caml_call1(Re_Automata[10], ids);
    var r = param[1];
    if(param[2]){
     var
      rem = param[2],
      match =
        translate
         (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, r),
      kind$0 = match[2],
      cr = match[1],
      cr$0 =
        trans_seq
         (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, rem);
     return caml_call1(Re_Automata[3], cr$0)
             ? cr
             : caml_call1
                (Re_Automata[3], cr)
               ? cr$0
               : caml_call4(Re_Automata[9], ids, kind$0, cr, cr$0);
    }
    var
     match$0 =
       translate
        (ids, kind, ign_group, ign_case, greedy, pos, names, cache, c, r),
     kind$1 = match$0[2],
     cr$1 = match$0[1];
    return enforce_kind(ids, kind, kind$1, cr$1);
   }
   function as_set(param){
    if(typeof param !== "number" && 0 === param[0]){var s = param[1]; return s;}
    throw caml_maybe_attach_backtrace([0, Assert_failure, _k_], 1);
   }
   function handle_case(ign_case, r){
    var ign_case$0 = ign_case, r$0 = r;
    for(;;){
     if(typeof r$0 === "number") return r$0;
     switch(r$0[0]){
       case 0:
        var s = r$0[1];
        if(ign_case$0)
         var
          _aD_ = caml_call2(Re_Cset[3], s, clower),
          _aE_ = caml_call2(Re_Cset[5], -32, _aD_),
          _aF_ = caml_call2(Re_Cset[3], s, cupper),
          _aG_ = caml_call2(Re_Cset[5], 32, _aF_),
          _aH_ = caml_call2(Re_Cset[2], _aG_, _aE_),
          _aI_ = caml_call2(Re_Cset[2], s, _aH_);
        else
         var _aI_ = s;
        return [0, _aI_];
       case 1:
        var
         l = r$0[1],
         _aJ_ = function(_a1_){return handle_case(ign_case$0, _a1_);};
        return [1, caml_call2(Stdlib_List[19], _aJ_, l)];
       case 2:
        var
         l$0 = r$0[1],
         _aK_ = function(_a0_){return handle_case(ign_case$0, _a0_);},
         l$1 = caml_call2(Stdlib_List[19], _aK_, l$0);
        if(! is_charset([2, l$1])) return [2, l$1];
        var
         _aL_ = Re_Cset[6],
         _aM_ =
           function(s, r){
            var _aZ_ = as_set(r);
            return caml_call2(Re_Cset[2], s, _aZ_);
           };
        return [0, caml_call3(Stdlib_List[25], _aM_, _aL_, l$1)];
       case 3:
        var j = r$0[3], i = r$0[2], r$1 = r$0[1];
        return [3, handle_case(ign_case$0, r$1), i, j];
       case 4:
        var r$2 = r$0[2], k = r$0[1], r$3 = handle_case(ign_case$0, r$2);
        return is_charset(r$3) ? r$3 : [4, k, r$3];
       case 5:
        var r$4 = r$0[2], k$0 = r$0[1], r$5 = handle_case(ign_case$0, r$4);
        return is_charset(r$5) ? r$5 : [5, k$0, r$5];
       case 6:
        var r$6 = r$0[2], n = r$0[1];
        return [6, n, handle_case(ign_case$0, r$6)];
       case 7:
        var r$7 = r$0[1], r$8 = handle_case(ign_case$0, r$7);
        return is_charset(r$8) ? r$8 : [7, r$8];
       case 8:
        var r$9 = r$0[1], r$10 = handle_case(ign_case$0, r$9);
        return is_charset(r$10) ? r$10 : [8, r$10];
       case 9:
        var r$11 = r$0[1], ign_case$0 = 0, r$0 = r$11; break;
       case 10:
        var r$12 = r$0[1], ign_case$0 = 1, r$0 = r$12; break;
       case 11:
        var
         l$2 = r$0[1],
         _aN_ = function(r){return handle_case(ign_case$0, r);},
         l$3 = caml_call2(Stdlib_List[19], _aN_, l$2),
         _aO_ = Re_Cset[17],
         _aP_ =
           function(s, r){
            var _aY_ = as_set(r);
            return caml_call2(Re_Cset[3], s, _aY_);
           };
        return [0, caml_call3(Stdlib_List[25], _aP_, _aO_, l$3)];
       case 12:
        var
         l$4 = r$0[1],
         _aQ_ = function(r){return handle_case(ign_case$0, r);},
         l$5 = caml_call2(Stdlib_List[19], _aQ_, l$4),
         _aR_ = Re_Cset[6],
         _aS_ =
           function(s, r){
            var _aX_ = as_set(r);
            return caml_call2(Re_Cset[2], s, _aX_);
           },
         _aT_ = caml_call3(Stdlib_List[25], _aS_, _aR_, l$5);
        return [0, caml_call2(Re_Cset[4], Re_Cset[17], _aT_)];
       case 13:
        var
         r$13 = r$0[2],
         r$14 = r$0[1],
         _aU_ = as_set(handle_case(ign_case$0, r$13)),
         _aV_ = caml_call2(Re_Cset[4], Re_Cset[17], _aU_),
         _aW_ = as_set(handle_case(ign_case$0, r$14));
        return [0, caml_call2(Re_Cset[3], _aW_, _aV_)];
       default:
        var r$15 = r$0[2], i$0 = r$0[1];
        return [14, i$0, handle_case(ign_case$0, r$15)];
     }
    }
   }
   function anchored(param){
    var param$0 = param;
    for(;;){
     a:
     {
      if(typeof param$0 !== "number"){
       switch(param$0[0]){
         case 1:
          var l = param$0[1]; return caml_call2(Stdlib_List[33], anchored, l);
         case 2:
          var l$0 = param$0[1];
          return caml_call2(Stdlib_List[32], anchored, l$0);
         case 3:
          var i = param$0[2], r = param$0[1], _aC_ = 0 < i ? 1 : 0;
          if(! _aC_) return _aC_;
          var param$0 = r;
          continue;
         case 4:
         case 5:
         case 6:
         case 14:
          var r$0 = param$0[2]; break;
         case 7:
         case 8:
         case 9:
         case 10:
          var r$0 = param$0[1]; break;
         default: break a;
       }
       var param$0 = r$0;
       continue;
      }
      switch(param$0){case 5:case 8: return 1;
      }
     }
     return 0;
    }
   }
   function str(s){
    var l = [0, 0], _ay_ = caml_ml_string_length(s) - 1 | 0;
    if(_ay_ >= 0){
     var i = _ay_;
     for(;;){
      var _az_ = l[1], _aA_ = caml_string_get(s, i);
      l[1] = [0, [0, caml_call1(Re_Cset[18], _aA_)], _az_];
      var _aB_ = i - 1 | 0;
      if(0 === i) break;
      var i = _aB_;
     }
    }
    return [1, l[1]];
   }
   function char$0(c){return [0, caml_call1(Re_Cset[18], c)];}
   function alt(l){if(l && ! l[2]){var r = l[1]; return r;} return [2, l];}
   function seq(l){if(l && ! l[2]){var r = l[1]; return r;} return [1, l];}
   var empty = alt(0), epsilon = seq(0);
   function repn(r, i, j){
    if(i < 0) caml_call1(Stdlib[1], cst_Re_repn);
    a:
    if(j){
     var j$0 = j[1];
     if(j$0 < i){caml_call1(Stdlib[1], cst_Re_repn$0); break a;}
    }
    return [3, r, i, j];
   }
   function rep(r){return repn(r, 0, 0);}
   function rep1(r){return repn(r, 1, 0);}
   function opt(r){return repn(r, 0, _l_);}
   var bol = 0, eol = 1, bow = 2, eow = 3;
   function word(r){return seq([0, bow, [0, r, [0, eow, 0]]]);}
   var not_boundary = 4, bos = 5, eos = 6;
   function whole_string(r){return seq([0, bos, [0, r, [0, eos, 0]]]);}
   var leol = 7, start = 8, stop = 9;
   function longest(r){return [4, -730718166, r];}
   function shortest(r){return [4, -1034406550, r];}
   function first(r){return [4, 332064784, r];}
   function greedy(r){return [5, -904640576, r];}
   function non_greedy(r){return [5, 620821490, r];}
   function group(name, r){return [6, name, r];}
   function no_group(r){return [7, r];}
   function nest(r){return [8, r];}
   function mark(r){
    var i = caml_call1(Re_Pmark[3], 0);
    return [0, i, [14, i, r]];
   }
   function set(str){
    var
     s = [0, Re_Cset[6]],
     _at_ = caml_ml_string_length(str) - 1 | 0,
     _as_ = 0;
    if(_at_ >= 0){
     var i = _as_;
     for(;;){
      var
       _au_ = s[1],
       _av_ = caml_string_get(str, i),
       _aw_ = caml_call1(Re_Cset[18], _av_);
      s[1] = caml_call2(Re_Cset[2], _aw_, _au_);
      var _ax_ = i + 1 | 0;
      if(_at_ === i) break;
      var i = _ax_;
     }
    }
    return [0, s[1]];
   }
   function rg(c$0, c){return [0, cseq(c$0, c)];}
   function inter(l){
    var r = [11, l];
    return is_charset(r) ? r : caml_call1(Stdlib[1], cst_Re_inter);
   }
   function compl(l){
    var r = [12, l];
    return is_charset(r) ? r : caml_call1(Stdlib[1], cst_Re_compl);
   }
   function diff(r$0, r){
    var r$1 = [13, r$0, r];
    return is_charset(r$1) ? r$1 : caml_call1(Stdlib[1], cst_Re_diff);
   }
   var
    any = [0, Re_Cset[17]],
    _m_ = caml_call1(Re_Cset[18], 10),
    notnl = [0, caml_call2(Re_Cset[4], Re_Cset[17], _m_)],
    _n_ = [0, rg(248, 255), 0],
    _o_ = [0, rg(223, 246), _n_],
    _p_ = [0, char$0(181), _o_],
    lower = alt([0, rg(97, 122), _p_]),
    _q_ = [0, rg(216, 222), 0],
    _r_ = [0, rg(192, 214), _q_],
    upper = alt([0, rg(65, 90), _r_]),
    _s_ = [0, char$0(186), 0],
    alpha = alt([0, lower, [0, upper, [0, char$0(170), _s_]]]),
    digit = rg(48, 57),
    alnum = alt([0, alpha, [0, digit, 0]]),
    wordc = alt([0, alnum, [0, char$0(95), 0]]),
    ascii = rg(0, 127),
    blank = set(cst),
    _t_ = [0, rg(127, 159), 0],
    cntrl = alt([0, rg(0, 31), _t_]),
    _u_ = [0, rg(160, 255), 0],
    graph = alt([0, rg(33, 126), _u_]),
    _v_ = [0, rg(160, 255), 0],
    print = alt([0, rg(32, 126), _v_]),
    _w_ = [0, char$0(247), 0],
    _x_ = [0, char$0(215), _w_],
    _y_ = [0, rg(187, 191), _x_],
    _z_ = [0, rg(182, 185), _y_],
    _A_ = [0, rg(171, 180), _z_],
    _B_ = [0, rg(160, 169), _A_],
    _C_ = [0, rg(123, 126), _B_],
    _D_ = [0, rg(91, 96), _C_],
    _E_ = [0, rg(58, 64), _D_],
    punct = alt([0, rg(33, 47), _E_]),
    _F_ = [0, rg(9, 13), 0],
    space = alt([0, char$0(32), _F_]),
    _G_ = [0, rg(65, 70), 0],
    xdigit = alt([0, digit, [0, rg(97, 102), _G_]]);
   function case$0(r){return [9, r];}
   function no_case(r){return [10, r];}
   function compile(r$0){
    var
     regexp$0 =
       anchored(r$0)
        ? [6, 0, r$0]
        : seq([0, shortest(rep(any)), [0, [6, 0, r$0], 0]]),
     regexp = handle_case(0, regexp$0),
     c = caml_call1(Re_Color_map[1], 0),
     lnl = [0, 0];
    function colorize(regexp){
     var regexp$0 = regexp;
     for(;;){
      if(typeof regexp$0 === "number")
       switch(regexp$0){
         case 7:
          lnl[1] = 1; return 0;
         case 0:
         case 1:
          var _ar_ = caml_call1(Re_Cset[18], 10);
          return caml_call2(Re_Color_map[3], _ar_, c);
         case 2:
         case 3:
         case 4:
          return caml_call2(Re_Color_map[3], cword, c);
         default: return 0;
       }
      switch(regexp$0[0]){
        case 0:
         var s = regexp$0[1]; return caml_call2(Re_Color_map[3], s, c);
        case 1:
         var l = regexp$0[1]; return caml_call2(Stdlib_List[17], colorize, l);
        case 2:
         var l$0 = regexp$0[1];
         return caml_call2(Stdlib_List[17], colorize, l$0);
        case 3:
         var regexp$1 = regexp$0[1], regexp$0 = regexp$1; continue;
        case 7:
        case 8:
         var regexp$2 = regexp$0[1]; break;
        case 4:
        case 5:
        case 6:
        case 14:
         var regexp$2 = regexp$0[2]; break;
        default:
         throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
      }
      var regexp$0 = regexp$2;
     }
    }
    colorize(regexp);
    var
     need_lnl = lnl[1],
     match = caml_call1(Re_Color_map[2], c),
     ncolor = match[3],
     color_repr = match[2],
     colors = match[1],
     lnl$0 = need_lnl ? ncolor : -1,
     ncolor$0 = need_lnl ? ncolor + 1 | 0 : ncolor,
     ids = caml_call1(Re_Automata[5], 0),
     pos = [0, 0],
     names = [0, 0],
     match$0 =
       translate
        (ids,
         332064784,
         0,
         0,
         -904640576,
         pos,
         names,
         [0, Re_Cset[16][1]],
         colors,
         regexp),
     kind = match$0[2],
     r = match$0[1],
     initial = enforce_kind(ids, 332064784, kind, r),
     group_count = pos[1] / 2 | 0,
     group_names = caml_call1(Stdlib_List[9], names[1]),
     _aq_ = caml_call1(Re_Automata[20][3][1], 97);
    return [0,
            initial,
            0,
            colors,
            color_repr,
            ncolor$0,
            lnl$0,
            caml_call1(Re_Automata[21], 0),
            _aq_,
            group_names,
            group_count];
   }
   function exec_internal(name, opt, _am_, partial, groups, re, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(_am_) var sth$0 = _am_[1], len = sth$0; else var len = -1;
    var _an_ = pos < 0 ? 1 : 0;
    if(_an_)
     var _ao_ = _an_;
    else
     var
      _ap_ = len < -1 ? 1 : 0,
      _ao_ = _ap_ || (caml_ml_string_length(s) < (pos + len | 0) ? 1 : 0);
    if(_ao_) caml_call1(Stdlib[1], name);
    return match_str(groups, partial, re, s, pos, len);
   }
   function exec(pos, len, re, s){
    var match = exec_internal(cst_Re_exec, pos, len, 0, 1, re, s);
    if(typeof match !== "number" && 0 === match[0]){var substr = match[1]; return substr;}
    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
   }
   function exec_opt(pos, len, re, s){
    var match = exec_internal(cst_Re_exec_opt, pos, len, 0, 1, re, s);
    if(typeof match !== "number" && 0 === match[0]){var substr = match[1]; return [0, substr];}
    return 0;
   }
   function execp(pos, len, re, s){
    var match = exec_internal(cst_Re_execp, pos, len, 0, 0, re, s);
    if(typeof match !== "number" && 0 === match[0]) return 1;
    return 0;
   }
   function exec_partial(pos, len, re, s){
    var match = exec_internal(cst_Re_exec_partial, pos, len, 1, 0, re, s);
    return typeof match === "number"
            ? -1062743954
            : 0 === match[0] ? 782112175 : 939392865;
   }
   function exec_partial_detailed(pos, len, re, s){
    var
     match =
       exec_internal(cst_Re_exec_partial_detailed, pos, len, 1, 1, re, s);
    if(typeof match === "number") return -1062743954;
    if(0 === match[0]){var group = match[1]; return [0, 782112175, group];}
    var no_match_starts_before = match[1];
    return [0, 939392865, no_match_starts_before];
   }
   function marked(g, p){return caml_call2(Re_Pmark[5][3], p, g[3]);}
   function mark_set(g){return g[3];}
   var equal$0 = Re_Pmark[1], compare = Re_Pmark[2];
   function all_seq(opt, len, re, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(pos < 0) caml_call1(Stdlib[1], cst_Re_all);
    if(len){
     var
      l = len[1],
      _ai_ = l < 0 ? 1 : 0,
      _aj_ = _ai_ || (caml_ml_string_length(s) < (pos + l | 0) ? 1 : 0);
     if(_aj_) caml_call1(Stdlib[1], cst_Re_all$0);
     var limit = pos + l | 0;
    }
    else
     var limit = caml_ml_string_length(s);
    function aux(pos, param){
     if(limit <= pos) return 0;
     var match = match_str(1, 0, re, s, pos, limit - pos | 0);
     if(typeof match !== "number" && 0 === match[0]){
      var
       substr = match[1],
       match$0 = caml_call2(Re_Group[3], substr, 0),
       p2 = match$0[2],
       p1 = match$0[1],
       pos$0 = p1 === p2 ? p2 + 1 | 0 : p2;
      return [0, substr, function(_al_){return aux(pos$0, _al_);}];
     }
     return 0;
    }
    return function(_ak_){return aux(pos, _ak_);};
   }
   function matches_seq(pos, len, re, s){
    var _ag_ = all_seq(pos, len, re, s);
    function _ah_(sub){return caml_call2(Re_Group[1], sub, 0);}
    return caml_call1(caml_call1(Stdlib_Seq[27], _ah_), _ag_);
   }
   function split_full_seq(opt, len, re, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(pos < 0) caml_call1(Stdlib[1], cst_Re_split);
    if(len){
     var
      l = len[1],
      _X_ = l < 0 ? 1 : 0,
      _Y_ = _X_ || (caml_ml_string_length(s) < (pos + l | 0) ? 1 : 0);
     if(_Y_) caml_call1(Stdlib[1], cst_Re_split$0);
     var limit = pos + l | 0;
    }
    else
     var limit = caml_ml_string_length(s);
    function aux(state, old_i, pos$0, param){
     if(typeof state !== "number"){
      var x = state[2], _aa_ = 814535476;
      return [0, x, function(_af_){return aux(_aa_, old_i, pos$0, _af_);}];
     }
     if(limit <= pos$0){
      if(old_i >= limit) return 0;
      var
       sub = caml_call3(Stdlib_String[15], s, old_i, limit - old_i | 0),
       _$_ = old_i + 1 | 0;
      return [0,
              [0, 936573133, sub],
              function(_ae_){return aux(state, _$_, pos$0, _ae_);}];
     }
     var match = match_str(1, 0, re, s, pos$0, limit - pos$0 | 0);
     if(typeof match === "number"){
      if(old_i >= limit) return 0;
      var text = caml_call3(Stdlib_String[15], s, old_i, limit - old_i | 0);
      return [0,
              [0, 936573133, text],
              function(_ad_){return aux(state, limit, pos$0, _ad_);}];
     }
     if(0 !== match[0]) return 0;
     var
      substr = match[1],
      match$0 = caml_call2(Re_Group[3], substr, 0),
      p2 = match$0[2],
      p1 = match$0[1],
      pos$1 = p1 === p2 ? p2 + 1 | 0 : p2;
     if(pos >= p1)
      return [0,
              [0, -363573681, substr],
              function(_ac_){return aux(state, p2, pos$1, _ac_);}];
     var
      text$0 = caml_call3(Stdlib_String[15], s, old_i, p1 - old_i | 0),
      state$0 = [0, 73271853, [0, -363573681, substr]];
     return [0,
             [0, 936573133, text$0],
             function(_ab_){return aux(state$0, p2, pos$1, _ab_);}];
    }
    var _Z_ = 814535476;
    return function(___){return aux(_Z_, pos, pos, ___);};
   }
   function split_seq(pos, len, re, s){
    var seq = split_full_seq(pos, len, re, s);
    function filter(seq, param){
     var seq$0 = seq;
     for(;;){
      var match = caml_call1(seq$0, 0);
      if(! match) return 0;
      var match$0 = match[1];
      if(936573133 <= match$0[1]){
       var tl = match[2], s = match$0[2];
       return [0, s, function(_W_){return filter(tl, _W_);}];
      }
      var seq$1 = match[2], seq$0 = seq$1;
     }
    }
    return function(_V_){return filter(seq, _V_);};
   }
   function list_of_seq(s){
    var _S_ = 0;
    function _T_(l, x){return [0, x, l];}
    var _U_ = caml_call3(Stdlib_Seq[5], _T_, _S_, s);
    return caml_call1(Stdlib_List[9], _U_);
   }
   function all(pos, len, re, s){
    return list_of_seq(all_seq(pos, len, re, s));
   }
   function matches(pos, len, re, s){
    return list_of_seq(matches_seq(pos, len, re, s));
   }
   function split_full(pos, len, re, s){
    return list_of_seq(split_full_seq(pos, len, re, s));
   }
   function split(pos, len, re, s){
    return list_of_seq(split_seq(pos, len, re, s));
   }
   function gen_of_seq(s){
    var r = [0, s];
    return function(param){
     var match = caml_call1(r[1], 0);
     if(! match) return 0;
     var tl = match[2], x = match[1];
     r[1] = tl;
     return [0, x];};
   }
   function split_gen(pos, len, re, s){
    return gen_of_seq(split_seq(pos, len, re, s));
   }
   function split_full_gen(pos, len, re, s){
    return gen_of_seq(split_full_seq(pos, len, re, s));
   }
   function all_gen(pos, len, re, s){
    return gen_of_seq(all_seq(pos, len, re, s));
   }
   function matches_gen(pos, len, re, s){
    return gen_of_seq(matches_seq(pos, len, re, s));
   }
   function replace(opt, len, _O_, re, f, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(_O_) var sth$0 = _O_[1], all = sth$0; else var all = 1;
    if(pos < 0) caml_call1(Stdlib[1], cst_Re_replace);
    if(len){
     var
      l = len[1],
      _P_ = l < 0 ? 1 : 0,
      _Q_ = _P_ || (caml_ml_string_length(s) < (pos + l | 0) ? 1 : 0);
     if(_Q_) caml_call1(Stdlib[1], cst_Re_replace$0);
     var limit = pos + l | 0;
    }
    else
     var limit = caml_ml_string_length(s);
    var
     buf = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s)),
     pos$0 = pos;
    for(;;){
     if(pos$0 < limit){
      var match = match_str(1, 0, re, s, pos$0, limit - pos$0 | 0);
      if(typeof match === "number")
       caml_call4(Stdlib_Buffer[18], buf, s, pos$0, limit - pos$0 | 0);
      else if(0 === match[0]){
       var
        substr = match[1],
        match$0 = caml_call2(Re_Group[3], substr, 0),
        p2 = match$0[2],
        p1 = match$0[1];
       caml_call4(Stdlib_Buffer[18], buf, s, pos$0, p1 - pos$0 | 0);
       var replacing = caml_call1(f, substr);
       caml_call2(Stdlib_Buffer[16], buf, replacing);
       if(all){
        if(p1 === p2){
         if(p2 < limit){
          var _R_ = caml_string_get(s, p2);
          caml_call2(Stdlib_Buffer[12], buf, _R_);
         }
         var pos$1 = p2 + 1 | 0;
        }
        else
         var pos$1 = p2;
        var pos$0 = pos$1;
        continue;
       }
       caml_call4(Stdlib_Buffer[18], buf, s, p2, limit - p2 | 0);
      }
     }
     return caml_call1(Stdlib_Buffer[2], buf);
    }
   }
   function replace_string(pos, len, all, re, by, s){
    return replace(pos, len, all, re, function(param){return by;}, s);
   }
   function witness(t){
    function witness(param){
     var param$0 = param;
     for(;;){
      if(typeof param$0 === "number") return cst$0;
      switch(param$0[0]){
        case 0:
         var
          c = param$0[1],
          _J_ = caml_call1(Re_Cset[21], c),
          _K_ = caml_call1(Stdlib_Char[1], _J_);
         return caml_call2(Stdlib_String[1], 1, _K_);
        case 1:
         var xs = param$0[1], _L_ = caml_call2(Stdlib_List[19], witness, xs);
         return caml_call2(Stdlib_String[6], cst$1, _L_);
        case 2:
         var match = param$0[1];
         if(! match)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _H_], 1);
         var x = match[1], param$0 = x;
         continue;
        case 3:
         var
          from = param$0[2],
          r = param$0[1],
          w = witness(r),
          b =
            caml_call1
             (Stdlib_Buffer[1],
              runtime.caml_mul(caml_ml_string_length(w), from)),
          _M_ = 1;
         if(from >= 1){
          var i = _M_;
          for(;;){
           caml_call2(Stdlib_Buffer[16], b, w);
           var _N_ = i + 1 | 0;
           if(from === i) break;
           var i = _N_;
          }
         }
         return caml_call1(Stdlib_Buffer[2], b);
        case 10:
         var r$1 = param$0[1], param$0 = r$1; continue;
        case 7:
        case 8:
        case 9:
         var r$0 = param$0[1]; break;
        case 11:
        case 12:
        case 13:
         throw caml_maybe_attach_backtrace([0, Assert_failure, _I_], 1);
        default: var r$0 = param$0[2];
      }
      var param$0 = r$0;
     }
    }
    return witness(handle_case(0, t));
   }
   var
    get = Re_Group[1],
    get_ofs = Re_Group[3],
    get_all = Re_Group[6],
    get_all_ofs = Re_Group[7],
    test = Re_Group[8],
    Re_Core =
      [0,
       Re_Group,
       compile,
       group_count,
       group_names,
       exec,
       exec_opt,
       execp,
       exec_partial,
       exec_partial_detailed,
       [0, marked, Re_Pmark[5], mark_set, equal$0, compare],
       all,
       all_gen,
       all_seq,
       matches,
       matches_gen,
       matches_seq,
       split,
       split_gen,
       split_seq,
       split_full,
       split_full_gen,
       split_full_seq,
       [0, all_seq, matches_seq, split_seq, split_full_seq],
       replace,
       replace_string,
       str,
       char$0,
       alt,
       seq,
       empty,
       epsilon,
       rep,
       rep1,
       repn,
       opt,
       bol,
       eol,
       bow,
       eow,
       bos,
       eos,
       leol,
       start,
       stop,
       word,
       not_boundary,
       whole_string,
       longest,
       shortest,
       first,
       greedy,
       non_greedy,
       group,
       no_group,
       nest,
       mark,
       set,
       rg,
       inter,
       diff,
       compl,
       any,
       notnl,
       alnum,
       wordc,
       alpha,
       ascii,
       blank,
       cntrl,
       digit,
       graph,
       lower,
       print,
       punct,
       space,
       upper,
       xdigit,
       case$0,
       no_case,
       pp,
       pp_re,
       pp_re,
       View,
       witness,
       get,
       get_ofs,
       get_all,
       get_all_ofs,
       test,
       marked,
       mark_set];
   runtime.caml_register_global(69, Re_Core, "Re__Core");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Emacs
//# unitInfo: Requires: Re__Core, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Core = global_data.Re__Core,
    Stdlib_List = global_data.Stdlib__List,
    Parse_error = [248, "Re__Emacs.Parse_error", caml_fresh_oo_id(0)],
    Not_supported = [248, "Re__Emacs.Not_supported", caml_fresh_oo_id(0)];
   function re(opt, s){
    if(opt) var sth = opt[1], case$0 = sth; else var case$0 = 1;
    var i = [0, 0], l = runtime.caml_ml_string_length(s);
    function eos(param){return i[1] === l ? 1 : 0;}
    function test2(c$0, c){
     var _j_ = (i[1] + 1 | 0) < l ? 1 : 0;
     if(_j_)
      var
       _k_ = caml_string_get(s, i[1]) === c$0 ? 1 : 0,
       _l_ = _k_ ? caml_string_get(s, i[1] + 1 | 0) === c ? 1 : 0 : _k_;
     else
      var _l_ = _j_;
     return _l_;
    }
    function accept(c){
     var
      _i_ = 1 - eos(0),
      r = _i_ ? caml_string_get(s, i[1]) === c ? 1 : 0 : _i_;
     if(r) i[1]++;
     return r;
    }
    function accept2(c$0, c){
     var r = test2(c$0, c);
     if(r) i[1] = i[1] + 2 | 0;
     return r;
    }
    function get(param){var r = caml_string_get(s, i[1]); i[1]++; return r;}
    function regexp(param){
     var left = branch(0), left$0 = left;
     for(;;){
      if(! accept2(92, 124)) return left$0;
      var
       _h_ = [0, left$0, [0, branch(0), 0]],
       left$1 = caml_call1(Re_Core[28], _h_),
       left$0 = left$1;
     }
    }
    function branch(param){
     var left = 0;
     for(;;){
      if(! eos(0) && ! test2(92, 124) && ! test2(92, 41)){
       a:
       if(accept(46))
        var r = Re_Core[63];
       else if(accept(94))
        var r = Re_Core[36];
       else if(accept(36))
        var r = Re_Core[37];
       else if(accept(91))
        if(accept(94))
         var _d_ = bracket(0), r = caml_call1(Re_Core[61], _d_);
        else
         var _e_ = bracket(0), r = caml_call1(Re_Core[28], _e_);
       else{
        if(! accept(92)){
         if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
         var c$0 = get(0);
         b:
         {
          if(44 <= c$0){if(63 === c$0) break b;} else if(42 <= c$0) break b;
          var r = caml_call1(Re_Core[27], c$0);
          break a;
         }
         throw caml_maybe_attach_backtrace(Parse_error, 1);
        }
        if(accept(40)){
         var r$0 = regexp(0);
         if(1 - accept2(92, 41))
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         var r = caml_call2(Re_Core[53], 0, r$0);
        }
        else if(accept(96))
         var r = Re_Core[40];
        else if(accept(39))
         var r = Re_Core[41];
        else if(accept(61))
         var r = Re_Core[43];
        else if(accept(98))
         var
          r = caml_call1(Re_Core[28], [0, Re_Core[38], [0, Re_Core[39], 0]]);
        else if(accept(66))
         var r = Re_Core[46];
        else if(accept(60))
         var r = Re_Core[38];
        else if(accept(62))
         var r = Re_Core[39];
        else if(accept(119))
         var
          _f_ = [0, caml_call1(Re_Core[27], 95), 0],
          r = caml_call1(Re_Core[28], [0, Re_Core[64], _f_]);
        else if(accept(87))
         var
          _g_ = [0, caml_call1(Re_Core[27], 95), 0],
          r = caml_call1(Re_Core[61], [0, Re_Core[64], _g_]);
        else{
         if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
         var c = get(0);
         b:
         {
          if(63 <= c){
           if(91 <= c){if(95 > c) break b;} else if(64 > c) break b;
          }
          else
           if(48 <= c){
            if(58 > c) throw caml_maybe_attach_backtrace(Not_supported, 1);
           }
           else if(36 <= c)
            switch(c - 36 | 0){case 0:case 6:case 7:case 10: break b;}
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         }
         var r = caml_call1(Re_Core[27], c);
        }
       }
       var
        _c_ =
          accept(42)
           ? caml_call1(Re_Core[32], r)
           : accept
              (43)
             ? caml_call1(Re_Core[33], r)
             : accept(63) ? caml_call1(Re_Core[35], r) : r,
        left$0 = [0, _c_, left],
        left = left$0;
       continue;
      }
      var _b_ = caml_call1(Stdlib_List[9], left);
      return caml_call1(Re_Core[29], _b_);
     }
    }
    function bracket(s){
     var s$0 = s;
     for(;;){
      if(0 !== s$0 && accept(93)) return s$0;
      var c = char$0(0);
      if(accept(45)){
       if(accept(93)){
        var _a_ = [0, caml_call1(Re_Core[27], 45), s$0];
        return [0, caml_call1(Re_Core[27], c), _a_];
       }
       var
        c$0 = char$0(0),
        s$1 = [0, caml_call2(Re_Core[58], c, c$0), s$0],
        s$0 = s$1;
      }
      else
       var s$2 = [0, caml_call1(Re_Core[27], c), s$0], s$0 = s$2;
     }
    }
    function char$0(param){
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     return get(0);
    }
    var res = regexp(0);
    if(1 - eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
    return case$0 ? res : caml_call1(Re_Core[79], res);
   }
   var compile = Re_Core[2];
   function compile_pat(opt, s){
    if(opt) var sth = opt[1], case$0 = sth; else var case$0 = 1;
    return caml_call1(compile, re([0, case$0], s));
   }
   var Re_Emacs = [0, Parse_error, Not_supported, re, compile, compile_pat];
   runtime.caml_register_global(4, Re_Emacs, "Re__Emacs");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Str
//# unitInfo: Requires: CamlinternalLazy, Re__Core, Re__Emacs, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$1 = "",
    caml_bytes_set = runtime.caml_bytes_set,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$1,
    cst = cst$1,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Re_Core = global_data.Re__Core,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Re_Emacs = global_data.Re__Emacs,
    cst_Str_replace_illegal_backsl = "Str.replace: illegal backslash sequence",
    cst_Str_group_end = "Str.group_end",
    cst_Str_group_beginning = "Str.group_beginning";
   function compile_regexp(s, c){
    var
     re = caml_call2(Re_Emacs[3], [0, 1 - c], s),
     _ah_ = [246, function(_aj_){return caml_call1(Re_Core[2], re);}];
    return [0,
            re,
            [246,
             function(param){
              var
               _ai_ = caml_call1(Re_Core[29], [0, Re_Core[43], [0, re, 0]]);
              return caml_call1(Re_Core[2], _ai_);
             }],
            _ah_];
   }
   var state = [0, 0];
   function string_match(re, s, p){
    try{
     var
      _ac_ = re[2],
      _ad_ = caml_obj_tag(_ac_),
      _ae_ =
        250 === _ad_
         ? _ac_[1]
         : 246 === _ad_ ? caml_call1(CamlinternalLazy[2], _ac_) : _ac_;
     state[1] = [0, caml_call4(Re_Core[5], [0, p], 0, _ae_, s)];
     var _af_ = 1;
     return _af_;
    }
    catch(_ag_){
     var _ab_ = caml_wrap_exception(_ag_);
     if(_ab_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ab_, 0);
     state[1] = 0;
     return 0;
    }
   }
   function string_partial_match(re, s, p){
    var
     ___ = re[2],
     _$_ = caml_obj_tag(___),
     _aa_ =
       250 === _$_
        ? ___[1]
        : 246 === _$_ ? caml_call1(CamlinternalLazy[2], ___) : ___,
     match = caml_call4(Re_Core[8], [0, p], 0, _aa_, s);
    return 782112175 === match
            ? string_match(re, s, p)
            : 939392865 <= match ? 1 : 0;
   }
   function search_forward(re, s, p){
    try{
     var
      _V_ = re[3],
      _W_ = caml_obj_tag(_V_),
      _X_ =
        250 === _W_
         ? _V_[1]
         : 246 === _W_ ? caml_call1(CamlinternalLazy[2], _V_) : _V_,
      res = caml_call4(Re_Core[5], [0, p], 0, _X_, s);
     state[1] = [0, res];
     var _Y_ = caml_call2(Re_Core[1][3], res, 0)[1];
     return _Y_;
    }
    catch(_Z_){
     var _U_ = caml_wrap_exception(_Z_);
     if(_U_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_U_, 0);
     state[1] = 0;
     throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    }
   }
   function search_backward(re, s, p){
    var p$0 = p;
    for(;;)
     try{
      var
       _Q_ = re[2],
       _R_ = caml_obj_tag(_Q_),
       _S_ =
         250 === _R_
          ? _Q_[1]
          : 246 === _R_ ? caml_call1(CamlinternalLazy[2], _Q_) : _Q_,
       res = caml_call4(Re_Core[5], [0, p$0], 0, _S_, s);
      state[1] = [0, res];
      return p$0;
     }
     catch(_T_){
      var _P_ = caml_wrap_exception(_T_);
      if(_P_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_P_, 0);
      state[1] = 0;
      if(0 === p$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var p$1 = p$0 - 1 | 0, p$0 = p$1;
     }
   }
   function valid_group(n){
    var _M_ = 0 <= n ? 1 : 0;
    if(_M_){
     var _N_ = n < 10 ? 1 : 0;
     if(_N_){
      var match = state[1];
      if(match){
       var m = match[1];
       return n < caml_call1(Re_Core[1][9], m) ? 1 : 0;
      }
      var _O_ = 0;
     }
     else
      var _O_ = _N_;
    }
    else
     var _O_ = _M_;
    return _O_;
   }
   function offset_group(i){
    var match = state[1];
    if(! match) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    var m = match[1];
    return caml_call2(Re_Core[1][3], m, i);
   }
   function replacement_text(repl, orig){
    var len = caml_ml_string_length(repl), p = 0, q = 0;
    for(;;){
     if(p >= len) break;
     if(92 === caml_string_get(repl, p)){
      var p$0 = p + 1 | 0;
      if(p$0 === len) caml_call1(Stdlib[2], cst_Str_replace_illegal_backsl);
      var c = caml_string_get(repl, p$0);
      a:
      {
       if(58 <= c){
        if(92 === c){var q$0 = q + 1 | 0; break a;}
       }
       else if(48 <= c){
        var i = c - 48 | 0;
        try{
         var
          match = offset_group(i),
          e = match[2],
          b = match[1],
          _H_ = e - b | 0,
          _I_ = _H_;
        }
        catch(_L_){
         var _G_ = caml_wrap_exception(_L_);
         if(_G_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_G_, 0);
         var _I_ = 0;
        }
        var q$0 = q + _I_ | 0;
        break a;
       }
       var q$0 = q + 2 | 0;
      }
      var p$1 = p$0 + 1 | 0, p = p$1, q = q$0;
     }
     else
      var q$1 = q + 1 | 0, p$2 = p + 1 | 0, p = p$2, q = q$1;
    }
    var
     res = runtime.caml_create_bytes(q),
     len$0 = caml_ml_string_length(repl),
     p$3 = 0,
     q$2 = 0;
    for(;;){
     if(p$3 >= len$0) return caml_call1(Stdlib_Bytes[48], res);
     var c$0 = caml_string_get(repl, p$3);
     if(92 === c$0){
      var c$1 = caml_string_get(repl, p$3 + 1 | 0);
      if(58 <= c$1){
       if(92 === c$1){
        caml_bytes_set(res, q$2, 92);
        var q$3 = q$2 + 1 | 0, p$4 = p$3 + 2 | 0, p$3 = p$4, q$2 = q$3;
        continue;
       }
      }
      else if(48 <= c$1){
       try{
        var
         match$0 = offset_group(c$1 - 48 | 0),
         e$0 = match$0[2],
         b$0 = match$0[1],
         d$0 = e$0 - b$0 | 0;
        if(0 < d$0) caml_call5(Stdlib_String[48], orig, b$0, res, q$2, d$0);
        var d = d$0;
       }
       catch(_K_){
        var _J_ = caml_wrap_exception(_K_);
        if(_J_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_J_, 0);
        var d = 0;
       }
       var q$5 = q$2 + d | 0, p$6 = p$3 + 2 | 0, p$3 = p$6, q$2 = q$5;
       continue;
      }
      caml_bytes_set(res, q$2, 92);
      caml_bytes_set(res, q$2 + 1 | 0, c$1);
      var q$4 = q$2 + 2 | 0, p$5 = p$3 + 2 | 0, p$3 = p$5, q$2 = q$4;
     }
     else{
      caml_bytes_set(res, q$2, c$0);
      var q$6 = q$2 + 1 | 0, p$7 = p$3 + 1 | 0, p$3 = p$7, q$2 = q$6;
     }
    }
   }
   function quote(s){
    var
     len = caml_ml_string_length(s),
     buf = caml_call1(Stdlib_Buffer[1], 2 * len | 0),
     _C_ = len - 1 | 0,
     _B_ = 0;
    if(_C_ >= 0){
     var i = _B_;
     for(;;){
      var c = caml_string_get(s, i), _D_ = c - 63 | 0;
      a:
      {
       b:
       {
        if(31 < _D_ >>> 0){
         var _E_ = _D_ + 27 | 0;
         if(10 < _E_ >>> 0) break b;
         switch(_E_){case 0:case 6:case 7:case 10: break;default: break b;
         }
        }
        else if(26 >= _D_ - 1 >>> 0) break b;
        caml_call2(Stdlib_Buffer[12], buf, 92);
        caml_call2(Stdlib_Buffer[12], buf, c);
        break a;
       }
       caml_call2(Stdlib_Buffer[12], buf, c);
      }
      var _F_ = i + 1 | 0;
      if(_C_ === i) break;
      var i = _F_;
     }
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function string_before(s, n){
    return caml_call3(Stdlib_String[15], s, 0, n);
   }
   function string_after(s, n){
    return caml_call3
            (Stdlib_String[15], s, n, caml_ml_string_length(s) - n | 0);
   }
   function first_chars(s, n){return caml_call3(Stdlib_String[15], s, 0, n);}
   function last_chars(s, n){
    return caml_call3
            (Stdlib_String[15], s, caml_ml_string_length(s) - n | 0, n);
   }
   function regexp(e){return compile_regexp(e, 0);}
   function regexp_case_fold(e){return compile_regexp(e, 1);}
   function regexp_string(s){return compile_regexp(quote(s), 0);}
   function regexp_string_case_fold(s){return compile_regexp(quote(s), 1);}
   function group_beginning(n){
    if(1 - valid_group(n)) caml_call1(Stdlib[1], cst_Str_group_beginning);
    var pos = offset_group(n)[1];
    if(-1 === pos) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    return pos;
   }
   function group_end(n){
    if(1 - valid_group(n)) caml_call1(Stdlib[1], cst_Str_group_end);
    var pos = offset_group(n)[2];
    if(-1 === pos) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
    return pos;
   }
   function matched_group(n, txt){
    var match = offset_group(n), e = match[2], b = match[1];
    return caml_call3(Stdlib_String[15], txt, b, e - b | 0);
   }
   function replace_matched(repl, matched){
    return replacement_text(repl, matched);
   }
   function match_beginning(param){return group_beginning(0);}
   function match_end(param){return group_end(0);}
   function matched_string(txt){return matched_group(0, txt);}
   function substitute_first(expr, repl_fun, text){
    try{
     var
      pos = search_forward(expr, text, 0),
      _w_ = [0, string_after(text, match_end(0)), 0],
      _x_ = [0, caml_call1(repl_fun, text), _w_],
      _y_ = [0, string_before(text, pos), _x_],
      _z_ = caml_call2(Stdlib_String[6], cst, _y_);
     return _z_;
    }
    catch(_A_){
     var _v_ = caml_wrap_exception(_A_);
     if(_v_ === Stdlib[8]) return text;
     throw caml_maybe_attach_backtrace(_v_, 0);
    }
   }
   function global_substitute(expr, repl_fun, text){
    var accu = 0, start = 0, last_was_empty = 0;
    for(;;){
     var startpos = last_was_empty ? start + 1 | 0 : start;
     a:
     {
      if(caml_ml_string_length(text) >= startpos){
       try{var pos = search_forward(expr, text, startpos);}
       catch(_u_){
        var _r_ = caml_wrap_exception(_u_);
        if(_r_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_r_, 0);
        var _s_ = [0, string_after(text, start), accu];
        break a;
       }
       var
        end_pos = match_end(0),
        repl_text = caml_call1(repl_fun, text),
        last_was_empty$0 = end_pos === pos ? 1 : 0,
        accu$0 =
          [0,
           repl_text,
           [0,
            caml_call3(Stdlib_String[15], text, start, pos - start | 0),
            accu]],
        accu = accu$0,
        start = end_pos,
        last_was_empty = last_was_empty$0;
       continue;
      }
      var _s_ = [0, string_after(text, start), accu];
     }
     var _t_ = caml_call1(Stdlib_List[9], _s_);
     return caml_call2(Stdlib_String[6], cst$0, _t_);
    }
   }
   function global_replace(expr, repl, text){
    return global_substitute
            (expr, function(_q_){return replacement_text(repl, _q_);}, text);
   }
   function replace_first(expr, repl, text){
    return substitute_first
            (expr, function(_p_){return replacement_text(repl, _p_);}, text);
   }
   function search_forward_progress(re, s, p){
    var pos = search_forward(re, s, p);
    if(p < match_end(0)) return pos;
    if(p < caml_ml_string_length(s)) return search_forward(re, s, p + 1 | 0);
    throw caml_maybe_attach_backtrace(Stdlib[8], 1);
   }
   function bounded_split(expr, text, num){
    var start = string_match(expr, text, 0) ? match_end(0) : 0;
    function split(accu, start, n){
     if(caml_ml_string_length(text) <= start) return accu;
     if(1 === n) return [0, string_after(text, start), accu];
     try{
      var
       pos = search_forward_progress(expr, text, start),
       _m_ = match_end(0),
       _n_ =
         split
          ([0,
            caml_call3(Stdlib_String[15], text, start, pos - start | 0),
            accu],
           _m_,
           n - 1 | 0);
      return _n_;
     }
     catch(_o_){
      var _l_ = caml_wrap_exception(_o_);
      if(_l_ === Stdlib[8]) return [0, string_after(text, start), accu];
      throw caml_maybe_attach_backtrace(_l_, 0);
     }
    }
    var _k_ = split(0, start, num);
    return caml_call1(Stdlib_List[9], _k_);
   }
   function split(expr, text){return bounded_split(expr, text, 0);}
   function bounded_split_delim(expr, text, num){
    function split(accu, start, n){
     if(caml_ml_string_length(text) < start) return accu;
     if(1 === n) return [0, string_after(text, start), accu];
     try{
      var
       pos = search_forward_progress(expr, text, start),
       _h_ = match_end(0),
       _i_ =
         split
          ([0,
            caml_call3(Stdlib_String[15], text, start, pos - start | 0),
            accu],
           _h_,
           n - 1 | 0);
      return _i_;
     }
     catch(_j_){
      var _g_ = caml_wrap_exception(_j_);
      if(_g_ === Stdlib[8]) return [0, string_after(text, start), accu];
      throw caml_maybe_attach_backtrace(_g_, 0);
     }
    }
    if(runtime.caml_string_equal(text, cst$1)) return 0;
    var _f_ = split(0, 0, num);
    return caml_call1(Stdlib_List[9], _f_);
   }
   function split_delim(expr, text){
    return bounded_split_delim(expr, text, 0);
   }
   function bounded_full_split(expr, text, num){
    function split(accu, start, n){
     if(caml_ml_string_length(text) <= start) return accu;
     if(1 === n) return [0, [0, string_after(text, start)], accu];
     try{
      var
       pos = search_forward_progress(expr, text, start),
       s = matched_string(text);
      if(start < pos)
       var
        _c_ = match_end(0),
        _d_ =
          split
           ([0,
             [1, s],
             [0,
              [0, caml_call3(Stdlib_String[15], text, start, pos - start | 0)],
              accu]],
            _c_,
            n - 1 | 0);
      else
       var _d_ = split([0, [1, s], accu], match_end(0), n - 1 | 0);
      return _d_;
     }
     catch(_e_){
      var _b_ = caml_wrap_exception(_e_);
      if(_b_ === Stdlib[8]) return [0, [0, string_after(text, start)], accu];
      throw caml_maybe_attach_backtrace(_b_, 0);
     }
    }
    var _a_ = split(0, 0, num);
    return caml_call1(Stdlib_List[9], _a_);
   }
   function full_split(expr, text){return bounded_full_split(expr, text, 0);}
   var
    Re_Str =
      [0,
       regexp,
       regexp_case_fold,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search_forward,
       search_backward,
       string_partial_match,
       matched_string,
       match_beginning,
       match_end,
       matched_group,
       group_beginning,
       group_end,
       global_replace,
       replace_first,
       global_substitute,
       substitute_first,
       replace_matched,
       split,
       bounded_split,
       split_delim,
       bounded_split_delim,
       full_split,
       bounded_full_split,
       string_before,
       string_after,
       first_chars,
       last_chars];
   runtime.caml_register_global(14, Re_Str, "Re__Str");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Glob
//# unitInfo: Requires: Re__Core, Stdlib, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    beg = [0, cst, 0],
    Re_Core = global_data.Re__Core,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Parse_error = [248, "Re__Glob.Parse_error", runtime.caml_fresh_oo_id(0)],
    _g_ = [0, 1],
    _f_ = [0, 1],
    _d_ = [0, 47, [0, 92, 0]],
    _e_ = [0, 47, 0],
    _b_ = [0, cst, 0],
    _c_ = [0, cst, 0],
    _a_ = [0, 45];
   function mul(l$0, l){
    function _ak_(s){
     function _am_(s$0){return caml_call2(Stdlib[28], s, s$0);}
     return caml_call2(Stdlib_List[19], _am_, l);
    }
    var _al_ = caml_call2(Stdlib_List[19], _ak_, l$0);
    return caml_call1(Stdlib_List[14], _al_);
   }
   function explicit_period(t){
    var _ag_ = t[7];
    if(_ag_){
     var _ah_ = t[3];
     if(_ah_)
      var _ai_ = _ah_;
     else
      var _aj_ = t[4], _ai_ = _aj_ ? t[5] : _aj_;
    }
    else
     var _ai_ = _ag_;
    return _ai_;
   }
   function slashes(t){return t[6] ? _d_ : _e_;}
   function append(opt, t, piece){
    if(opt)
     var sth = opt[1], am_at_start_of_component = sth;
    else
     var am_at_start_of_component = 0;
    return [0,
            [0, piece, t[1]],
            t[2],
            0,
            am_at_start_of_component,
            t[5],
            t[6],
            t[7]];
   }
   function next(t){
    var match = t[2];
    if(! match) return 0;
    var remaining = match[2], piece = match[1];
    return [0, [0, piece, [0, t[1], remaining, t[3], t[4], t[5], t[6], t[7]]]];
   }
   function one(explicit_slash, slashes, explicit_period){
    var
     _ab_ = 0,
     _ac_ = explicit_period ? [0, caml_call1(Re_Core[27], 46), 0] : 0,
     _ad_ = [0, _ac_, _ab_],
     _ae_ =
       explicit_slash ? caml_call2(Stdlib_List[19], Re_Core[27], slashes) : 0,
     _af_ = caml_call1(Stdlib_List[13], [0, _ae_, _ad_]);
    return caml_call1(Re_Core[61], _af_);
   }
   function enclosed(enclosed){
    if(0 === enclosed[0]){
     var c = enclosed[1];
     return caml_call1(Re_Core[27], c);
    }
    var high = enclosed[2], low = enclosed[1];
    return caml_call2(Re_Core[58], low, high);
   }
   function enclosed_set(explicit_slash, slashes, explicit_period, kind, set){
    var
     set$0 = caml_call2(Stdlib_List[19], enclosed, set),
     enclosure =
       596216810 <= kind
        ? caml_call1(Re_Core[28], set$0)
        : caml_call1(Re_Core[61], set$0),
     _aa_ =
       [0, enclosure, [0, one(explicit_slash, slashes, explicit_period), 0]];
    return caml_call1(Re_Core[59], _aa_);
   }
   function exactly(state, c){
    var
     slashes$0 = slashes(state),
     am_at_start_of_component = caml_call2(Stdlib_List[36], c, slashes$0),
     chars = am_at_start_of_component ? slashes$0 : [0, c, 0],
     _$_ = caml_call2(Stdlib_List[19], Re_Core[27], chars);
    return append
            ([0, am_at_start_of_component],
             state,
             caml_call1(Re_Core[28], _$_));
   }
   function many_many(state){
    var
     _P_ = state[7],
     explicit_period$0 = _P_ ? state[5] : _P_,
     first_explicit_period = explicit_period(state),
     slashes$0 = slashes(state);
    function match_component(explicit_period){
     var
      _Y_ = one(1, slashes$0, 0),
      _Z_ = [0, caml_call1(Re_Core[32], _Y_), 0],
      ___ = [0, one(1, slashes$0, explicit_period), _Z_];
     return caml_call1(Re_Core[29], ___);
    }
    var
     _Q_ = match_component(explicit_period$0),
     _R_ = [0, caml_call1(Re_Core[35], _Q_), 0],
     _S_ = caml_call2(Stdlib_List[19], Re_Core[27], slashes$0),
     _T_ = [0, caml_call1(Re_Core[28], _S_), _R_],
     _U_ = caml_call1(Re_Core[29], _T_),
     _V_ = [0, caml_call1(Re_Core[32], _U_), 0],
     _W_ = match_component(first_explicit_period),
     _X_ = [0, caml_call1(Re_Core[35], _W_), _V_];
    return append(0, state, caml_call1(Re_Core[29], _X_));
   }
   function glob(opt, _n_, _m_, _l_, _k_, _j_, str){
    if(opt) var sth = opt[1], anchored = sth; else var anchored = 0;
    if(_n_) var sth$0 = _n_[1], pathname = sth$0; else var pathname = 1;
    if(_m_)
     var sth$1 = _m_[1], match_backslashes = sth$1;
    else
     var match_backslashes = 0;
    if(_l_) var sth$2 = _l_[1], period = sth$2; else var period = 1;
    if(_k_)
     var sth$3 = _k_[1], expand_braces = sth$3;
    else
     var expand_braces = 0;
    if(_j_)
     var sth$4 = _j_[1], double_asterisk = sth$4;
    else
     var double_asterisk = 1;
    function to_re(s){
     var i = [0, 0], l = caml_ml_string_length(s);
     function eos(param){return i[1] === l ? 1 : 0;}
     function read(c){
      var
       _O_ = 1 - eos(0),
       r = _O_ ? caml_string_get(s, i[1]) === c ? 1 : 0 : _O_;
      if(r) i[1]++;
      return r;
     }
     function char$0(param){
      read(92);
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var r = caml_string_get(s, i[1]);
      i[1]++;
      return r;
     }
     function enclosed(param){
      var s = 0;
      for(;;){
       if(0 !== s && read(93)) return s;
       var c = char$0(0);
       if(read(45)){
        if(read(93)) return [0, [0, c], [0, _a_, s]];
        var c$0 = char$0(0), s$0 = [0, [1, c, c$0], s], s = s$0;
       }
       else
        var s$1 = [0, [0, c], s], s = s$1;
      }
     }
     var pieces = 0;
     for(;;){
      if(eos(0)) break;
      a:
      {
       if(double_asterisk){
        if(l <= (i[1] + 3 | 0))
         var _w_ = 0;
        else
         try{
          var j = 0;
          for(;;){
           var _t_ = 1 - eos(0);
           if(_t_)
            var
             _u_ = caml_string_get("/**", j),
             found = caml_string_get(s, i[1] + j | 0) === _u_ ? 1 : 0;
           else
            var found = _t_;
           if(1 - found) throw Stdlib[3];
           var _v_ = j + 1 | 0;
           if(2 === j) break;
           var j = _v_;
          }
          i[1] = i[1] + 3 | 0;
          var _s_ = 1, _w_ = _s_;
         }
         catch(_N_){
          var _r_ = caml_wrap_exception(_N_);
          if(_r_ !== Stdlib[3]) throw caml_maybe_attach_backtrace(_r_, 0);
          var _w_ = 0;
         }
        if(_w_ && ! eos(0)){var _x_ = 2; break a;}
       }
       if(read(42)){
        if(double_asterisk && read(42)){var _x_ = 2; break a;}
        var _x_ = 1;
       }
       else if(read(63))
        var _x_ = 0;
       else if(read(91)){
        if(! read(94) && ! read(33)){var _x_ = [1, enclosed(0)]; break a;}
        var _x_ = [2, enclosed(0)];
       }
       else
        var _x_ = [0, char$0(0)];
      }
      var pieces$0 = [0, _x_, pieces], pieces = pieces$0;
     }
     var
      remaining = caml_call1(Stdlib_List[9], pieces),
      state = [0, 0, remaining, 1, 1, pathname, match_backslashes, period],
      state$8 = state;
     for(;;){
      var match$1 = next(state$8);
      if(! match$1){
       var
        _y_ = caml_call1(Stdlib_List[9], state$8[1]),
        re = caml_call1(Re_Core[29], _y_);
       return anchored ? caml_call1(Re_Core[47], re) : re;
      }
      var
       match$2 = match$1[1],
       state$9 = match$2[2],
       piece = match$2[1],
       explicit_slash$0 = state$9[5],
       explicit_period$1 = explicit_period(state$9),
       slashes$1 = slashes(state$9);
      if(typeof piece === "number")
       switch(piece){
         case 0:
          var
           state$10 =
             append
              (0,
               state$9,
               one(explicit_slash$0, slashes$1, explicit_period$1));
          break;
         case 1:
          var
           explicit_slash = state$9[5],
           explicit_period$0 = explicit_period(state$9),
           slashes$0 = slashes(state$9);
          if(explicit_period$0)
           if(explicit_slash){
            var
             _z_ = one(1, slashes$0, 0),
             _A_ = [0, caml_call1(Re_Core[32], _z_), 0],
             _B_ = [0, one(1, slashes$0, 1), _A_],
             not_empty = caml_call1(Re_Core[29], _B_),
             maybe_empty = caml_call1(Re_Core[35], not_empty),
             enclosed_set$1 =
               function(slashes, not_empty){
                function enclosed_set$0(state, kind, set){
                 var
                  _K_ =
                    [0,
                     not_empty,
                     [0, enclosed_set(1, slashes, 0, kind, set), 0]],
                  _L_ = [0, caml_call1(Re_Core[29], _K_), 0],
                  _M_ = [0, enclosed_set(1, slashes, 1, kind, set), _L_];
                 return append(0, state, caml_call1(Re_Core[28], _M_));
                }
                return enclosed_set$0;
               },
             enclosed_set$0 = enclosed_set$1(slashes$0, not_empty);
            a:
            {
             b:
             {
              c:
              {
               d:
               {
                var state$0 = state$9;
                for(;;){
                 var match = next(state$0);
                 if(! match) break;
                 var _C_ = match[1], match$0 = _C_[1];
                 if(typeof match$0 !== "number") break d;
                 switch(match$0){
                   case 0:
                    break b;
                   case 1:
                    var state$2 = _C_[2], state$0 = state$2; break;
                   default: break c;
                 }
                }
                var _D_ = append(0, state$0, maybe_empty);
                break a;
               }
               switch(match$0[0]){
                 case 0:
                  var
                   state$4 = _C_[2],
                   c = match$0[1],
                   not_empty$0 = 46 === c ? not_empty : maybe_empty,
                   state$5 = append(0, state$4, not_empty$0),
                   _D_ = exactly(state$5, c);
                  break a;
                 case 1:
                  var
                   state$6 = _C_[2],
                   enclosed$0 = match$0[1],
                   _D_ = enclosed_set$0(state$6, 596216810, enclosed$0);
                  break a;
                 default:
                  var
                   state$7 = _C_[2],
                   enclosed$1 = match$0[1],
                   _D_ = enclosed_set$0(state$7, -188280562, enclosed$1);
                  break a;
               }
              }
              var state$3 = _C_[2], _D_ = many_many(state$3);
              break a;
             }
             var state$1 = _C_[2], _D_ = append(0, state$1, not_empty);
            }
            var _J_ = _D_;
           }
           else
            var
             _E_ = one(0, slashes$0, 0),
             _F_ = [0, caml_call1(Re_Core[32], _E_), 0],
             _G_ = [0, one(0, slashes$0, explicit_period$0), _F_],
             _H_ = caml_call1(Re_Core[29], _G_),
             _J_ = append(0, state$9, caml_call1(Re_Core[35], _H_));
          else
           var
            _I_ = one(explicit_slash, slashes$0, explicit_period$0),
            _J_ = append(0, state$9, caml_call1(Re_Core[32], _I_));
          var state$10 = _J_;
          break;
         default: var state$10 = many_many(state$9);
       }
      else
       switch(piece[0]){
         case 0:
          var c$0 = piece[1], state$10 = exactly(state$9, c$0); break;
         case 1:
          var
           enclosed$2 = piece[1],
           state$10 =
             append
              (0,
               state$9,
               enclosed_set
                (explicit_slash$0,
                 slashes$1,
                 explicit_period$1,
                 596216810,
                 enclosed$2));
          break;
         default:
          var
           enclosed$3 = piece[1],
           state$10 =
             append
              (0,
               state$9,
               enclosed_set
                (explicit_slash$0,
                 slashes$1,
                 explicit_period$1,
                 -188280562,
                 enclosed$3));
       }
      var state$8 = state$10;
     }
    }
    if(! expand_braces) return to_re(str);
    var l = caml_ml_string_length(str);
    function expl(inner, s, i, acc, beg$0){
     var s$0 = s, i$0 = i, acc$0 = acc, beg$1 = beg$0;
     for(;;){
      if(l <= i$0){
       if(inner) throw caml_maybe_attach_backtrace(Parse_error, 1);
       return [0,
               mul
                (beg$1,
                 [0,
                  caml_call3(Stdlib_String[15], str, s$0, i$0 - s$0 | 0),
                  0]),
               i$0];
      }
      var match = caml_string_get(str, i$0);
      if(44 === match){
       if(inner){
        var
         _p_ =
           mul
            (beg$1,
             [0, caml_call3(Stdlib_String[15], str, s$0, i$0 - s$0 | 0), 0]),
         acc$1 = caml_call2(Stdlib[37], _p_, acc$0),
         i$1 = i$0 + 1 | 0,
         s$1 = i$0 + 1 | 0,
         s$0 = s$1,
         i$0 = i$1,
         acc$0 = acc$1,
         beg$1 = beg;
        continue;
       }
      }
      else
       if(123 <= match){
        if(126 > match)
         switch(match - 123 | 0){
           case 0:
            var
             match$0 = expl(1, i$0 + 1 | 0, i$0 + 1 | 0, 0, _b_),
             i$3 = match$0[2],
             t = match$0[1],
             beg$2 =
               mul
                (beg$1,
                 mul
                  ([0,
                    caml_call3(Stdlib_String[15], str, s$0, i$0 - s$0 | 0),
                    0],
                   t)),
             s$0 = i$3,
             i$0 = i$3,
             beg$1 = beg$2;
            continue;
           case 1: break;
           default:
            if(inner){
             var
              _q_ =
                mul
                 (beg$1,
                  [0,
                   caml_call3(Stdlib_String[15], str, s$0, i$0 - s$0 | 0),
                   0]);
             return [0, caml_call2(Stdlib[37], _q_, acc$0), i$0 + 1 | 0];
            }
         }
       }
       else if(92 === match){var i$4 = i$0 + 2 | 0, i$0 = i$4; continue;}
      var i$2 = i$0 + 1 | 0, i$0 = i$2;
     }
    }
    var
     _h_ = expl(0, 0, 0, 0, _c_)[1],
     _i_ = caml_call1(Stdlib_List[9], _h_),
     _o_ = caml_call2(Stdlib_List[19], to_re, _i_);
    return caml_call1(Re_Core[28], _o_);
   }
   function glob$0(anchored, period, s){
    return glob(anchored, 0, 0, [0, period], 0, 0, s);
   }
   function globx(anchored, s){return glob(anchored, 0, 0, 0, _f_, 0, s);}
   function globx$0(anchored, period, s){
    return glob(anchored, 0, 0, [0, period], _g_, 0, s);
   }
   var Re_Glob = [0, Parse_error, glob, glob$0, globx, globx$0];
   runtime.caml_register_global(14, Re_Glob, "Re__Glob");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Perl
//# unitInfo: Requires: Re__Core, Stdlib, Stdlib__Buffer, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_alnum = "alnum",
    cst_alpha = "alpha",
    cst_ascii = "ascii",
    cst_blank = "blank",
    cst_cntrl = "cntrl",
    cst_digit = "digit",
    cst_graph = "graph",
    cst_lower = "lower",
    cst_print = "print",
    cst_punct = "punct",
    cst_space = "space",
    cst_upper = "upper",
    cst_word = "word",
    cst_xdigit = "xdigit",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_list_of_js_array = runtime.caml_list_of_js_array,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst = ":]",
    posix_class_strings =
      caml_list_of_js_array
       ([cst_alpha,
         cst_alnum,
         cst_ascii,
         cst_blank,
         cst_cntrl,
         cst_digit,
         cst_lower,
         cst_print,
         cst_space,
         cst_upper,
         cst_word,
         cst_punct,
         cst_graph,
         cst_xdigit]),
    Stdlib_List = global_data.Stdlib__List,
    Re_Core = global_data.Re__Core,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Parse_error = [248, "Re__Perl.Parse_error", caml_fresh_oo_id(0)],
    Not_supported = [248, "Re__Perl.Not_supported", caml_fresh_oo_id(0)],
    _a_ = [0, 748194550, 8],
    _b_ = [0, 748194550, 10],
    _c_ = [0, 748194550, 13],
    _d_ = [0, 748194550, 9],
    cst_Invalid_pcre_class = "Invalid pcre class: ";
   function re(opt, s){
    if(opt) var sth = opt[1], opts = sth; else var opts = 0;
    var
     ungreedy = caml_call2(Stdlib_List[37], -243745063, opts),
     dotall = caml_call2(Stdlib_List[37], -424303016, opts),
     dollar_endonly = caml_call2(Stdlib_List[37], -712595228, opts),
     multiline = caml_call2(Stdlib_List[37], 1071952589, opts),
     i = [0, 0],
     l = caml_ml_string_length(s);
    function eos(param){return i[1] === l ? 1 : 0;}
    function test(c){
     var
      _D_ = 1 - eos(0),
      _E_ = _D_ ? caml_string_get(s, i[1]) === c ? 1 : 0 : _D_;
     return _E_;
    }
    function accept(c){var r = test(c); if(r) i[1]++; return r;}
    function accept_s(s$0){
     var len = caml_ml_string_length(s$0);
     try{
      var _x_ = len - 1 | 0, _w_ = 0;
      if(_x_ >= 0){
       var j = _w_;
       for(;;){
        try{
         var _z_ = caml_string_get(s, i[1] + j | 0);
         if(caml_string_get(s$0, j) !== _z_)
          throw caml_maybe_attach_backtrace(Stdlib[3], 1);
        }
        catch(_C_){throw caml_maybe_attach_backtrace(Stdlib[3], 1);}
        var _A_ = j + 1 | 0;
        if(_x_ === j) break;
        var j = _A_;
       }
      }
      i[1] = i[1] + len | 0;
      var _y_ = 1;
      return _y_;
     }
     catch(_B_){
      var _v_ = caml_wrap_exception(_B_);
      if(_v_ === Stdlib[3]) return 0;
      throw caml_maybe_attach_backtrace(_v_, 0);
     }
    }
    function get(param){var r = caml_string_get(s, i[1]); i[1]++; return r;}
    function unget(param){i[1] += -1; return;}
    function greedy_mod(r){
     var gr = accept(63), gr$0 = ungreedy ? 1 - gr : gr;
     return gr$0 ? caml_call1(Re_Core[52], r) : caml_call1(Re_Core[51], r);
    }
    function regexp(param){
     var left = branch(0), left$0 = left;
     for(;;){
      if(! accept(124)) return left$0;
      var
       _u_ = [0, left$0, [0, branch(0), 0]],
       left$1 = caml_call1(Re_Core[28], _u_),
       left$0 = left$1;
     }
    }
    function branch(param){
     var left = 0;
     for(;;){
      if(! eos(0) && ! test(124) && ! test(41)){
       var r = atom(0);
       if(accept(42))
        var _t_ = greedy_mod(caml_call1(Re_Core[32], r));
       else if(accept(43))
        var _t_ = greedy_mod(caml_call1(Re_Core[33], r));
       else if(accept(63))
        var _t_ = greedy_mod(caml_call1(Re_Core[35], r));
       else if(accept(123)){
        var match = integer(0);
        if(match){
         var i = match[1], j = accept(44) ? integer(0) : [0, i];
         if(1 - accept(125))
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         if(j){
          var j$0 = j[1];
          if(j$0 < i) throw caml_maybe_attach_backtrace(Parse_error, 1);
         }
         var _t_ = greedy_mod(caml_call3(Re_Core[34], r, i, j));
        }
        else{unget(0); var _t_ = r;}
       }
       else
        var _t_ = r;
       var left$0 = [0, _t_, left], left = left$0;
       continue;
      }
      var _s_ = caml_call1(Stdlib_List[9], left);
      return caml_call1(Re_Core[29], _s_);
     }
    }
    function atom(param){
     if(accept(46)) return dotall ? Re_Core[62] : Re_Core[63];
     if(! accept(40)){
      if(accept(94)) return multiline ? Re_Core[36] : Re_Core[40];
      if(accept(36))
       return multiline
               ? Re_Core[37]
               : dollar_endonly ? Re_Core[42] : Re_Core[41];
      if(accept(91)){
       if(accept(94)){
        var _l_ = bracket(0);
        return caml_call1(Re_Core[61], _l_);
       }
       var _m_ = bracket(0);
       return caml_call1(Re_Core[28], _m_);
      }
      if(accept(92)){
       if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
       var c = get(0), switcher = c - 48 | 0;
       if(74 >= switcher >>> 0)
        switch(switcher){
          case 17:
           return Re_Core[40];
          case 18:
           return Re_Core[46];
          case 20:
           return caml_call1(Re_Core[61], [0, Re_Core[70], 0]);
          case 23:
           return Re_Core[43];
          case 35:
           return caml_call1(Re_Core[61], [0, Re_Core[75], 0]);
          case 39:
           var _n_ = [0, caml_call1(Re_Core[27], 95), 0];
           return caml_call1(Re_Core[61], [0, Re_Core[64], _n_]);
          case 42:
           return Re_Core[42];
          case 50:
           return caml_call1
                   (Re_Core[28], [0, Re_Core[38], [0, Re_Core[39], 0]]);
          case 52:
           return Re_Core[70];
          case 53:
           return caml_call1(Re_Core[27], 27);
          case 54:
           return caml_call1(Re_Core[27], 12);
          case 62:
           return caml_call1(Re_Core[27], 10);
          case 66:
           return caml_call1(Re_Core[27], 13);
          case 67:
           return Re_Core[75];
          case 68:
           return caml_call1(Re_Core[27], 9);
          case 71:
           var _o_ = [0, caml_call1(Re_Core[27], 95), 0];
           return caml_call1(Re_Core[28], [0, Re_Core[64], _o_]);
          case 72:
           var
            c1 = hexdigit(0),
            c2 = hexdigit(0),
            code = (c1 * 16 | 0) + c2 | 0,
            _p_ = caml_call1(Stdlib[29], code);
           return caml_call1(Re_Core[27], _p_);
          case 74:
           return Re_Core[41];
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
           throw caml_maybe_attach_backtrace(Not_supported, 1);
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 43:
          case 44:
          case 45:
          case 46:
          case 47:
          case 48: break;
          default: throw caml_maybe_attach_backtrace(Parse_error, 1);
        }
       return caml_call1(Re_Core[27], c);
      }
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var c$0 = get(0);
      a:
      {
       if(64 <= c$0){
        if(92 === c$0 || 123 === c$0) break a;
       }
       else
        if(44 <= c$0){if(63 <= c$0) break a;} else if(42 <= c$0) break a;
       return caml_call1(Re_Core[27], c$0);
      }
      throw caml_maybe_attach_backtrace(Parse_error, 1);
     }
     if(! accept(63)){
      var r$1 = regexp(0);
      if(1 - accept(41)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      return caml_call2(Re_Core[53], 0, r$1);
     }
     if(accept(58)){
      var r = regexp(0);
      if(1 - accept(41)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      return r;
     }
     if(! accept(35)){
      if(! accept(60)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var c$1 = get(0), _q_ = c$1 - 91 | 0;
      a:
      {
       if(5 < _q_ >>> 0){
        if(57 < _q_ + 26 >>> 0) break a;
       }
       else if(4 !== _q_) break a;
       var b = caml_call1(Stdlib_Buffer[1], 32);
       caml_call2(Stdlib_Buffer[12], b, c$1);
       for(;;){
        if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
        var c$2 = get(0);
        b:
        {
         if(65 <= c$2){
          var _r_ = c$2 - 91 | 0;
          if(5 < _r_ >>> 0){
           if(32 <= _r_) break b;
          }
          else if(4 !== _r_) break b;
         }
         else{
          if(58 <= c$2){
           if(62 !== c$2) break b;
           var name = caml_call1(Stdlib_Buffer[2], b), r$0 = regexp(0);
           if(1 - accept(41))
            throw caml_maybe_attach_backtrace(Parse_error, 1);
           return caml_call2(Re_Core[53], [0, name], r$0);
          }
          if(48 > c$2) break b;
         }
         caml_call2(Stdlib_Buffer[12], b, c$2);
         continue;
        }
        throw caml_maybe_attach_backtrace(Parse_error, 1);
       }
      }
      throw caml_maybe_attach_backtrace(Parse_error, 1);
     }
     for(;;){
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      if(accept(41)) return Re_Core[31];
      i[1]++;
     }
    }
    function hexdigit(param){
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var d = get(0);
     if(65 <= d){
      if(97 <= d){
       if(103 > d) return (d - 97 | 0) + 10 | 0;
      }
      else if(71 > d) return (d - 65 | 0) + 10 | 0;
     }
     else if(9 >= d - 48 >>> 0) return d - 48 | 0;
     throw caml_maybe_attach_backtrace(Parse_error, 1);
    }
    function integer(param){
     if(eos(0)) return 0;
     var d = get(0);
     if(9 < d - 48 >>> 0){unget(0); return 0;}
     var i = d - 48 | 0, i$0 = i;
     for(;;){
      if(eos(0)) return [0, i$0];
      var d$0 = get(0);
      if(9 < d$0 - 48 >>> 0){unget(0); return [0, i$0];}
      var i$1 = (10 * i$0 | 0) + (d$0 - 48 | 0) | 0;
      if(i$1 < i$0) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var i$0 = i$1;
     }
    }
    function bracket(s){
     var s$0 = s;
     for(;;){
      if(0 !== s$0 && accept(93)) return s$0;
      var match = char$0(0);
      if(748194550 <= match[1]){
       var c = match[2];
       if(accept(45)){
        if(accept(93)){
         var _j_ = [0, caml_call1(Re_Core[27], 45), s$0];
         return [0, caml_call1(Re_Core[27], c), _j_];
        }
        var match$0 = char$0(0);
        if(748194550 <= match$0[1])
         var
          c$0 = match$0[2],
          s$1 = [0, caml_call2(Re_Core[58], c, c$0), s$0],
          s$0 = s$1;
        else
         var
          st = match$0[2],
          _k_ = [0, caml_call1(Re_Core[27], 45), [0, st, s$0]],
          s$2 = [0, caml_call1(Re_Core[27], c), _k_],
          s$0 = s$2;
       }
       else
        var s$3 = [0, caml_call1(Re_Core[27], c), s$0], s$0 = s$3;
      }
      else
       var st$0 = match[2], s$4 = [0, st$0, s$0], s$0 = s$4;
     }
    }
    function char$0(param){
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var c = get(0);
     if(91 !== c){
      if(92 !== c) return [0, 748194550, c];
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var c$1 = get(0);
      if(58 <= c$1){
       if(123 > c$1)
        switch(c$1 - 58 | 0){
          case 10:
           return [0, 4150146, caml_call1(Re_Core[61], [0, Re_Core[70], 0])];
          case 25:
           return [0, 4150146, caml_call1(Re_Core[61], [0, Re_Core[75], 0])];
          case 29:
           var _g_ = [0, caml_call1(Re_Core[27], 95), 0];
           return [0, 4150146, caml_call1(Re_Core[61], [0, Re_Core[64], _g_])];
          case 40:
           return _a_;
          case 42:
           return [0, 4150146, Re_Core[70]];
          case 52:
           return _b_;
          case 56:
           return _c_;
          case 57:
           return [0, 4150146, Re_Core[75]];
          case 58:
           return _d_;
          case 61:
           var _h_ = [0, caml_call1(Re_Core[27], 95), 0];
           return [0, 4150146, caml_call1(Re_Core[28], [0, Re_Core[64], _h_])];
          case 0:
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38: break;
          default: throw caml_maybe_attach_backtrace(Parse_error, 1);
        }
      }
      else if(48 <= c$1) throw caml_maybe_attach_backtrace(Not_supported, 1);
      return [0, 748194550, c$1];
     }
     if(accept(61)) throw caml_maybe_attach_backtrace(Not_supported, 1);
     if(! accept(58)){
      if(! accept(46)) return [0, 748194550, c];
      if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var c$0 = get(0);
      if(1 - accept(46)) throw caml_maybe_attach_backtrace(Not_supported, 1);
      if(1 - accept(93)) throw caml_maybe_attach_backtrace(Parse_error, 1);
      return [0, 748194550, c$0];
     }
     var compl = accept(94);
     try{
      var
       class$0 = caml_call2(Stdlib_List[38], accept_s, posix_class_strings);
     }
     catch(_i_){
      var _f_ = caml_wrap_exception(_i_);
      if(_f_ === Stdlib[8]) throw caml_maybe_attach_backtrace(Parse_error, 1);
      throw caml_maybe_attach_backtrace(_f_, 0);
     }
     if(1 - accept_s(cst)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var switch$0 = runtime.caml_string_compare(class$0, cst_lower);
     a:
     {
      if(0 <= switch$0){
       if(0 >= switch$0){var posix_class = Re_Core[72]; break a;}
       if(! caml_string_notequal(class$0, cst_print)){var posix_class = Re_Core[73]; break a;}
       if(! caml_string_notequal(class$0, cst_punct)){var posix_class = Re_Core[74]; break a;}
       if(! caml_string_notequal(class$0, cst_space)){var posix_class = Re_Core[75]; break a;}
       if(! caml_string_notequal(class$0, cst_upper)){var posix_class = Re_Core[76]; break a;}
       if(! caml_string_notequal(class$0, cst_word)){var posix_class = Re_Core[65]; break a;}
       if(! caml_string_notequal(class$0, cst_xdigit)){var posix_class = Re_Core[77]; break a;}
      }
      else{
       if(! caml_string_notequal(class$0, cst_alnum)){var posix_class = Re_Core[64]; break a;}
       if(! caml_string_notequal(class$0, cst_alpha)){var posix_class = Re_Core[66]; break a;}
       if(! caml_string_notequal(class$0, cst_ascii)){var posix_class = Re_Core[67]; break a;}
       if(! caml_string_notequal(class$0, cst_blank)){var posix_class = Re_Core[68]; break a;}
       if(! caml_string_notequal(class$0, cst_cntrl)){var posix_class = Re_Core[69]; break a;}
       if(! caml_string_notequal(class$0, cst_digit)){var posix_class = Re_Core[70]; break a;}
       if(! caml_string_notequal(class$0, cst_graph)){var posix_class = Re_Core[71]; break a;}
      }
      var
       _e_ = caml_call2(Stdlib[28], cst_Invalid_pcre_class, class$0),
       posix_class = caml_call1(Stdlib[1], _e_);
     }
     var
      re = compl ? caml_call1(Re_Core[61], [0, posix_class, 0]) : posix_class;
     return [0, 4150146, re];
    }
    var res = regexp(0);
    if(1 - eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
    var
     r =
       caml_call2(Stdlib_List[37], 616470068, opts)
        ? caml_call1(Re_Core[29], [0, Re_Core[43], [0, res, 0]])
        : res,
     r$0 =
       caml_call2(Stdlib_List[37], 604571177, opts)
        ? caml_call1(Re_Core[79], r)
        : r;
    return r$0;
   }
   var compile = Re_Core[2];
   function compile_pat(opt, s){
    if(opt) var sth = opt[1], opts = sth; else var opts = 0;
    return caml_call1(compile, re([0, opts], s));
   }
   var Re_Perl = [0, Parse_error, Not_supported, re, compile, compile_pat];
   runtime.caml_register_global(27, Re_Perl, "Re__Perl");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Pcre
//# unitInfo: Requires: Re__Core, Re__Perl, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__List, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Re_Core = global_data.Re__Core,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Re_Perl = global_data.Re__Perl,
    Parse_error = Re_Perl[1],
    Not_supported = Re_Perl[2],
    _a_ = [0, -1, -1];
   function re(opt, pat){
    if(opt) var sth = opt[1], flags = sth; else var flags = 0;
    function _v_(param){
     return 601676297 <= param
             ? 613575188 <= param ? 616470068 : 604571177
             : 426394317 <= param ? 1071952589 : -424303016;
    }
    var opts = caml_call2(Stdlib_List[19], _v_, flags);
    return caml_call2(Re_Perl[3], [0, opts], pat);
   }
   function regexp(flags, pat){
    var _u_ = re(flags, pat);
    return caml_call1(Re_Core[2], _u_);
   }
   function extract(rex, s){
    var _t_ = caml_call4(Re_Core[5], 0, 0, rex, s);
    return caml_call1(Re_Core[1][6], _t_);
   }
   function exec(rex, pos, s){return caml_call4(Re_Core[5], pos, 0, rex, s);}
   function get_substring(s, i){return caml_call2(Re_Core[1][1], s, i);}
   function names(rex){
    var _p_ = caml_call1(Re_Core[4], rex);
    function _q_(_s_){return _s_[1];}
    var _r_ = caml_call1(caml_call1(Stdlib_List[19], _q_), _p_);
    return caml_call1(Stdlib_Array[12], _r_);
   }
   function get_named_substring(rex, name, s){
    var param = caml_call1(Re_Core[4], rex);
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var match = param[1], rem = param[2], i = match[2], n = match[1];
     if(runtime.caml_string_equal(n, name))
      try{var _n_ = get_substring(s, i); return _n_;}
      catch(_o_){
       var _m_ = caml_wrap_exception(_o_);
       if(_m_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_m_, 0);
       var param = rem;
      }
     else
      var rem$0 = param[2], param = rem$0;
    }
   }
   function get_substring_ofs(s, i){return caml_call2(Re_Core[1][3], s, i);}
   function pmatch(rex, s){return caml_call4(Re_Core[7], 0, 0, rex, s);}
   function substitute(rex, subst, str){
    var b = caml_call1(Stdlib_Buffer[1], 1024), pos = 0;
    for(;;){
     if(caml_ml_string_length(str) <= pos)
      return caml_call1(Stdlib_Buffer[2], b);
     if(caml_call4(Re_Core[7], [0, pos], 0, rex, str)){
      var
       ss = caml_call4(Re_Core[5], [0, pos], 0, rex, str),
       match = caml_call2(Re_Core[1][3], ss, 0),
       fin = match[2],
       start = match[1],
       pat = caml_call2(Re_Core[1][1], ss, 0);
      caml_call4(Stdlib_Buffer[18], b, str, pos, start - pos | 0);
      var _l_ = caml_call1(subst, pat);
      caml_call2(Stdlib_Buffer[16], b, _l_);
      var pos = fin;
     }
     else{
      caml_call4
       (Stdlib_Buffer[18], b, str, pos, caml_ml_string_length(str) - pos | 0);
      var pos$0 = caml_ml_string_length(str), pos = pos$0;
     }
    }
   }
   function split(rex, str){
    var accu = 0, pos = 0;
    for(;;){
     if(caml_ml_string_length(str) <= pos)
      return caml_call1(Stdlib_List[9], accu);
     if(caml_call4(Re_Core[7], [0, pos], 0, rex, str))
      var
       ss = caml_call4(Re_Core[5], [0, pos], 0, rex, str),
       match = caml_call2(Re_Core[1][3], ss, 0),
       fin = match[2],
       start = match[1],
       s = caml_call3(Stdlib_String[15], str, pos, start - pos | 0),
       accu$0 = [0, s, accu],
       accu = accu$0,
       pos = fin;
     else
      var
       s$0 =
         caml_call3
          (Stdlib_String[15], str, pos, caml_ml_string_length(str) - pos | 0),
       pos$0 = caml_ml_string_length(str),
       accu$1 = [0, s$0, accu],
       accu = accu$1,
       pos = pos$0;
    }
   }
   function quote(s){
    var
     len = caml_ml_string_length(s),
     buf = caml_create_bytes(len << 1),
     pos = [0, 0],
     _i_ = len - 1 | 0,
     _h_ = 0;
    if(_i_ >= 0){
     var i = _h_;
     for(;;){
      var c = runtime.caml_string_unsafe_get(s, i);
      a:
      {
       b:
       {
        if(91 <= c){
         var _j_ = c - 93 | 0;
         if(29 < _j_ >>> 0){
          if(32 <= _j_) break b;
         }
         else if(1 !== _j_) break b;
        }
        else
         if(47 <= c){
          if(63 !== c) break b;
         }
         else{
          if(36 > c) break b;
          switch(c - 36 | 0){case 1:case 2:case 3:case 8:case 9: break b;
          }
         }
        caml_bytes_unsafe_set(buf, pos[1], 92);
        pos[1]++;
        caml_bytes_unsafe_set(buf, pos[1], c);
        pos[1]++;
        break a;
       }
       caml_bytes_unsafe_set(buf, pos[1], c);
       pos[1]++;
      }
      var _k_ = i + 1 | 0;
      if(_i_ === i) break;
      var i = _k_;
     }
    }
    var len$0 = pos[1], r = caml_create_bytes(len$0);
    runtime.caml_blit_bytes(buf, 0, r, 0, len$0);
    return caml_call1(Stdlib_Bytes[48], r);
   }
   function full_split(opt, rex, s){
    if(opt) var sth = opt[1], max = sth; else var max = 0;
    if(0 === caml_ml_string_length(s)) return 0;
    if(1 === max) return [0, [0, s], 0];
    var results = caml_call4(Re_Core[20], 0, 0, rex, s);
    function _b_(param){
     if(936573133 <= param[1]){var s = param[2]; return [0, [0, s], 0];}
     var
      d = param[2],
      matches = caml_call1(Re_Core[1][7], d),
      delim = caml_call2(Re_Core[1][1], d, 0),
      l = [0, 0],
      _d_ = matches.length - 1 - 1 | 0,
      _c_ = 1;
     if(_d_ >= 1){
      var i = _c_;
      for(;;){
       var
        _e_ = l[1],
        _f_ =
          runtime.caml_equal(runtime.caml_check_bound(matches, i)[1 + i], _a_)
           ? 0
           : [2, i, caml_call2(Re_Core[1][1], d, i)];
       l[1] = [0, _f_, _e_];
       var _g_ = i + 1 | 0;
       if(_d_ === i) break;
       var i = _g_;
      }
     }
     return [0, [1, delim], caml_call1(Stdlib_List[9], l[1])];
    }
    var matches = caml_call2(Stdlib_List[19], _b_, results);
    return caml_call1(Stdlib_List[13], matches);
   }
   var
    Re_Pcre =
      [0,
       Parse_error,
       Not_supported,
       re,
       regexp,
       extract,
       exec,
       get_substring,
       names,
       get_named_substring,
       get_substring_ofs,
       pmatch,
       substitute,
       full_split,
       split,
       quote];
   runtime.caml_register_global(9, Re_Pcre, "Re__Pcre");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re__Posix
//# unitInfo: Requires: Re__Core, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Re_Core = global_data.Re__Core,
    Stdlib_List = global_data.Stdlib__List,
    Parse_error = [248, "Re__Posix.Parse_error", caml_fresh_oo_id(0)],
    Not_supported = [248, "Re__Posix.Not_supported", caml_fresh_oo_id(0)];
   function re(opt, s){
    if(opt) var sth = opt[1], opts = sth; else var opts = 0;
    var
     newline = caml_call2(Stdlib_List[37], -638074828, opts),
     i = [0, 0],
     l = runtime.caml_ml_string_length(s);
    function eos(param){return i[1] === l ? 1 : 0;}
    function test(c){
     var
      _n_ = 1 - eos(0),
      _o_ = _n_ ? caml_string_get(s, i[1]) === c ? 1 : 0 : _n_;
     return _o_;
    }
    function accept(c){var r = test(c); if(r) i[1]++; return r;}
    function get(param){var r = caml_string_get(s, i[1]); i[1]++; return r;}
    function unget(param){i[1] += -1; return;}
    function regexp(param){
     var left = branch(0), left$0 = left;
     for(;;){
      if(! accept(124)) return left$0;
      var
       _m_ = [0, left$0, [0, branch(0), 0]],
       left$1 = caml_call1(Re_Core[28], _m_),
       left$0 = left$1;
     }
    }
    function branch(param){
     var left = 0;
     for(;;){
      if(! eos(0) && ! test(124) && ! test(41)){
       a:
       if(accept(46))
        var r = newline ? Re_Core[63] : Re_Core[62];
       else if(accept(40)){
        var r$0 = regexp(0);
        if(1 - accept(41)) throw caml_maybe_attach_backtrace(Parse_error, 1);
        var r = caml_call2(Re_Core[53], 0, r$0);
       }
       else if(accept(94))
        var r = newline ? Re_Core[36] : Re_Core[40];
       else if(accept(36))
        var r = newline ? Re_Core[37] : Re_Core[41];
       else{
        if(! accept(91)){
         if(! accept(92)){
          if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
          var c$0 = get(0);
          b:
          {
           if(64 <= c$0){
            if(92 === c$0 || 123 === c$0) break b;
           }
           else
            if(44 <= c$0){if(63 <= c$0) break b;} else if(42 <= c$0) break b;
           var r = caml_call1(Re_Core[27], c$0);
           break a;
          }
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         }
         if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
         var c = get(0);
         b:
         {
          if(91 <= c){
           var _l_ = c - 93 | 0;
           if(29 < _l_ >>> 0){
            if(32 <= _l_) break b;
           }
           else if(1 !== _l_) break b;
          }
          else
           if(47 <= c){
            if(63 !== c) break b;
           }
           else{
            if(36 > c) break b;
            switch(c - 36 | 0){case 1:case 2:case 3:case 8:case 9: break b;
            }
           }
          var r = caml_call1(Re_Core[27], c);
          break a;
         }
         throw caml_maybe_attach_backtrace(Parse_error, 1);
        }
        if(accept(94))
         var
          _h_ = caml_call1(Re_Core[27], 10),
          _i_ = bracket(0),
          _j_ = caml_call1(Re_Core[61], _i_),
          r = caml_call2(Re_Core[60], _j_, _h_);
        else
         var _k_ = bracket(0), r = caml_call1(Re_Core[28], _k_);
       }
       if(accept(42))
        var
         _e_ = caml_call1(Re_Core[55], r),
         _d_ = caml_call1(Re_Core[32], _e_);
       else if(accept(43))
        var
         _f_ = caml_call1(Re_Core[55], r),
         _d_ = caml_call1(Re_Core[33], _f_);
       else if(accept(63))
        var _d_ = caml_call1(Re_Core[35], r);
       else if(accept(123)){
        var match = integer(0);
        if(match){
         var i = match[1], j = accept(44) ? integer(0) : [0, i];
         if(1 - accept(125))
          throw caml_maybe_attach_backtrace(Parse_error, 1);
         if(j){
          var j$0 = j[1];
          if(j$0 < i) throw caml_maybe_attach_backtrace(Parse_error, 1);
         }
         var
          _g_ = caml_call1(Re_Core[55], r),
          _d_ = caml_call3(Re_Core[34], _g_, i, j);
        }
        else{unget(0); var _d_ = r;}
       }
       else
        var _d_ = r;
       var left$0 = [0, _d_, left], left = left$0;
       continue;
      }
      var _c_ = caml_call1(Stdlib_List[9], left);
      return caml_call1(Re_Core[29], _c_);
     }
    }
    function integer(param){
     if(eos(0)) return 0;
     var d = get(0);
     if(9 < d - 48 >>> 0){unget(0); return 0;}
     var i = d - 48 | 0, i$0 = i;
     for(;;){
      if(eos(0)) return [0, i$0];
      var d$0 = get(0);
      if(9 < d$0 - 48 >>> 0){unget(0); return [0, i$0];}
      var i$1 = (10 * i$0 | 0) + (d$0 - 48 | 0) | 0;
      if(i$1 < i$0) throw caml_maybe_attach_backtrace(Parse_error, 1);
      var i$0 = i$1;
     }
    }
    function bracket(s){
     var s$0 = s;
     for(;;){
      if(0 !== s$0 && accept(93)) return s$0;
      var c = char$0(0);
      if(accept(45)){
       if(accept(93)){
        var _b_ = [0, caml_call1(Re_Core[27], 45), s$0];
        return [0, caml_call1(Re_Core[27], c), _b_];
       }
       var
        c$0 = char$0(0),
        s$1 = [0, caml_call2(Re_Core[58], c, c$0), s$0],
        s$0 = s$1;
      }
      else
       var s$2 = [0, caml_call1(Re_Core[27], c), s$0], s$0 = s$2;
     }
    }
    function char$0(param){
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var c = get(0);
     if(91 !== c) return c;
     if(accept(61)) throw caml_maybe_attach_backtrace(Not_supported, 1);
     if(accept(58)) throw caml_maybe_attach_backtrace(Not_supported, 1);
     if(! accept(46)) return c;
     if(eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     var c$0 = get(0);
     if(1 - accept(46)) throw caml_maybe_attach_backtrace(Not_supported, 1);
     if(1 - accept(93)) throw caml_maybe_attach_backtrace(Parse_error, 1);
     return c$0;
    }
    var res = regexp(0);
    if(1 - eos(0)) throw caml_maybe_attach_backtrace(Parse_error, 1);
    var
     r =
       caml_call2(Stdlib_List[37], 886285209, opts)
        ? caml_call1(Re_Core[79], res)
        : res,
     r$0 =
       caml_call2(Stdlib_List[37], 853495711, opts)
        ? caml_call1(Re_Core[54], r)
        : r;
    return r$0;
   }
   function compile(re){
    var _a_ = caml_call1(Re_Core[48], re);
    return caml_call1(Re_Core[2], _a_);
   }
   function compile_pat(opt, s){
    if(opt) var sth = opt[1], opts = sth; else var opts = 0;
    return compile(re([0, opts], s));
   }
   var Re_Posix = [0, Parse_error, Not_supported, re, compile, compile_pat];
   runtime.caml_register_global(4, Re_Posix, "Re__Posix");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Re
//# unitInfo: Requires: Re__Core
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Re_Core = global_data.Re__Core,
    Group = Re_Core[1],
    compile = Re_Core[2],
    group_count = Re_Core[3],
    group_names = Re_Core[4],
    exec = Re_Core[5],
    exec_opt = Re_Core[6],
    execp = Re_Core[7],
    exec_partial = Re_Core[8],
    exec_partial_detailed = Re_Core[9],
    Mark = Re_Core[10],
    all = Re_Core[11],
    all_gen = Re_Core[12],
    all_seq = Re_Core[13],
    matches = Re_Core[14],
    matches_gen = Re_Core[15],
    matches_seq = Re_Core[16],
    split = Re_Core[17],
    split_gen = Re_Core[18],
    split_seq = Re_Core[19],
    split_full = Re_Core[20],
    split_full_gen = Re_Core[21],
    split_full_seq = Re_Core[22],
    Seq = Re_Core[23],
    replace = Re_Core[24],
    replace_string = Re_Core[25],
    str = Re_Core[26],
    char$0 = Re_Core[27],
    alt = Re_Core[28],
    seq = Re_Core[29],
    empty = Re_Core[30],
    epsilon = Re_Core[31],
    rep = Re_Core[32],
    rep1 = Re_Core[33],
    repn = Re_Core[34],
    opt = Re_Core[35],
    bol = Re_Core[36],
    eol = Re_Core[37],
    bow = Re_Core[38],
    eow = Re_Core[39],
    bos = Re_Core[40],
    eos = Re_Core[41],
    leol = Re_Core[42],
    start = Re_Core[43],
    stop = Re_Core[44],
    word = Re_Core[45],
    not_boundary = Re_Core[46],
    whole_string = Re_Core[47],
    longest = Re_Core[48],
    shortest = Re_Core[49],
    first = Re_Core[50],
    greedy = Re_Core[51],
    non_greedy = Re_Core[52],
    group = Re_Core[53],
    no_group = Re_Core[54],
    nest = Re_Core[55],
    mark = Re_Core[56],
    set = Re_Core[57],
    rg = Re_Core[58],
    inter = Re_Core[59],
    diff = Re_Core[60],
    compl = Re_Core[61],
    any = Re_Core[62],
    notnl = Re_Core[63],
    alnum = Re_Core[64],
    wordc = Re_Core[65],
    alpha = Re_Core[66],
    ascii = Re_Core[67],
    blank = Re_Core[68],
    cntrl = Re_Core[69],
    digit = Re_Core[70],
    graph = Re_Core[71],
    lower = Re_Core[72],
    print = Re_Core[73],
    punct = Re_Core[74],
    space = Re_Core[75],
    upper = Re_Core[76],
    xdigit = Re_Core[77],
    case$0 = Re_Core[78],
    no_case = Re_Core[79],
    pp = Re_Core[80],
    pp_re = Re_Core[81],
    print_re = Re_Core[82],
    View = Re_Core[83],
    witness = Re_Core[84],
    get = Re_Core[85],
    get_ofs = Re_Core[86],
    get_all = Re_Core[87],
    get_all_ofs = Re_Core[88],
    test = Re_Core[89],
    marked = Re_Core[90],
    mark_set = Re_Core[91],
    Re =
      [0,
       Group,
       compile,
       group_count,
       group_names,
       exec,
       exec_opt,
       execp,
       exec_partial,
       exec_partial_detailed,
       Mark,
       all,
       all_gen,
       all_seq,
       matches,
       matches_gen,
       matches_seq,
       split,
       split_gen,
       split_seq,
       split_full,
       split_full_gen,
       split_full_seq,
       Seq,
       replace,
       replace_string,
       str,
       char$0,
       alt,
       seq,
       empty,
       epsilon,
       rep,
       rep1,
       repn,
       opt,
       bol,
       eol,
       bow,
       eow,
       bos,
       eos,
       leol,
       start,
       stop,
       word,
       not_boundary,
       whole_string,
       longest,
       shortest,
       first,
       greedy,
       non_greedy,
       group,
       no_group,
       nest,
       mark,
       set,
       rg,
       inter,
       diff,
       compl,
       any,
       notnl,
       alnum,
       wordc,
       alpha,
       ascii,
       blank,
       cntrl,
       digit,
       graph,
       lower,
       print,
       punct,
       space,
       upper,
       xdigit,
       case$0,
       no_case,
       pp,
       pp_re,
       print_re,
       View,
       witness,
       get,
       get_ofs,
       get_all,
       get_all_ofs,
       test,
       marked,
       mark_set];
   runtime.caml_register_global(1, Re, "Re");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
