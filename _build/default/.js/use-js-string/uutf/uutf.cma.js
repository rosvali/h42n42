// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Uutf
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Format, Stdlib__Printf, Stdlib__String, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_ISO_8859_1$0 = "ISO-8859-1",
    cst_US_ASCII$0 = "US-ASCII",
    cst_UTF_16$0 = "UTF-16",
    cst_UTF_16BE$0 = "UTF-16BE",
    cst_UTF_16LE$0 = "UTF-16LE",
    cst_UTF_8$0 = "UTF-8",
    cst_Await = "`Await",
    cst_End = "`End",
    cst_src_uutf_ml = "src/uutf.ml",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Format = global_data.Stdlib__Format,
    pp = Stdlib_Format[129],
    _A_ = [0, cst_src_uutf_ml, 363, 9],
    _t_ = [0, [11, cst_Await, 0], cst_Await],
    _u_ = [0, [11, cst_End, 0], cst_End],
    _v_ =
      [0,
       [18,
        [1, [0, 0, cst]],
        [11, "`Uchar U+", [4, 8, [0, 2, 4], 0, [17, 0, 0]]]],
       "@[`Uchar U+%04X@]"],
    _w_ =
      [0, [18, [1, [0, 0, cst]], [11, "`Malformed (", 0]], "@[`Malformed ("],
    _x_ = [0, [4, 8, [0, 2, 2], 0, 0], "%02X"],
    _z_ = [0, [12, 32, [4, 8, [0, 2, 2], 0, 0]], " %02X"],
    _y_ = [0, [12, 41, [17, 0, 0]], ")@]"],
    _o_ = [0, -211555818, 3299808],
    _j_ = [0, -211558048, 3299808],
    _p_ = [0, 684370880, 3299808],
    _n_ = [0, 684370880, 427938126],
    _k_ = [0, -211558048, 427938126],
    _l_ = [0, cst_src_uutf_ml, 153, 55],
    _m_ = [0, 684370880, 427938126],
    _q_ = [0, cst_src_uutf_ml, 152, 55],
    _r_ = [0, cst_src_uutf_ml, 154, 55],
    _s_ = [0, 684370880, 3455931],
    _i_ = [0, cst_src_uutf_ml, 120, 9],
    cst_UTF_8 = cst_UTF_8$0,
    cst_US_ASCII = cst_US_ASCII$0,
    cst_ISO_8859_1 = cst_ISO_8859_1$0,
    cst_UTF_16 = cst_UTF_16$0,
    cst_UTF_16LE = cst_UTF_16LE$0,
    cst_UTF_16BE = cst_UTF_16BE$0,
    _b_ = [0, 684370880],
    _c_ = [0, -211555818],
    _d_ = [0, -211558048],
    _e_ = [0, 143365725],
    _f_ = [0, 423112016],
    _g_ = [0, 338302576],
    _a_ =
      [0,
       [11,
        "invalid bounds (index ",
        [4, 0, 0, 0, [11, ", length ", [4, 0, 0, 0, [12, 41, 0]]]]],
       "invalid bounds (index %d, length %d)"],
    cst_expected_Await_encode = "expected `Await encode",
    _h_ =
      [0,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       1,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       2,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       3,
       4,
       4,
       4,
       4,
       4,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0,
       0];
   function invalid_bounds(j, l){
    var _az_ = caml_call3(Stdlib_Printf[4], _a_, j, l);
    return caml_call1(Stdlib[1], _az_);
   }
   function unsafe_set_byte(s, j, byte$0){
    runtime.caml_bytes_unsafe_set(s, j, byte$0);
    return;
   }
   var
    u_bom = caml_call1(Stdlib_Uchar[9], 65279),
    u_rep = caml_call1(Stdlib_Uchar[9], 65533);
   function encoding_of_string(s){
    var
     match = caml_call1(Stdlib_String[25], s),
     _ax_ = caml_string_compare(match, "ISO646-US");
    a:
    {
     b:
     {
      if(0 <= _ax_){
       if(0 >= _ax_) break b;
       var switch$0 = caml_string_compare(match, "US");
       if(0 <= switch$0){
        if(0 >= switch$0) break b;
        if(! caml_string_notequal(match, cst_US_ASCII$0)) break b;
        if(! caml_string_notequal(match, cst_UTF_16$0)) return _e_;
        if(! caml_string_notequal(match, cst_UTF_16BE$0)) return _d_;
        if(! caml_string_notequal(match, cst_UTF_16LE$0)) return _c_;
        if(caml_string_notequal(match, cst_UTF_8$0)) break a;
        return _b_;
       }
       if(! caml_string_notequal(match, "ISO_646.IRV:1991")) break b;
       if
        (caml_string_notequal(match, "ISO_8859-1")
         &&
          caml_string_notequal(match, "ISO_8859-1:1987")
          &&
           caml_string_notequal(match, "L1")
           && caml_string_notequal(match, "LATIN1"))
        break a;
      }
      else{
       var _ay_ = caml_string_compare(match, "CSISOLATIN1");
       if(0 <= _ay_){
        if(0 < _ay_){
         if(! caml_string_notequal(match, "IBM367")) break b;
         if
          (caml_string_notequal(match, "IBM819")
           &&
            caml_string_notequal(match, cst_ISO_8859_1$0)
            && caml_string_notequal(match, "ISO-IR-100")){
          if(caml_string_notequal(match, "ISO-IR-6")) break a;
          break b;
         }
        }
       }
       else{
        if(! caml_string_notequal(match, "ANSI_X3.4-1968")) break b;
        if(! caml_string_notequal(match, "ANSI_X3.4-1986")) break b;
        if(! caml_string_notequal(match, "ASCII")) break b;
        if(! caml_string_notequal(match, "CP367")) break b;
        if(caml_string_notequal(match, "CP819")){
         if(caml_string_notequal(match, "CSASCII")) break a;
         break b;
        }
       }
      }
      return _g_;
     }
     return _f_;
    }
    return 0;
   }
   function encoding_to_string(param){
    return 143365725 <= param
            ? 423112016
              <= param
              ? 684370880 <= param ? cst_UTF_8 : cst_US_ASCII
              : 338302576 <= param ? cst_ISO_8859_1 : cst_UTF_16
            : -211555818 <= param ? cst_UTF_16LE : cst_UTF_16BE;
   }
   function malformed(s, j, l){
    return [0, 659980059, caml_call3(Stdlib_Bytes[8], s, j, l)];
   }
   function malformed_pair(be, hi, s, j, l){
    var
     bs1 = caml_call3(Stdlib_Bytes[7], s, j, l),
     bs0 = caml_create_bytes(2);
    if(be) var j1 = 1, j0 = 0; else var j1 = 0, j0 = 1;
    unsafe_set_byte(bs0, j0, hi >>> 8 | 0);
    unsafe_set_byte(bs0, j1, hi & 255);
    var _aw_ = caml_call2(Stdlib_Bytes[14], bs0, bs1);
    return [0, 659980059, caml_call1(Stdlib_Bytes[48], _aw_)];
   }
   var utf_8_len = _h_.slice();
   function r_utf_8(s, j, l){
    function uchar(c){return [0, 852405675, caml_call1(Stdlib_Uchar[9], c)];}
    var switcher = l - 1 | 0;
    if(3 < switcher >>> 0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _i_], 1);
    switch(switcher){
      case 0:
       return uchar(caml_bytes_unsafe_get(s, j));
      case 1:
       var
        b0 = caml_bytes_unsafe_get(s, j),
        b1 = caml_bytes_unsafe_get(s, j + 1 | 0);
       return 2 === (b1 >>> 6 | 0)
               ? uchar((b0 & 31) << 6 | b1 & 63)
               : malformed(s, j, l);
      case 2:
       var
        b0$0 = caml_bytes_unsafe_get(s, j),
        b1$0 = caml_bytes_unsafe_get(s, j + 1 | 0),
        b2 = caml_bytes_unsafe_get(s, j + 2 | 0),
        c = (b0$0 & 15) << 12 | (b1$0 & 63) << 6 | b2 & 63;
       if(2 !== (b2 >>> 6 | 0)) return malformed(s, j, l);
       if(224 === b0$0){
        if(160 <= b1$0 && 191 >= b1$0) return uchar(c);
        return malformed(s, j, l);
       }
       if(237 !== b0$0)
        return 2 === (b1$0 >>> 6 | 0) ? uchar(c) : malformed(s, j, l);
       if(128 <= b1$0 && 159 >= b1$0) return uchar(c);
       return malformed(s, j, l);
      default:
       var
        b0$1 = caml_bytes_unsafe_get(s, j),
        b1$1 = caml_bytes_unsafe_get(s, j + 1 | 0),
        b2$0 = caml_bytes_unsafe_get(s, j + 2 | 0),
        b3 = caml_bytes_unsafe_get(s, j + 3 | 0),
        c$0 =
          (b0$1 & 7) << 18 | (b1$1 & 63) << 12 | (b2$0 & 63) << 6 | b3 & 63;
       if(2 === (b3 >>> 6 | 0) && 2 === (b2$0 >>> 6 | 0)){
        if(240 === b0$1){
         if(144 <= b1$1 && 191 >= b1$1) return uchar(c$0);
         return malformed(s, j, l);
        }
        if(244 !== b0$1)
         return 2 === (b1$1 >>> 6 | 0) ? uchar(c$0) : malformed(s, j, l);
        if(128 <= b1$1 && 143 >= b1$1) return uchar(c$0);
        return malformed(s, j, l);
       }
       return malformed(s, j, l);
    }
   }
   function r_utf_16(s, j0, j1){
    var
     b0 = caml_bytes_unsafe_get(s, j0),
     b1 = caml_bytes_unsafe_get(s, j1),
     u = b0 << 8 | b1;
    if(55296 <= u && 57343 >= u)
     return 56319 < u
             ? malformed(s, caml_call2(Stdlib[16], j0, j1), 2)
             : [0, 16161, u];
    return [0, 852405675, caml_call1(Stdlib_Uchar[9], u)];
   }
   function r_utf_16_lo(hi, s, j0, j1){
    var
     b0 = caml_bytes_unsafe_get(s, j0),
     b1 = caml_bytes_unsafe_get(s, j1),
     lo = b0 << 8 | b1;
    if(56320 <= lo && 57343 >= lo)
     return [0,
             852405675,
             caml_call1
              (Stdlib_Uchar[9], ((hi & 1023) << 10 | lo & 1023) + 65536 | 0)];
    return malformed_pair
            (j0 < j1 ? 1 : 0, hi, s, caml_call2(Stdlib[16], j0, j1), 2);
   }
   function r_encoding(s, j, l){
    function some(i){
     return i < l ? [0, caml_bytes_unsafe_get(s, j + i | 0)] : 0;
    }
    var match = some(0), match$0 = some(1), match$1 = some(2);
    if(! match){
     if(match$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _q_], 1);
     if(match$1)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _r_], 1);
     return _s_;
    }
    var p = match[1];
    a:
    {
     if(240 <= p){
      if(254 === p){
       if(! match$0) break a;
       if(255 === match$0[1]) return _j_;
      }
      else if(255 === p){
       if(! match$0) break a;
       if(254 === match$0[1]) return _o_;
      }
     }
     else if(0 === p){
      if(! match$0) break a;
      var p$0 = match$0[1];
      if(0 < p$0) return [0, -211558048, [0, 605782321, p$0]];
     }
     else if(239 <= p){
      if(! match$0) break a;
      if(187 === match$0[1]){
       if(! match$1) break a;
       if(191 === match$1[1]) return _p_;
       break a;
      }
     }
     if(match$0 && 0 === match$0[1] && 0 < p)
      return [0, -211555818, [0, 605782321, p]];
    }
    if(0 !== caml_check_bound(utf_8_len, p)[1 + p]) return _n_;
    if(match$0) return _k_;
    if(match$1)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _l_], 1);
    return _m_;
   }
   function pp_decode(ppf, param){
    if(typeof param === "number")
     return 1006505782 <= param
             ? caml_call2(pp, ppf, _t_)
             : caml_call2(pp, ppf, _u_);
    if(852405675 <= param[1]){
     var u = param[2];
     return caml_call3(pp, ppf, _v_, caml_call1(Stdlib_Uchar[10], u));
    }
    var bs = param[2], l = caml_ml_string_length(bs);
    caml_call2(pp, ppf, _w_);
    if(0 < l) caml_call3(pp, ppf, _x_, caml_string_get(bs, 0));
    var _au_ = l - 1 | 0, _at_ = 1;
    if(_au_ >= 1){
     var i = _at_;
     for(;;){
      caml_call3(pp, ppf, _z_, caml_string_get(bs, i));
      var _av_ = i + 1 | 0;
      if(_au_ === i) break;
      var i = _av_;
     }
    }
    return caml_call2(pp, ppf, _y_);
   }
   function i_rem(d){return (d[7] - d[6] | 0) + 1 | 0;}
   function eoi(d){
    d[5] = Stdlib_Bytes[3];
    d[6] = 0;
    d[7] = Stdlib[20];
    return 0;
   }
   function src(d, s, j, l){
    if(0 <= j && 0 <= l && caml_ml_bytes_length(s) >= (j + l | 0))
     return 0 === l
             ? eoi(d)
             : (d[5] = s, d[6] = j, d[7] = (j + l | 0) - 1 | 0, 0);
    return invalid_bounds(j, l);
   }
   function refill(k, d){
    var match = d[1];
    if(typeof match === "number"){d[18] = k; return 1006505782;}
    if(438511779 <= match[1]){
     var
      ic = match[2],
      rc = caml_call4(Stdlib[84], ic, d[5], 0, caml_ml_bytes_length(d[5]));
     src(d, d[5], 0, rc);
     return caml_call1(k, d);
    }
    eoi(d);
    return caml_call1(k, d);
   }
   function t_need(d, need){d[9] = 0; d[10] = need; return;}
   function t_fill(k, d){
    function blit(d, l){
     caml_blit_bytes(d[5], d[6], d[8], d[9], l);
     d[6] = d[6] + l | 0;
     d[9] = d[9] + l | 0;
     return;
    }
    var rem = i_rem(d);
    if(0 > rem) return caml_call1(k, d);
    var need = d[10] - d[9] | 0;
    return rem < need
            ? (blit
               (d, rem),
              refill(function(_as_){return t_fill(k, _as_);}, d))
            : (blit(d, need), caml_call1(k, d));
   }
   function ret(k, v, byte_count, d){
    d[18] = k;
    d[15] = d[15] + byte_count | 0;
    return caml_call2(d[17], d, v);
   }
   function decode_us_ascii(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_us_ascii, d) : 3455931;
    var j = d[6];
    d[6] = d[6] + 1 | 0;
    var
     s = d[5],
     b0 = caml_bytes_unsafe_get(s, j),
     _aq_ = 1,
     _ar_ =
       127 < b0
        ? malformed(s, j, 1)
        : [0, 852405675, caml_call1(Stdlib_Uchar[9], b0)];
    return ret(decode_us_ascii, _ar_, _aq_, d);
   }
   function decode_iso_8859_1(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_iso_8859_1, d) : 3455931;
    var j = d[6];
    d[6] = d[6] + 1 | 0;
    var s = d[5];
    return ret
            (decode_iso_8859_1,
             [0,
              852405675,
              caml_call1(Stdlib_Uchar[9], caml_bytes_unsafe_get(s, j))],
             1,
             d);
   }
   function t_decode_utf_8(d){
    if(d[9] < d[10]){
     var _ao_ = d[9];
     return ret(decode_utf_8, malformed(d[8], 0, d[9]), _ao_, d);
    }
    var _ap_ = d[9];
    return ret(decode_utf_8, r_utf_8(d[8], 0, d[9]), _ap_, d);
   }
   function decode_utf_8(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_utf_8, d) : 3455931;
    var need = utf_8_len[1 + caml_bytes_unsafe_get(d[5], d[6])];
    if(rem < need){t_need(d, need); return t_fill(t_decode_utf_8, d);}
    var j = d[6];
    return 0 === need
            ? (d
               [6]
              = d[6] + 1 | 0,
              ret(decode_utf_8, malformed(d[5], j, 1), 1, d))
            : (d
               [6]
              = d[6] + need | 0,
              ret(decode_utf_8, r_utf_8(d[5], j, need), need, d));
   }
   function t_decode_utf_16be_lo(hi, d){
    var bcount = d[9] + 2 | 0;
    return d[9] < d[10]
            ? ret
              (decode_utf_16be,
               malformed_pair(1, hi, d[8], 0, d[9]),
               bcount,
               d)
            : ret(decode_utf_16be, r_utf_16_lo(hi, d[8], 0, 1), bcount, d);
   }
   function t_decode_utf_16be(d){
    if(d[9] >= d[10]) return decode_utf_16be_lo(r_utf_16(d[8], 0, 1), d);
    var _an_ = d[9];
    return ret(decode_utf_16be, malformed(d[8], 0, d[9]), _an_, d);
   }
   function decode_utf_16be_lo(v, d){
    if(659980059 <= v[1]) return ret(decode_utf_16be, v, 2, d);
    var hi = v[2], rem = i_rem(d);
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return ret(decode_utf_16be, r_utf_16_lo(hi, d[5], j, j + 1 | 0), 4, d);
    }
    t_need(d, 2);
    return t_fill(function(_am_){return t_decode_utf_16be_lo(hi, _am_);}, d);
   }
   function decode_utf_16be(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_utf_16be, d) : 3455931;
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return decode_utf_16be_lo(r_utf_16(d[5], j, j + 1 | 0), d);
    }
    t_need(d, 2);
    return t_fill(t_decode_utf_16be, d);
   }
   function t_decode_utf_16le_lo(hi, d){
    var bcount = d[9] + 2 | 0;
    return d[9] < d[10]
            ? ret
              (decode_utf_16le,
               malformed_pair(0, hi, d[8], 0, d[9]),
               bcount,
               d)
            : ret(decode_utf_16le, r_utf_16_lo(hi, d[8], 1, 0), bcount, d);
   }
   function t_decode_utf_16le(d){
    if(d[9] >= d[10]) return decode_utf_16le_lo(r_utf_16(d[8], 1, 0), d);
    var _al_ = d[9];
    return ret(decode_utf_16le, malformed(d[8], 0, d[9]), _al_, d);
   }
   function decode_utf_16le_lo(v, d){
    if(659980059 <= v[1]) return ret(decode_utf_16le, v, 2, d);
    var hi = v[2], rem = i_rem(d);
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return ret(decode_utf_16le, r_utf_16_lo(hi, d[5], j + 1 | 0, j), 4, d);
    }
    t_need(d, 2);
    return t_fill(function(_ak_){return t_decode_utf_16le_lo(hi, _ak_);}, d);
   }
   function decode_utf_16le(d){
    var rem = i_rem(d);
    if(0 >= rem) return 0 <= rem ? refill(decode_utf_16le, d) : 3455931;
    if(2 <= rem){
     var j = d[6];
     d[6] = d[6] + 2 | 0;
     return decode_utf_16le_lo(r_utf_16(d[5], j + 1 | 0, j), d);
    }
    t_need(d, 2);
    return t_fill(t_decode_utf_16le, d);
   }
   function guessed_utf_16(d, be, v){
    if(be)
     var
      j1 = 1,
      j0 = 0,
      t_decode_utf_16_lo = t_decode_utf_16be_lo,
      t_decode_utf_16 = t_decode_utf_16be,
      decode_utf_16 = decode_utf_16be;
    else
     var
      j1 = 0,
      j0 = 1,
      t_decode_utf_16_lo = t_decode_utf_16le_lo,
      t_decode_utf_16 = t_decode_utf_16le,
      decode_utf_16 = decode_utf_16le;
    function b3(k, d){
     return 3 <= d[9]
             ? (d
                [10]
               = 2,
               d[9] = 1,
               unsafe_set_byte(d[8], 0, caml_bytes_unsafe_get(d[8], 2)),
               t_fill(k, d))
             : decode_utf_16(d);
    }
    if(typeof v !== "number"){
     var
      u = v[2],
      _ae_ = 2,
      _af_ = [0, 852405675, caml_call1(Stdlib_Uchar[9], u)];
     return ret
             (function(_aj_){return b3(t_decode_utf_16, _aj_);},
              _af_,
              _ae_,
              d);
    }
    if(427938126 > v){
     var _ac_ = 2, _ad_ = [0, 852405675, u_bom];
     return ret
             (function(_ai_){return b3(t_decode_utf_16, _ai_);},
              _ad_,
              _ac_,
              d);
    }
    var v$0 = r_utf_16(d[8], j0, j1);
    if(659980059 <= v$0[1]){
     var _aa_ = 2;
     return ret
             (function(_ah_){return b3(t_decode_utf_16, _ah_);}, v$0, _aa_, d);
    }
    var hi = v$0[2];
    if(3 <= d[9])
     return b3(function(_ag_){return t_decode_utf_16_lo(hi, _ag_);}, d);
    var _ab_ = d[9];
    return ret
            (decode_utf_16,
             malformed_pair(be, hi, Stdlib_Bytes[3], 0, 0),
             _ab_,
             d);
   }
   function guess_encoding(d){
    function setup(d){
     var match = r_encoding(d[8], 0, d[9]), _$_ = match[1];
     if(-211555818 === _$_){
      var r = match[2];
      d[2] = -211555818;
      d[18] = decode_utf_16le;
      return guessed_utf_16(d, 0, r);
     }
     if(684370880 > _$_){
      var r$1 = match[2];
      d[2] = -211558048;
      d[18] = decode_utf_16be;
      return guessed_utf_16(d, 1, r$1);
     }
     var r$0 = match[2];
     d[2] = 684370880;
     d[18] = decode_utf_8;
     if(3455931 === r$0) return 3455931;
     if(427938126 > r$0)
      return ret(decode_utf_8, [0, 852405675, u_bom], 3, d);
     function b3(d){
      var
       b3 = caml_bytes_unsafe_get(d[8], 2),
       n = caml_check_bound(utf_8_len, b3)[1 + b3];
      return 0 === n
              ? ret(decode_utf_8, malformed(d[8], 2, 1), 1, d)
              : (d
                 [10]
                = n,
                d[9] = 1,
                unsafe_set_byte(d[8], 0, b3),
                t_fill(t_decode_utf_8, d));
     }
     function b2(d){
      var
       b2 = caml_bytes_unsafe_get(d[8], 1),
       b3$0 = 2 < d[9] ? b3 : decode_utf_8,
       n = caml_check_bound(utf_8_len, b2)[1 + b2];
      if(0 === n) return ret(b3$0, malformed(d[8], 1, 1), 1, d);
      if(1 === n) return ret(b3$0, r_utf_8(d[8], 1, 1), 1, d);
      d[10] = n;
      unsafe_set_byte(d[8], 0, b2);
      if(3 <= d[9]){
       d[9] = 2;
       unsafe_set_byte(d[8], 1, caml_bytes_unsafe_get(d[8], 2));
      }
      else
       d[9] = 1;
      return t_fill(t_decode_utf_8, d);
     }
     var
      b1 = caml_bytes_unsafe_get(d[8], 0),
      b2$0 = 1 < d[9] ? b2 : decode_utf_8,
      n = caml_check_bound(utf_8_len, b1)[1 + b1];
     if(4 < n >>> 0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _A_], 1);
     switch(n){
       case 0:
        return ret(b2$0, malformed(d[8], 0, 1), 1, d);
       case 1:
        return ret(b2$0, r_utf_8(d[8], 0, 1), 1, d);
       case 2:
        return 2 <= d[9]
                ? 3
                  <= d[9]
                  ? ret(b3, r_utf_8(d[8], 0, 2), 2, d)
                  : ret(decode_utf_8, r_utf_8(d[8], 0, 2), 2, d)
                : ret(decode_utf_8, malformed(d[8], 0, 1), 1, d);
       case 3:
        if(3 <= d[9]) return ret(decode_utf_8, r_utf_8(d[8], 0, 3), 3, d);
        var _Z_ = d[9];
        return ret(decode_utf_8, malformed(d[8], 0, d[9]), _Z_, d);
       default:
        if(3 <= d[9]){d[10] = 4; return t_fill(t_decode_utf_8, d);}
        var ___ = d[9];
        return ret(decode_utf_8, malformed(d[8], 0, d[9]), ___, d);
     }
    }
    t_need(d, 3);
    return t_fill(setup, d);
   }
   function nline(d){d[14] = 0; d[13] = d[13] + 1 | 0; return;}
   function ncol(d){d[14] = d[14] + 1 | 0; return;}
   function ncount(d){d[16] = d[16] + 1 | 0; return;}
   function cr(d, b){d[12] = b; return;}
   function pp_nln_none(d, v){
    if(852405675 > v[1]){cr(d, 0); ncount(d); ncol(d); return v;}
    var u = v[2], _Y_ = caml_call1(Stdlib_Uchar[10], u) - 133 | 0;
    a:
    {
     if(8100 < _Y_ >>> 0){
      var switcher = _Y_ + 123 | 0;
      if(3 < switcher >>> 0) break a;
      switch(switcher){
        case 0:
         var last_cr = d[12];
         cr(d, 0);
         ncount(d);
         return last_cr ? v : (nline(d), v);
        case 1:
         break a;
        case 2: break;
        default: cr(d, 1); ncount(d); nline(d); return v;
      }
     }
     else if(8097 >= _Y_ - 1 >>> 0) break a;
     cr(d, 0);
     ncount(d);
     nline(d);
     return v;
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return v;
   }
   function pp_nln_readline(d, v){
    if(852405675 > v[1]){cr(d, 0); ncount(d); ncol(d); return v;}
    var u = v[2], _X_ = caml_call1(Stdlib_Uchar[10], u) - 133 | 0;
    a:
    {
     if(8100 < _X_ >>> 0){
      var switcher = _X_ + 123 | 0;
      if(3 < switcher >>> 0) break a;
      switch(switcher){
        case 0:
         var last_cr = d[12];
         cr(d, 0);
         return last_cr
                 ? caml_call1(d[18], d)
                 : (ncount(d), nline(d), [0, 852405675, d[4]]);
        case 1:
         break a;
        case 2: break;
        default: cr(d, 1); ncount(d); nline(d); return [0, 852405675, d[4]];
      }
     }
     else if(8097 >= _X_ - 1 >>> 0) break a;
     cr(d, 0);
     ncount(d);
     nline(d);
     return [0, 852405675, d[4]];
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return v;
   }
   function pp_nln_nlf(d, v){
    if(852405675 > v[1]){cr(d, 0); ncount(d); ncol(d); return v;}
    var u = v[2], match = caml_call1(Stdlib_Uchar[10], u);
    a:
    {
     if(14 <= match){
      if(8232 <= match){
       if(8234 > match) break a;
      }
      else if(133 === match){
       cr(d, 0);
       ncount(d);
       nline(d);
       return [0, 852405675, d[4]];
      }
     }
     else if(10 <= match)
      switch(match - 10 | 0){
        case 0:
         var last_cr = d[12];
         cr(d, 0);
         return last_cr
                 ? caml_call1(d[18], d)
                 : (ncount(d), nline(d), [0, 852405675, d[4]]);
        case 1: break;
        case 2:
         break a;
        default: cr(d, 1); ncount(d); nline(d); return [0, 852405675, d[4]];
      }
     cr(d, 0);
     ncount(d);
     ncol(d);
     return v;
    }
    cr(d, 0);
    ncount(d);
    nline(d);
    return v;
   }
   function pp_nln_ascii(d, v){
    if(852405675 > v[1]){cr(d, 0); ncount(d); ncol(d); return v;}
    var u = v[2], _W_ = caml_call1(Stdlib_Uchar[10], u) - 133 | 0;
    a:
    {
     if(8100 < _W_ >>> 0){
      var switcher = _W_ + 123 | 0;
      if(3 < switcher >>> 0) break a;
      switch(switcher){
        case 0:
         var last_cr = d[12];
         cr(d, 0);
         return last_cr
                 ? caml_call1(d[18], d)
                 : (ncount(d), nline(d), [0, 852405675, d[4]]);
        case 1:
         break a;
        case 2: break;
        default: cr(d, 1); ncount(d); nline(d); return [0, 852405675, d[4]];
      }
     }
     else if(8097 >= _W_ - 1 >>> 0) break a;
     cr(d, 0);
     ncount(d);
     nline(d);
     return v;
    }
    cr(d, 0);
    ncount(d);
    ncol(d);
    return v;
   }
   function decode_fun(param){
    return 143365725 <= param
            ? 423112016
              <= param
              ? 684370880 <= param ? decode_utf_8 : decode_us_ascii
              : 338302576 <= param ? decode_iso_8859_1 : decode_utf_16be
            : -211555818 <= param ? decode_utf_16le : decode_utf_16be;
   }
   function decoder(nln, encoding, src){
    if(nln){
     var match = nln[1], _V_ = match[1];
     if(3895880 === _V_)
      var nl = match[2], nl$0 = nl, pp = pp_nln_nlf;
     else if(605782321 <= _V_)
      var nl$1 = match[2], nl$0 = nl$1, pp = pp_nln_ascii;
     else
      var nl$2 = match[2], nl$0 = nl$2, pp = pp_nln_readline;
    }
    else
     var
      nl$3 = caml_call1(Stdlib_Uchar[9], 10),
      nl$0 = nl$3,
      pp = pp_nln_none;
    if(encoding)
     var e = encoding[1], k = decode_fun(e), encoding$0 = e;
    else
     var k = guess_encoding, encoding$0 = 684370880;
    if(typeof src === "number")
     var i_max = 0, i_pos = 1, i = Stdlib_Bytes[3];
    else if(438511779 <= src[1])
     var i_max = 0, i_pos = 1, i = caml_create_bytes(65536);
    else
     var
      s = src[2],
      i_max$0 = caml_ml_string_length(s) - 1 | 0,
      i$0 = caml_call1(Stdlib_Bytes[49], s),
      i_max = i_max$0,
      i_pos = 0,
      i = i$0;
    var utf16 = 143365725 === encoding$0 ? 1 : 0;
    return [0,
            src,
            encoding$0,
            nln,
            nl$0,
            i,
            i_pos,
            i_max,
            caml_create_bytes(4),
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            function(d, v){
             if(852405675 > v[1]){
              d[11] = 0;
              d[17] = pp;
              return caml_call2(d[17], d, v);
             }
             var u = v[2], match = caml_call1(Stdlib_Uchar[10], u);
             if(65279 === match){
              if(utf16){d[2] = -211558048; d[18] = decode_utf_16be;}
              d[11] = 1;
              d[17] = pp;
              return caml_call1(d[18], d);
             }
             if(65534 === match && utf16){
              d[2] = -211555818;
              d[18] = decode_utf_16le;
              d[11] = 1;
              d[17] = pp;
              return caml_call1(d[18], d);
             }
             d[11] = 0;
             d[17] = pp;
             return caml_call2(d[17], d, v);
            },
            k];
   }
   function decode(d){return caml_call1(d[18], d);}
   function decoder_line(d){return d[13];}
   function decoder_col(d){return d[14];}
   function decoder_byte_count(d){return d[15];}
   function decoder_count(d){return d[16];}
   function decoder_removed_bom(d){return d[11];}
   function decoder_src(d){return d[1];}
   function decoder_nln(d){return d[3];}
   function decoder_encoding(d){return d[2];}
   function set_decoder_encoding(d, e){
    d[2] = e;
    d[18] = decode_fun(e);
    return 0;
   }
   function o_rem(e){return (e[5] - e[4] | 0) + 1 | 0;}
   function dst(e, s, j, l){
    var _S_ = j < 0 ? 1 : 0;
    if(_S_)
     var _T_ = _S_;
    else
     var
      _U_ = l < 0 ? 1 : 0,
      _T_ = _U_ || (caml_ml_bytes_length(s) < (j + l | 0) ? 1 : 0);
    if(_T_) invalid_bounds(j, l);
    e[3] = s;
    e[4] = j;
    e[5] = (j + l | 0) - 1 | 0;
    return 0;
   }
   function flush(k, e){
    var match = e[1];
    if(typeof match === "number"){
     e[9] =
      function(e, param){
       if(typeof param === "number" && 1006505782 <= param)
        return caml_call1(k, e);
       return caml_call1(Stdlib[1], cst_expected_Await_encode);
      };
     return 939392865;
    }
    if(438511779 <= match[1]){
     var oc = match[2];
     caml_call4(Stdlib[68], oc, e[3], 0, e[4]);
     e[4] = 0;
     return caml_call1(k, e);
    }
    var b = match[2], o = caml_call1(Stdlib_Bytes[48], e[3]);
    caml_call4(Stdlib_Buffer[18], b, o, 0, e[4]);
    e[4] = 0;
    return caml_call1(k, e);
   }
   function t_range(e, max){e[7] = 0; e[8] = max; return;}
   function t_flush(k, e){
    function blit(e, l){
     caml_blit_bytes(e[6], e[7], e[3], e[4], l);
     e[4] = e[4] + l | 0;
     e[7] = e[7] + l | 0;
     return;
    }
    var rem = o_rem(e), len = (e[8] - e[7] | 0) + 1 | 0;
    return rem < len
            ? (blit(e, rem), flush(function(_R_){return t_flush(k, _R_);}, e))
            : (blit(e, len), caml_call1(k, e));
   }
   function encode_utf_8(e, v){
    function k(e){e[9] = encode_utf_8; return 17724;}
    if(typeof v === "number") return 1006505782 <= v ? k(e) : flush(k, e);
    var u = v[2], u$0 = caml_call1(Stdlib_Uchar[10], u), rem = o_rem(e);
    if(127 >= u$0)
     return 1 <= rem
             ? (unsafe_set_byte(e[3], e[4], u$0), e[4] = e[4] + 1 | 0, k(e))
             : flush(function(e){return encode_utf_8(e, v);}, e);
    if(2047 >= u$0){
     if(2 <= rem){
      var j$3 = e[4];
      e[4] = e[4] + 2 | 0;
      var s$3 = e[3], k$2 = k, j$4 = j$3, s$4 = s$3;
     }
     else{
      t_range(e, 1);
      var
       _N_ = function(_Q_){return t_flush(k, _Q_);},
       k$2 = _N_,
       j$4 = 0,
       s$4 = e[6];
     }
     unsafe_set_byte(s$4, j$4, 192 | u$0 >>> 6 | 0);
     unsafe_set_byte(s$4, j$4 + 1 | 0, 128 | u$0 & 63);
     return k$2(e);
    }
    if(65535 < u$0){
     if(4 <= rem){
      var j = e[4];
      e[4] = e[4] + 4 | 0;
      var s = e[3], k$0 = k, j$0 = j, s$0 = s;
     }
     else{
      t_range(e, 3);
      var
       _L_ = function(_P_){return t_flush(k, _P_);},
       k$0 = _L_,
       j$0 = 0,
       s$0 = e[6];
     }
     unsafe_set_byte(s$0, j$0, 240 | u$0 >>> 18 | 0);
     unsafe_set_byte(s$0, j$0 + 1 | 0, 128 | (u$0 >>> 12 | 0) & 63);
     unsafe_set_byte(s$0, j$0 + 2 | 0, 128 | (u$0 >>> 6 | 0) & 63);
     unsafe_set_byte(s$0, j$0 + 3 | 0, 128 | u$0 & 63);
     return k$0(e);
    }
    if(3 <= rem){
     var j$1 = e[4];
     e[4] = e[4] + 3 | 0;
     var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
    }
    else{
     t_range(e, 2);
     var
      _M_ = function(_O_){return t_flush(k, _O_);},
      k$1 = _M_,
      j$2 = 0,
      s$2 = e[6];
    }
    unsafe_set_byte(s$2, j$2, 224 | u$0 >>> 12 | 0);
    unsafe_set_byte(s$2, j$2 + 1 | 0, 128 | (u$0 >>> 6 | 0) & 63);
    unsafe_set_byte(s$2, j$2 + 2 | 0, 128 | u$0 & 63);
    return k$1(e);
   }
   function encode_utf_16be(e, v){
    function k(e){e[9] = encode_utf_16be; return 17724;}
    if(typeof v === "number") return 1006505782 <= v ? k(e) : flush(k, e);
    var u = v[2], u$0 = caml_call1(Stdlib_Uchar[10], u), rem = o_rem(e);
    if(65536 <= u$0){
     if(4 <= rem){
      var j = e[4];
      e[4] = e[4] + 4 | 0;
      var s = e[3], k$0 = k, j$0 = j, s$0 = s;
     }
     else{
      t_range(e, 3);
      var
       _H_ = function(_K_){return t_flush(k, _K_);},
       k$0 = _H_,
       j$0 = 0,
       s$0 = e[6];
     }
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_byte(s$0, j$0, hi >>> 8 | 0);
     unsafe_set_byte(s$0, j$0 + 1 | 0, hi & 255);
     unsafe_set_byte(s$0, j$0 + 2 | 0, lo >>> 8 | 0);
     unsafe_set_byte(s$0, j$0 + 3 | 0, lo & 255);
     return k$0(e);
    }
    if(2 <= rem){
     var j$1 = e[4];
     e[4] = e[4] + 2 | 0;
     var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
    }
    else{
     t_range(e, 1);
     var
      _I_ = function(_J_){return t_flush(k, _J_);},
      k$1 = _I_,
      j$2 = 0,
      s$2 = e[6];
    }
    unsafe_set_byte(s$2, j$2, u$0 >>> 8 | 0);
    unsafe_set_byte(s$2, j$2 + 1 | 0, u$0 & 255);
    return k$1(e);
   }
   function encode_utf_16le(e, v){
    function k(e){e[9] = encode_utf_16le; return 17724;}
    if(typeof v === "number") return 1006505782 <= v ? k(e) : flush(k, e);
    var u = v[2], u$0 = caml_call1(Stdlib_Uchar[10], u), rem = o_rem(e);
    if(65536 <= u$0){
     if(4 <= rem){
      var j = e[4];
      e[4] = e[4] + 4 | 0;
      var s = e[3], k$0 = k, j$0 = j, s$0 = s;
     }
     else{
      t_range(e, 3);
      var
       _D_ = function(_G_){return t_flush(k, _G_);},
       k$0 = _D_,
       j$0 = 0,
       s$0 = e[6];
     }
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_byte(s$0, j$0, hi & 255);
     unsafe_set_byte(s$0, j$0 + 1 | 0, hi >>> 8 | 0);
     unsafe_set_byte(s$0, j$0 + 2 | 0, lo & 255);
     unsafe_set_byte(s$0, j$0 + 3 | 0, lo >>> 8 | 0);
     return k$0(e);
    }
    if(2 <= rem){
     var j$1 = e[4];
     e[4] = e[4] + 2 | 0;
     var s$1 = e[3], k$1 = k, j$2 = j$1, s$2 = s$1;
    }
    else{
     t_range(e, 1);
     var
      _E_ = function(_F_){return t_flush(k, _F_);},
      k$1 = _E_,
      j$2 = 0,
      s$2 = e[6];
    }
    unsafe_set_byte(s$2, j$2, u$0 & 255);
    unsafe_set_byte(s$2, j$2 + 1 | 0, u$0 >>> 8 | 0);
    return k$1(e);
   }
   function encoder(encoding, dst){
    if(typeof dst === "number")
     var o_max = 0, o_pos = 1, o = Stdlib_Bytes[3];
    else
     var o$0 = caml_create_bytes(65536), o_max = 65535, o_pos = 0, o = o$0;
    var
     _C_ =
       143365725 <= encoding
        ? 684370880 <= encoding ? encode_utf_8 : encode_utf_16be
        : -211555818 <= encoding ? encode_utf_16le : encode_utf_16be;
    return [0,
            dst,
            encoding,
            o,
            o_pos,
            o_max,
            caml_create_bytes(4),
            1,
            0,
            _C_];
   }
   function encode(e, v){return caml_call2(e[9], e, v);}
   function encoder_encoding(e){return e[2];}
   function encoder_dst(e){return e[1];}
   var Manual = [0, src, dst, o_rem];
   function encoding_guess(s){
    var
     s$0 = caml_call1(Stdlib_Bytes[49], s),
     match =
       r_encoding
        (s$0, 0, caml_call2(Stdlib[17], caml_ml_bytes_length(s$0), 3)),
     _B_ = match[1];
    if(-211555818 === _B_){
     var d = match[2];
     return [0, -211555818, 3299808 === d ? 1 : 0];
    }
    if(684370880 <= _B_){
     var d$0 = match[2];
     return [0, 684370880, 3299808 === d$0 ? 1 : 0];
    }
    var d$1 = match[2];
    return [0, -211558048, 3299808 === d$1 ? 1 : 0];
   }
   function fold_utf_8(opt, len, f, acc, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var
     last = (pos + len$0 | 0) - 1 | 0,
     s$0 = caml_call1(Stdlib_Bytes[49], s),
     acc$0 = acc,
     i = pos;
    for(;;){
     if(last < i) return acc$0;
     var need = utf_8_len[1 + caml_bytes_unsafe_get(s$0, i)];
     if(0 === need)
      var
       i$0 = i + 1 | 0,
       acc$1 = caml_call3(f, acc$0, i, malformed(s$0, i, 1)),
       acc$0 = acc$1,
       i = i$0;
     else{
      var rem = (last - i | 0) + 1 | 0;
      if(rem < need) return caml_call3(f, acc$0, i, malformed(s$0, i, rem));
      var
       i$1 = i + need | 0,
       acc$2 = caml_call3(f, acc$0, i, r_utf_8(s$0, i, need)),
       acc$0 = acc$2,
       i = i$1;
     }
    }
   }
   function fold_utf_16be(opt, len, f, acc, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var
     last = (pos + len$0 | 0) - 1 | 0,
     s$0 = caml_call1(Stdlib_Bytes[49], s),
     acc$0 = acc,
     i = pos;
    for(;;){
     if(last < i) return acc$0;
     var rem = (last - i | 0) + 1 | 0;
     if(2 > rem) return caml_call3(f, acc$0, i, malformed(s$0, i, 1));
     var v = r_utf_16(s$0, i, i + 1 | 0);
     if(659980059 <= v[1])
      var
       i$0 = i + 2 | 0,
       acc$1 = caml_call3(f, acc$0, i, v),
       acc$0 = acc$1,
       i = i$0;
     else{
      var hi = v[2];
      if(4 > rem) return caml_call3(f, acc$0, i, malformed(s$0, i, rem));
      var
       i$1 = i + 4 | 0,
       acc$2 =
         caml_call3(f, acc$0, i, r_utf_16_lo(hi, s$0, i + 2 | 0, i + 3 | 0)),
       acc$0 = acc$2,
       i = i$1;
     }
    }
   }
   function fold_utf_16le(opt, len, f, acc, s){
    if(opt) var sth = opt[1], pos = sth; else var pos = 0;
    if(len)
     var l = len[1], len$0 = l;
    else
     var len$0 = caml_ml_string_length(s) - pos | 0;
    var
     last = (pos + len$0 | 0) - 1 | 0,
     s$0 = caml_call1(Stdlib_Bytes[49], s),
     acc$0 = acc,
     i = pos;
    for(;;){
     if(last < i) return acc$0;
     var rem = (last - i | 0) + 1 | 0;
     if(2 > rem) return caml_call3(f, acc$0, i, malformed(s$0, i, 1));
     var v = r_utf_16(s$0, i + 1 | 0, i);
     if(659980059 <= v[1])
      var
       i$0 = i + 2 | 0,
       acc$1 = caml_call3(f, acc$0, i, v),
       acc$0 = acc$1,
       i = i$0;
     else{
      var hi = v[2];
      if(4 > rem) return caml_call3(f, acc$0, i, malformed(s$0, i, rem));
      var
       i$1 = i + 4 | 0,
       acc$2 =
         caml_call3(f, acc$0, i, r_utf_16_lo(hi, s$0, i + 3 | 0, i + 2 | 0)),
       acc$0 = acc$2,
       i = i$1;
     }
    }
   }
   var String = [0, encoding_guess, fold_utf_8, fold_utf_16be, fold_utf_16le];
   function add_utf_8(b, u){
    var u$0 = caml_call1(Stdlib_Uchar[10], u);
    function w(byte$0){return caml_call2(Stdlib_Buffer[12], b, byte$0);}
    return 127 < u$0
            ? 2047
              < u$0
              ? 65535
                < u$0
                ? (w
                   (240 | u$0 >>> 18 | 0),
                  w(128 | (u$0 >>> 12 | 0) & 63),
                  w(128 | (u$0 >>> 6 | 0) & 63),
                  w(128 | u$0 & 63))
                : (w
                   (224 | u$0 >>> 12 | 0),
                  w(128 | (u$0 >>> 6 | 0) & 63),
                  w(128 | u$0 & 63))
              : (w(192 | u$0 >>> 6 | 0), w(128 | u$0 & 63))
            : w(u$0);
   }
   function add_utf_16be(b, u){
    var u$0 = caml_call1(Stdlib_Uchar[10], u);
    function w(byte$0){return caml_call2(Stdlib_Buffer[12], b, byte$0);}
    if(65536 <= u$0){
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     w(hi >>> 8 | 0);
     w(hi & 255);
     w(lo >>> 8 | 0);
     return w(lo & 255);
    }
    w(u$0 >>> 8 | 0);
    return w(u$0 & 255);
   }
   function add_utf_16le(b, u){
    var u$0 = caml_call1(Stdlib_Uchar[10], u);
    function w(byte$0){return caml_call2(Stdlib_Buffer[12], b, byte$0);}
    if(65536 <= u$0){
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     w(hi & 255);
     w(hi >>> 8 | 0);
     w(lo & 255);
     return w(lo >>> 8 | 0);
    }
    w(u$0 & 255);
    return w(u$0 >>> 8 | 0);
   }
   var
    Buffer = [0, add_utf_8, add_utf_16be, add_utf_16le],
    Uutf =
      [0,
       u_bom,
       u_rep,
       encoding_of_string,
       encoding_to_string,
       decoder,
       decode,
       decoder_encoding,
       set_decoder_encoding,
       decoder_line,
       decoder_col,
       decoder_byte_count,
       decoder_count,
       decoder_removed_bom,
       decoder_src,
       decoder_nln,
       pp_decode,
       encoder,
       encode,
       encoder_encoding,
       encoder_dst,
       Manual,
       String,
       Buffer];
   runtime.caml_register_global(66, Uutf, "Uutf");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJ1dXRmLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6W10sInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7O0c7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0ksVztJLE87Rzs7STs7RztHO0ksUTtJLFE7O0k7SyxROzs7Ozs7Ozs7Ozs7d0Q7MEQ7MEQ7O1E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O007O0s7O0k7Rzs7STs7Ozs7O0c7O0ksc0I7Rzs7STtLLE07SyxNOztJO0k7SSxXO0ksc0I7Rzs7O0ksa0Isc0IsZ0M7OztLLE07OztPLGE7O087USxLO1EsSzs7Ozs7TztRLE87USxPO1EsSzs7Z0M7O3VDO1E7Ozs7c0M7Tzs7TztRLE87USxPO1EsTztRLEs7Ozs7O3dDO1M7Ozs7dUM7UTs7Tzs7Rzs7STtLLEs7SyxLOzs7OzRCOztJLHNCO0c7O0k7SyxLO0ssSzs7O0s7O2E7O0k7cUM7Rzs7O0ssbUI7STtJLEksaUIsbUI7OztNLE07O00sTTtLOzs7Ozs7Ozs4Qjs7Ozs4Qjs7Ozs7O00sWTs7Ozs7OzhCOzs7OztNOztJLGdEO2dCOztLLE07STtHOztJOztlO2U7OztLLE8seUI7O0ksbUIsSTtJO2MseUI7SSxJLGtCOzs7O00seUI7TTs7Ozs7SSxPOztxQixpQzs7STs7OztHOztJOzs7O0k7Rzs7STs2Qzs7Szs7TSxLO0s7SyxPOztJO0ksTztHOzRCLCtCOzs7Szs7OztJO0k7SSxZLE87Ozs7O29DOzhCO0c7O0k7O0ksTztHOztJO0k7OztJOztLLEs7O0s7Ozt5QjtJO0c7O0k7STs7OztJOzs7O2MsNEI7OztHOztJOztLOzs7STtHOztJO0k7SSx5QjttQixpQjs7STs7Ozs7Ozs7O0c7O0k7Ozs7Ozs7O0c7O0ksa0I7O0k7Rzs7SSxzQjtJLGU7STs7O0s7O0k7SSw2QjtHOztJO0k7Ozs7Szs7STtJO0c7O0k7Ozs7Ozs7O0c7O0ksa0I7O0k7Rzs7SSxzQjtJLGU7STs7O0s7O0k7SSw2QjtHOztJO0k7Ozs7Szs7STtJO0c7O0k7Ozs7Ozs7Ozs7Ozs7OztLOzs7Ozt3Qzs7O0k7O0s7O007TSxzQjtLOzZCOzs7Ozs7SyxjO0s7NkI7Ozs7O0k7OztLOzZCOzs7OzhCOztJOzs7OztHOzs7SyxJOzs7OztNOzs7Ozs7TTs7Ozs7eUI7O007O007TyxLO087Ozs7Ozs7OztLOztNO08sSzs7TztrQjtrQjs7TTs7O08seUI7Ozs7TTtLO0s7TSxLOztNOztNLE07OztROztROzs7Ozs7Ozs7c0I7O1E7O2lDOztROztJO0k7STtHO3FCLHlDO29CLDhCO3NCLDhCO3FCLGtCOztJLHFCLFUsVyxTO0ksYyxNOzs7O007Ozs7O1M7Uzs7Ozs7aUIsVSxXLFU7Ozs7SztLO0s7Szs7STtJO0k7STs7O0kscUIsVSxXLFM7SSxjLE07Ozs7TTs7Ozs7Uzs7bUI7Ozs7O2lCLFUsVyxVOzs7O0s7SztLO0s7O0k7STtJO0k7OztJLHFCLFUsVyxTO0ksYyxROzs7Ozs7OztPO087TztPOzs7Ozs7O1M7O21COzs7OztpQixVLFcsVTs7SztLO0s7Szs7STtJO0k7STs7O0kscUIsVSxXLFM7SSxjLE07Ozs7TTs7Ozs7Uzs7bUI7Ozs7O2lCLFUsVyxVOzs7O0s7SztLO0s7O0k7STtJO0k7OztJOzs7Ozs7Rzs7STs7Ozs7Ozs7OztLO00sTzs7Ozs7Ozs7OzttQzs7Szs7TSxVO00sTTs7Ozs7STs7Ozs7Ozs7WTs7Ozs7Ozs7OzthOzs7YyxPOzthLGMsUTs7Ozs7YyxPOzs7Ozs7O2MsTzs7OzthLE87OztHO3NCLE8scUI7NEIsYTsyQixhO2tDLGE7NkIsYTttQyxhOzJCLFk7MkIsWTtnQyxZOztJOzs7RztxQixpQzs7STs7Ozs7OztZOzs7OztHOztJOzs7O087USxPO08sTzs7Szs7OztLOztLLE87O0ksa0IsSTtJOztJLE87Rzs0Qiw2Qjs7O0s7Ozs7STtJLEk7O2lEOzZCO0c7O2tCLHFCLGE7O0ksYyxNLGlDO0k7OztpQywwQjs7Ozs7Ozs7TTtNO08sb0I7Ozs7O0s7SztLOzs7Ozs7Ozs7TTtNO08sb0I7Ozs7O0s7SztLO0s7Szs7Ozs7Ozs7SztLO00sb0I7Ozs7O0k7STtJO0k7Rzs7a0Isd0IsYTs7SSxjLE0saUM7STs7Ozs7OztNO007TyxvQjs7Ozs7SztNOzs7SztLO0s7SztLOzs7Ozs7OztLO0s7TSxvQjs7Ozs7STtJO0k7Rzs7a0Isd0IsYTs7SSxjLE0saUM7STs7Ozs7OztNO007TyxvQjs7Ozs7SztNOzs7SztLO0s7SztLOzs7Ozs7OztLO0s7TSxvQjs7Ozs7STtJO0k7Rzs7STs7O0ssSSxNOzs7Ozs7STs7Ozs7O1k7Ozs7Rzt5QixPLHVCO2dDLFk7MkIsWTtHOztJO0ssTTtLOztpQjs7OztLOzs7O0s7OztJO0c7O0k7Ozs7O0k7O0ssTTs7O0k7a0I7Syx5QjtLO007O08sUTs7Ozs7cUIsTztNOztPLFE7Ozs7O0c7O0k7Ozs7O0k7O0ssTTs7O0k7a0I7O0ssWSxPO0s7O007O08sUTs7Ozs7TSxZLE87TTs7TztTOzs7OztHOztJOzs7OztJOztLLE07OztJO2tCOztLLFksTztLOztNOztPLFE7Ozs7O00sWSxPO007O087Uzs7Ozs7RztHOztJLFU7dUIsTyx5QztJOzs7Ozs7Ozs7Ozs7Ozs7O0c7O0ksVTt1QixPLHlDO0k7SztNOzs7SztLO0s7OztJOztHOztJLFU7dUIsTyx5QztJO0s7TTs7O0s7SztLOzs7STs7RztHO0k7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RSIsInNvdXJjZXNDb250ZW50IjpbXX0=
