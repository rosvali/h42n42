// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Ocsigen_cookie_map
//# unitInfo: Requires: Stdlib, Stdlib__Map, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_String = global_data.Stdlib__String,
    compare = runtime.caml_compare,
    Map_path = caml_call1(Stdlib_Map[1], [0, compare]),
    Map_inner = caml_call1(Stdlib_Map[1], [0, Stdlib_String[9]]),
    empty = Map_path[1];
   function add(path, n, v, m){
    try{var _h_ = caml_call2(Map_path[28], path, m), m$0 = _h_;}
    catch(_i_){
     var _f_ = caml_wrap_exception(_i_);
     if(_f_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_f_, 0);
     var m$0 = Map_inner[1];
    }
    var _g_ = caml_call3(Map_inner[4], n, v, m$0);
    return caml_call3(Map_path[4], path, _g_, m);
   }
   function _a_(path){
    function _e_(n, v, beg){
     if(! v) return add(path, n, 0, beg);
     var secure = v[3], v$0 = v[2], expo = v[1];
     return add(path, n, [0, expo, v$0, secure], beg);
    }
    return caml_call1(Map_inner[13], _e_);
   }
   var add_multi = caml_call1(Map_path[13], _a_);
   function remove(path, n, m){
    try{
     var
      m$0 = caml_call2(Map_path[28], path, m),
      m$1 = caml_call2(Map_inner[7], n, m$0),
      _c_ =
        caml_call1(Map_inner[2], m$1)
         ? caml_call2(Map_path[7], path, m)
         : caml_call3(Map_path[4], path, m$1, m);
     return _c_;
    }
    catch(_d_){
     var _b_ = caml_wrap_exception(_d_);
     if(_b_ === Stdlib[8]) return m;
     throw caml_maybe_attach_backtrace(_b_, 0);
    }
   }
   var
    Poly = [0, add, remove],
    Ocsigen_cookie_map =
      [0, Map_path, Map_inner, empty, add, add_multi, remove, Poly];
   runtime.caml_register_global(3, Ocsigen_cookie_map, "Ocsigen_cookie_map");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJvY3NpZ2VuX2Nvb2tpZV9tYXAuY21hLmpzIiwic291cmNlUm9vdCI6IiIsIm5hbWVzIjpbImNvbXBhcmUiLCJlbXB0eSIsImFkZCIsInBhdGgiLCJuIiwidiIsIm0iLCJtJDAiLCJiZWciLCJzZWN1cmUiLCJ2JDAiLCJleHBvIiwiYWRkX211bHRpIiwicmVtb3ZlIiwibSQxIl0sInNvdXJjZXMiOlsiL1VzZXJzL3Jvc3ZhbGkvLm9wYW0vNC4xNC4xL2xpYi9vY3NpZ2Vuc2VydmVyL2Nvb2tpZXMvb2NzaWdlbl9jb29raWVfbWFwLm1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Rzs7Ozs7Rzs7Ozs7Rzs7Ozs7Ozs7OztJQXFCTUE7NkNBQUFBOztJQVFGQztZQUVBQyxJQUFLQyxNQUFLQyxHQUFFQyxHQUFFQztJQUNoQixJQUFhLElBQUEsTUFBQSx5QkFETkgsTUFBU0csSUFDWkM7Ozs7U0FBQUE7O0lBRWMsVUFBQSx5QkFITkgsR0FBRUMsR0FDVkU7SUFFSixPQUFBLHdCQUhPSixXQUFTRztHQUcwQjtnQkFNckJIO2lCQUNDQyxHQUFFQyxHQUFFRztLQUMxQixLQUR3QkgsR0FHWixPQWJWSCxJQVNtQkMsTUFDQ0MsTUFBSUk7U0FFVEMsU0FGT0osTUFFVkssTUFGVUwsTUFFaEJNLE9BRmdCTjtLQUVJLE9BWjFCSCxJQVNtQkMsTUFDQ0MsT0FFZE8sTUFBTUQsS0FBR0QsU0FGU0Q7SUFHUTtJQUhoQixPQUFBO0dBR2dCO0dBSmxDLElBREVJLFlBQ0Y7WUFNRUMsT0FBUVYsTUFBS0MsR0FBRUU7SUFDakI7S0FDVztNQUFMQyxNQUFLLHlCQUZESixNQUFPRztNQUdYUSxNQUFLLHlCQUhJVixHQUVURztNQUVEO1FBQUEseUJBRENPO1dBRUMsd0JBTEdYLE1BQU9HO1dBT2Isd0JBUE1ILE1BR0pXLEtBSFdSO0tBS1Y7Ozs7MkJBR1csT0FSREE7OztHQVFFO0dBRVA7SUFBQSxXQXpCVkosS0FlQVc7OytCQWpCQVosT0FFQUMsS0FRQVUsV0FPQUM7OztFIiwic291cmNlc0NvbnRlbnQiOlsiKCogT2NzaWdlblxuICogQ29weXJpZ2h0IChDKSAyMDEwIFZpbmNlbnQgQmFsYXRcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCB3aXRoIGxpbmtpbmcgZXhjZXB0aW9uO1xuICogZWl0aGVyIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDU5IFRlbXBsZSBQbGFjZSAtIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3LCBVU0EuXG4gKilcblxubW9kdWxlIE1hcF9wYXRoID0gTWFwLk1ha2UgKHN0cnVjdFxuICB0eXBlIHQgPSBzdHJpbmcgbGlzdFxuXG4gIGxldCBjb21wYXJlID0gY29tcGFyZVxuZW5kKVxuXG5tb2R1bGUgTWFwX2lubmVyID0gTWFwLk1ha2UgKFN0cmluZylcblxudHlwZSBjb29raWUgPSBPU2V0IG9mIGZsb2F0IG9wdGlvbiAqIHN0cmluZyAqIGJvb2wgfCBPVW5zZXRcbnR5cGUgdCA9IGNvb2tpZSBNYXBfaW5uZXIudCBNYXBfcGF0aC50XG5cbmxldCBlbXB0eSA9IE1hcF9wYXRoLmVtcHR5XG5cbmxldCBhZGQgfnBhdGggbiB2IG0gPVxuICBsZXQgbScgPSB0cnkgTWFwX3BhdGguZmluZCBwYXRoIG0gd2l0aCBOb3RfZm91bmQgLT4gTWFwX2lubmVyLmVtcHR5IGluXG4gICgqIFdlIHJlcGxhY2UgdGhlIG9sZCB2YWx1ZSBpZiBpdCBleGlzdHMgKilcbiAgTWFwX3BhdGguYWRkIHBhdGggKE1hcF9pbm5lci5hZGQgbiB2IG0nKSBtXG5cbigqIFthZGRfbXVsdGkgbmV3IG9sZF0gYWRkcyB0aGUgY29va2llcyBmcm9tIFtuZXddIHRvIFtvbGRdLiBJZlxuICAgY29va2llcyBhcmUgYWxyZWFkeSBib3VuZCBpbiBvbGRjb29raWVzLCB0aGUgcHJldmlvdXMgYmluZGluZ1xuICAgZGlzYXBwZWFyLiAqKVxubGV0IGFkZF9tdWx0aSA9XG4gIE1hcF9wYXRoLmZvbGQgQEAgZnVuIHBhdGggLT5cbiAgTWFwX2lubmVyLmZvbGQgQEAgZnVuIG4gdiBiZWcgLT5cbiAgbWF0Y2ggdiB3aXRoXG4gIHwgT1NldCAoZXhwbywgdiwgc2VjdXJlKSAtPiBhZGQgfnBhdGggbiAoT1NldCAoZXhwbywgdiwgc2VjdXJlKSkgYmVnXG4gIHwgT1Vuc2V0IC0+IGFkZCB+cGF0aCBuIE9VbnNldCBiZWdcblxubGV0IHJlbW92ZSB+cGF0aCBuIG0gPVxuICB0cnlcbiAgICBsZXQgbScgPSBNYXBfcGF0aC5maW5kIHBhdGggbSBpblxuICAgIGxldCBtJyA9IE1hcF9pbm5lci5yZW1vdmUgbiBtJyBpblxuICAgIGlmIE1hcF9pbm5lci5pc19lbXB0eSBtJ1xuICAgIHRoZW4gTWFwX3BhdGgucmVtb3ZlIHBhdGggbVxuICAgIGVsc2UgKCogV2UgcmVwbGFjZSB0aGUgb2xkIHZhbHVlICopXG4gICAgICBNYXBfcGF0aC5hZGQgcGF0aCBtJyBtXG4gIHdpdGggTm90X2ZvdW5kIC0+IG1cblxubW9kdWxlIFBvbHkgPSBzdHJ1Y3RcbiAgbGV0IGFkZCA9IGFkZFxuICBsZXQgcmVtb3ZlID0gcmVtb3ZlXG5lbmRcbiJdfQ==
