// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Xml_wrap
//# unitInfo: Requires: Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List;
   function fmap(f){return f;}
   function nil(param){return 0;}
   function singleton(x){return [0, x, 0];}
   function cons(x, xs){return [0, x, xs];}
   function append(x, y){return caml_call2(Stdlib[37], x, y);}
   var
    map = Stdlib_List[19],
    Xml_wrap =
      [0,
       [0,
        function(_a_){return _a_;},
        fmap,
        nil,
        singleton,
        cons,
        append,
        map]];
   runtime.caml_register_global(2, Xml_wrap, "Xml_wrap");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Xml_stream
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Malformed_stream =
      [248, "Xml_stream.Malformed_stream", runtime.caml_fresh_oo_id(0)],
    Xml_stream =
      [0,
       Malformed_stream,
       function(Xml){
        function of_list(l){
         var _h_ = caml_call1(Xml[1][3], 0);
         function _i_(a, b){
          var _j_ = caml_call1(Xml[1][1], a);
          return caml_call2(Xml[1][5], _j_, b);
         }
         return caml_call3(Stdlib_List[26], _i_, l, _h_);
        }
        function mk(children, seq){
         var children$0 = children, seq$0 = seq;
         for(;;){
          var match = caml_call1(seq$0, 0);
          if(! match){
           var _e_ = Stdlib_Seq[18];
           return [0, of_list(caml_call1(Stdlib_List[9], children$0)), _e_];
          }
          var match$0 = match[1];
          if(typeof match$0 === "number"){
           var rest = match[2];
           return [0, of_list(caml_call1(Stdlib_List[9], children$0)), rest];
          }
          var _a_ = match$0[1];
          if(856096383 === _a_)
           var
            q = match[2],
            _b_ = match$0[2],
            attrs = _b_[2],
            name = _b_[1][2],
            f =
              function(param){
               var
                v = param[2],
                name = param[1][2],
                _f_ = caml_call1(Xml[1][1], v);
               return caml_call2(Xml[6], name, _f_);
              },
            a = caml_call2(Stdlib_List[19], f, attrs),
            match$1 = mk(0, q),
            rest$0 = match$1[2],
            sub_children = match$1[1],
            children$1 =
              [0, caml_call3(Xml[21], [0, a], name, sub_children), children$0],
            children$0 = children$1,
            seq$0 = rest$0;
          else if(936573133 <= _a_)
           var
            seq$1 = match[2],
            s = match$0[2],
            _c_ =
              function(x){
               var _g_ = caml_call1(Xml[1][1], x);
               return caml_call1(Xml[17], _g_);
              },
            _d_ = caml_call2(Stdlib_List[19], _c_, s),
            children$2 = caml_call2(Stdlib[37], _d_, children$0),
            children$0 = children$2,
            seq$0 = seq$1;
          else
           var
            seq$2 = match[2],
            s$0 = match$0[2],
            children$3 = [0, caml_call1(Xml[16], s$0), children$0],
            children$0 = children$3,
            seq$0 = seq$2;
         }
        }
        function of_seq(seq){
         var match = mk(0, seq), rest = match[2], l = match[1];
         if(caml_call1(rest, 0))
          throw caml_maybe_attach_backtrace(Malformed_stream, 1);
         return l;
        }
        return [0, of_seq];
       }];
   runtime.caml_register_global(4, Xml_stream, "Xml_stream");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Xml_print
//# unitInfo: Requires: Re, Stdlib, Stdlib__Buffer, Stdlib__Format, Stdlib__List, Stdlib__Printf, Stdlib__Set, Stdlib__String, Stdlib__Uchar, Uutf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$26 = "",
    cst$28 = " ",
    cst_a = '"%a"',
    cst_d = '"%d"',
    cst_s = '"%s"',
    cst_amp$1 = "&amp;",
    cst_gt$5 = "&gt;",
    cst_lt$1 = "&lt;",
    cst_quot$1 = "&quot;",
    cst$36 = "--!>",
    cst$32 = "-->",
    cst$37 = "->",
    cst$34 = ";",
    cst$29 = "<",
    cst$33 = "<!--",
    cst$27 = "<!-- ",
    cst$31 = "<\/",
    cst$30 = ">",
    cst$35 = "@,",
    cst_xmlns$1 = "xmlns",
    caml_float_of_string = runtime.caml_float_of_string,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_notequal = runtime.caml_string_notequal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call11(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10){
    return (f.l >= 0 ? f.l : f.l = f.length) == 11
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$25 = cst$26,
    cst$22 = " -->\n",
    cst$23 = cst$27,
    cst$24 = "\n",
    cst$8 = cst$28,
    cst$9 = " />",
    cst$10 = cst$29,
    cst$11 = cst$30,
    cst$12 = "><\/",
    cst$13 = cst$29,
    cst$14 = cst$30,
    cst$15 = cst$31,
    cst$16 = cst$30,
    cst$17 = cst$29,
    cst$18 = cst$32,
    cst$19 = cst$33,
    cst$20 = cst$34,
    cst$21 = "&",
    cst$6 = ", ",
    cst$7 = cst$28,
    partial = [12, 62, 0],
    cst$5 = cst$28,
    cst = "&#",
    cst$0 = cst$34,
    cst$1 = cst$36,
    cst$2 = cst$32,
    cst$3 = cst$37,
    cst$4 = cst$30,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Format = global_data.Stdlib__Format,
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Uutf = global_data.Uutf,
    Re = global_data.Re,
    cst_xmlns$0 = cst_xmlns$1,
    _K_ = [0, [2, 0, [12, 61, [2, 0, 0]]], "%s=%s"],
    _G_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _H_ = [0, [12, 34, [4, 0, 0, 0, [12, 34, 0]]], cst_d],
    _I_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _J_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _E_ = [0, [2, 0, [17, [0, cst$35, 0, 0], 0]], "%s@,"],
    _F_ =
      [0,
       [11, cst$27, [2, 0, [11, " -->", [17, [0, cst$35, 0, 0], 0]]]],
       "<!-- %s -->@,"],
    cst_xmlns = cst_xmlns$1,
    _B_ =
      [0,
       [12,
        60,
        [16,
         [15, [12, 62, [16, [15, [16, [16, [11, cst$31, [2, 0, partial]]]]]]]]]],
       "<%t%a>%t%a%t%t<\/%s>"],
    _C_ = [0, [11, cst$33, [2, 0, [11, cst$32, 0]]], "<!--%s-->"],
    _D_ = [0, [12, 38, [2, 0, [12, 59, 0]]], "&%s;"],
    _z_ = [0, [12, 60, [15, [11, "/>", 0]]], "<%a/>"],
    _A_ =
      [0,
       [12, 60, [15, [12, 62, [16, [11, cst$31, [2, 0, [12, 62, 0]]]]]]],
       "<%a>%t<\/%s>"],
    _y_ = [0, [2, 0, [15, [16, 0]]], "%s%a%t"],
    _x_ = [0, [16, [2, 0, [12, 61, [15, 0]]]], "%t%s=%a"],
    _t_ = [0, [12, 34, [15, [12, 34, 0]]], cst_a],
    _u_ = [0, [12, 34, [4, 0, 0, 0, [12, 34, 0]]], cst_d],
    _v_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _w_ = [0, [12, 34, [15, [12, 34, 0]]], cst_a],
    _s_ = [0, [12, 44, [16, 0]], ",%t"],
    _r_ = [0, [18, [1, [0, 0, cst$26]], [15, [17, 0, 0]]], "@[%a@]"],
    cst_lt$0 = cst_lt$1,
    cst_gt$4 = cst_gt$5,
    cst_amp$0 = cst_amp$1,
    cst_quot$0 = cst_quot$1,
    _q_ = [0, [15, 0], "%a"],
    _m_ = [0, [4, 0, 0, 0, [12, 101, [4, 0, 0, 0, 0]]], "%de%d"],
    cst_Infinity = "Infinity",
    cst_Infinity$0 = "-Infinity",
    cst_NaN = "NaN",
    _n_ = [0, [8, [0, 0, 3], 0, [0, 12], 0], "%.12g"],
    _o_ = [0, [8, [0, 0, 3], 0, [0, 15], 0], "%.15g"],
    _p_ = [0, [8, [0, 0, 3], 0, [0, 18], 0], "%.18g"],
    cst_gt$0 = cst_gt$5,
    cst_gt$1 = "-&gt;",
    cst_gt$2 = "--&gt;",
    cst_gt$3 = "--!&gt;",
    _l_ = [0, 1],
    _b_ = [0, [12, 34, [2, 0, [12, 34, 0]]], cst_s],
    _c_ = [0, [11, " PUBLIC ", [15, 0]], " PUBLIC %a"],
    _d_ =
      [0, [11, "<!DOCTYPE ", [2, 0, [15, [12, 62, 0]]]], "<!DOCTYPE %s%a>"],
    cst_1_0 = "1.0",
    cst_UTF_8 = "UTF-8",
    _a_ =
      [0,
       [11,
        '<?xml version="',
        [2, 0, [11, '" encoding="', [2, 0, [11, '"?>\\n', 0]]]]],
       '<?xml version="%s" encoding="%s"?>\\n'],
    cst_64 = "&#64;",
    cst_lt = cst_lt$1,
    cst_gt = cst_gt$5,
    cst_amp = cst_amp$1,
    cst_quot = cst_quot$1;
   function add_unsafe_char(b, c){
    if(34 === c) return caml_call2(Stdlib_Buffer[16], b, cst_quot);
    if(60 <= c){
     if(63 > c)
      switch(c - 60 | 0){
        case 0:
         return caml_call2(Stdlib_Buffer[16], b, cst_lt);
        case 1: break;
        default: return caml_call2(Stdlib_Buffer[16], b, cst_gt);
      }
    }
    else if(38 === c) return caml_call2(Stdlib_Buffer[16], b, cst_amp);
    var _bY_ = c <= 8 ? 1 : 0;
    if(_bY_)
     var _bZ_ = _bY_;
    else{
     var _b0_ = 11 === c ? 1 : 0;
     if(_b0_)
      var _bZ_ = _b0_;
     else{
      var _b1_ = 12 === c ? 1 : 0;
      if(_b1_)
       var _bZ_ = _b1_;
      else
       var
        _b2_ = 14 <= c ? 1 : 0,
        _b3_ = _b2_ ? c <= 31 ? 1 : 0 : _b2_,
        _bZ_ = _b3_ || (127 === c ? 1 : 0);
     }
    }
    if(! _bZ_) return caml_call2(Stdlib_Buffer[12], b, c);
    caml_call2(Stdlib_Buffer[16], b, cst);
    var _b4_ = caml_call1(Stdlib[33], c);
    caml_call2(Stdlib_Buffer[16], b, _b4_);
    return caml_call2(Stdlib_Buffer[16], b, cst$0);
   }
   function encode_unsafe_char(s){
    var b = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s));
    function _bW_(_bX_){return add_unsafe_char(b, _bX_);}
    caml_call2(Stdlib_String[29], _bW_, s);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function encode_unsafe_char_and_at(s){
    var b = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(s));
    function f(c){
     return 64 === c
             ? caml_call2(Stdlib_Buffer[16], b, cst_64)
             : add_unsafe_char(b, c);
    }
    caml_call2(Stdlib_String[29], f, s);
    return caml_call1(Stdlib_Buffer[2], b);
   }
   function compose_decl(opt, _bV_, param){
    if(opt) var sth = opt[1], version = sth; else var version = cst_1_0;
    if(_bV_)
     var sth$0 = _bV_[1], encoding = sth$0;
    else
     var encoding = cst_UTF_8;
    return caml_call3(Stdlib_Format[132], _a_, version, encoding);
   }
   function compose_doctype(dt, args){
    function pp_args(fmt, l){
     if(! l) return 0;
     function _bT_(fmt){return caml_call2(Stdlib_Format[129], fmt, _b_);}
     var _bU_ = caml_call2(Stdlib_Format[123], [0, Stdlib_Format[27]], _bT_);
     return caml_call4(Stdlib_Format[129], fmt, _c_, _bU_, l);
    }
    return caml_call4(Stdlib_Format[133], _d_, dt, pp_args, args);
   }
   var
    _e_ = [0, caml_call1(Re[26], cst$1), 0],
    _f_ = [0, caml_call1(Re[26], cst$2), _e_],
    _g_ = [0, caml_call1(Re[26], cst$3), 0],
    _h_ = [0, caml_call1(Re[29], [0, Re[40], _g_]), _f_],
    _i_ = [0, caml_call1(Re[26], cst$4), 0],
    _j_ = [0, caml_call1(Re[29], [0, Re[40], _i_]), _h_],
    _k_ = caml_call1(Re[28], _j_),
    re_end_comment = caml_call1(Re[2], _k_);
   function pp_number(fmt, v){
    if(v == Stdlib[22])
     return caml_call2(Stdlib_Format[13], fmt, cst_Infinity);
    if(v == Stdlib[23])
     return caml_call2(Stdlib_Format[13], fmt, cst_Infinity$0);
    if(v != v) return caml_call2(Stdlib_Format[13], fmt, cst_NaN);
    var vint = v | 0;
    if(vint != v){
     var s1 = caml_call2(Stdlib_Printf[4], _n_, v);
     if(v == caml_float_of_string(s1))
      return caml_call2(Stdlib_Format[13], fmt, s1);
     var s2 = caml_call2(Stdlib_Printf[4], _o_, v);
     return v == caml_float_of_string(s2)
             ? caml_call2(Stdlib_Format[13], fmt, s2)
             : caml_call3(Stdlib_Format[129], fmt, _p_, v);
    }
    var n = vint, i = 0;
    for(;;){
     if(0 !== n && 0 === (n % 10 | 0)){
      var i$0 = i + 1 | 0, n$0 = n / 10 | 0, n = n$0, i = i$0;
      continue;
     }
     return 2 < i
             ? caml_call4(Stdlib_Format[129], fmt, _m_, n, i)
             : caml_call2(Stdlib_Format[19], fmt, vint);
    }
   }
   function string_of_number(v){
    return caml_call3(Stdlib_Format[133], _q_, pp_number, v);
   }
   function normalize(src){
    var
     warn = [0, 0],
     buffer = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(src)),
     _bP_ = 0;
    function _bQ_(param, _bS_, d){
     if(852405675 <= d[1]){
      var code = d[2];
      return caml_call2(Uutf[23][1], buffer, code);
     }
     caml_call2(Uutf[23][1], buffer, Uutf[2]);
     warn[1] = 1;
     return 0;
    }
    caml_call5(Uutf[22][2], 0, 0, _bQ_, _bP_, src);
    var _bR_ = warn[1];
    return [0, caml_call1(Stdlib_Buffer[2], buffer), _bR_];
   }
   function normalize_html(src){
    var l = caml_ml_string_length(src), i = 0;
    for(;;){
     var _bJ_ = i < l ? 1 : 0;
     a:
     {
      if(_bJ_){
       var match = runtime.caml_string_get(src, i);
       b:
       {
        c:
        {
         if(35 <= match){
          if(61 <= match){
           if(62 !== match){if(127 <= match) break c; break b;}
          }
          else if(38 !== match && 60 > match) break b;
         }
         else{
          if(11 > match){if(9 <= match) break b; break c;}
          if(32 > match){if(13 === match) break b; break c;}
          if(34 > match) break b;
         }
         var _bK_ = 1;
         break a;
        }
        var _bK_ = 1;
        break a;
       }
       var i$0 = i + 1 | 0, i = i$0;
       continue;
      }
      var _bK_ = _bJ_;
     }
     if(! _bK_) return [0, src, 0];
     var
      warn = [0, 0],
      buffer = caml_call1(Stdlib_Buffer[1], caml_ml_string_length(src)),
      _bL_ = 0,
      _bM_ =
        function(param, _bO_, d){
         if(852405675 > d[1]){
          caml_call2(Uutf[23][1], buffer, Uutf[2]);
          warn[1] = 1;
          return 0;
         }
         var u = d[2], code = caml_call1(Stdlib_Uchar[10], u);
         if(34 === code)
          return caml_call2(Stdlib_Buffer[16], buffer, cst_quot$0);
         if(60 <= code){
          if(63 > code)
           switch(code - 60 | 0){
             case 0:
              return caml_call2(Stdlib_Buffer[16], buffer, cst_lt$0);
             case 1: break;
             default: return caml_call2(Stdlib_Buffer[16], buffer, cst_gt$4);
           }
         }
         else if(38 === code)
          return caml_call2(Stdlib_Buffer[16], buffer, cst_amp$0);
         a:
         {
          b:
          {
           if(31 >= code && 9 !== code && 10 !== code && 13 !== code) break b;
           if(127 <= code && 159 >= code) break b;
           if(65534 !== (code & 65535) && 65535 !== (code & 65535)){var u$0 = u; break a;}
          }
          warn[1] = 1;
          var u$0 = Uutf[2];
         }
         return caml_call2(Uutf[23][1], buffer, u$0);
        };
     caml_call5(Uutf[22][2], 0, 0, _bM_, _bL_, src);
     var _bN_ = warn[1];
     return [0, caml_call1(Stdlib_Buffer[2], buffer), _bN_];
    }
   }
   function pp_noop(fmt, param){return 0;}
   function Make_fmt(Xml, _aT_){
    function open_box(indent, fmt){
     return indent ? caml_call2(Stdlib_Format[1], fmt, 0) : 0;
    }
    function close_box(indent, fmt){
     return indent ? caml_call2(Stdlib_Format[3], fmt, 0) : 0;
    }
    function sp(indent, fmt){
     return indent
             ? caml_call2(Stdlib_Format[27], fmt, 0)
             : caml_call2(Stdlib_Format[13], fmt, cst$5);
    }
    function cut(indent, fmt){
     return indent ? caml_call2(Stdlib_Format[29], fmt, 0) : 0;
    }
    var S = caml_call1(Stdlib_Set[1], [0, Stdlib_String[9]]), l = _aT_[1];
    if(l)
     var
      _aU_ = S[1],
      _aV_ = function(s, x){return caml_call2(S[4], x, s);},
      set = caml_call3(Stdlib_List[25], _aV_, _aU_, l),
      is_emptytag = function(x){return caml_call2(S[3], x, set);};
    else
     var is_emptytag = function(param){return 0;};
    function pp_encode(encode, indent, fmt, s){
     var s$0 = caml_call1(encode, s);
     return indent
             ? caml_call4
               (Stdlib_Format[129], fmt, _r_, Stdlib_Format[125], s$0)
             : caml_call2(Stdlib_Format[13], fmt, s$0);
    }
    function pp_sep(indent, param){
     return param
             ? function
              (fmt, param){
               function _bH_(_bI_){return sp(indent, _bI_);}
               return caml_call3(Stdlib_Format[129], fmt, _s_, _bH_);
              }
             : function(fmt, param){return sp(indent, fmt);};
    }
    function pp_attrib_value(encode, indent, fmt, a){
     var match = caml_call1(Xml[26], a);
     switch(match[0]){
       case 0:
        var f = match[1];
        return caml_call4(Stdlib_Format[129], fmt, _t_, pp_number, f);
       case 1:
        var i = match[1]; return caml_call3(Stdlib_Format[129], fmt, _u_, i);
       case 2:
        var s = match[1], _bB_ = caml_call1(encode, s);
        return caml_call3(Stdlib_Format[129], fmt, _v_, _bB_);
       default:
        var
         slist = match[2],
         sep = match[1],
         _bC_ =
           function(_bF_, _bG_){return pp_encode(encode, indent, _bF_, _bG_);},
         _bD_ = [0, pp_sep(indent, sep)],
         _bE_ = caml_call2(Stdlib_Format[123], _bD_, _bC_);
        return caml_call4(Stdlib_Format[129], fmt, _w_, _bE_, slist);
     }
    }
    function pp_attrib(encode, indent, fmt, a){
     function _bv_(_bz_, _bA_){
      return pp_attrib_value(encode, indent, _bz_, _bA_);
     }
     var _bw_ = caml_call1(Xml[25], a);
     function _bx_(_by_){return sp(indent, _by_);}
     return caml_call6(Stdlib_Format[129], fmt, _x_, _bx_, _bw_, _bv_, a);
    }
    function pp_attribs(encode, indent){
     function _bs_(_bt_, _bu_){return pp_attrib(encode, indent, _bt_, _bu_);}
     return caml_call2(Stdlib_Format[123], [0, pp_noop], _bs_);
    }
    function pp_tag_and_attribs(encode, indent, fmt, param){
     var attrs = param[2], tag = param[1];
     open_box(indent, fmt);
     function _bp_(_br_){return cut(indent, _br_);}
     var _bq_ = pp_attribs(encode, indent);
     caml_call6(Stdlib_Format[129], fmt, _y_, tag, _bq_, attrs, _bp_);
     return close_box(indent, fmt);
    }
    function pp_closedtag(encode, indent, fmt, tag, attrs){
     if(is_emptytag(tag)){
      var
       _bf_ = [0, tag, attrs],
       _bg_ =
         function(_bn_, _bo_){
          return pp_tag_and_attribs(encode, indent, _bn_, _bo_);
         };
      return caml_call4(Stdlib_Format[129], fmt, _z_, _bg_, _bf_);
     }
     open_box(indent, fmt);
     function _bh_(_bm_){return cut(indent, _bm_);}
     var _bi_ = [0, tag, attrs];
     function _bj_(_bk_, _bl_){
      return pp_tag_and_attribs(encode, indent, _bk_, _bl_);
     }
     caml_call6(Stdlib_Format[129], fmt, _A_, _bj_, _bi_, _bh_, tag);
     return close_box(indent, fmt);
    }
    function pp_tag(encode, indent, fmt, tag, attrs, children){
     if(! children) return pp_closedtag(encode, indent, fmt, tag, attrs);
     open_box(indent, fmt);
     function _a4_(_be_){return cut(indent, _be_);}
     function _a5_(_bd_){return close_box(indent, _bd_);}
     var _a6_ = pp_elts(encode, indent);
     function _a7_(_bc_){return cut(indent, _bc_);}
     var _a8_ = [0, tag, attrs];
     function _a9_(_ba_, _bb_){
      return pp_tag_and_attribs(encode, indent, _ba_, _bb_);
     }
     function _a__(_a$_){return open_box(indent, _a$_);}
     caml_call11
      (Stdlib_Format[129],
       fmt,
       _B_,
       _a__,
       _a9_,
       _a8_,
       _a7_,
       _a6_,
       children,
       _a5_,
       _a4_,
       tag);
     return close_box(indent, fmt);
    }
    function pp_elt(encode, indent, fmt, elt){
     var match = caml_call1(Xml[27], elt);
     if(typeof match === "number") return 0;
     switch(match[0]){
       case 0:
        var
         texte = match[1],
         f =
           function(g){
            var s = caml_call2(Re[1][1], g, 0);
            return caml_string_notequal(s, cst$36)
                    ? caml_string_notequal
                       (s, cst$32)
                      ? caml_string_notequal
                         (s, cst$37)
                        ? caml_string_notequal(s, cst$30) ? s : cst_gt$0
                        : cst_gt$1
                      : cst_gt$2
                    : cst_gt$3;
           },
         _a3_ = caml_call6(Re[24], 0, 0, _l_, re_end_comment, f, texte);
        return caml_call3(Stdlib_Format[129], fmt, _C_, _a3_);
       case 1:
        var texte$0 = match[1];
        return caml_call2(Stdlib_Format[13], fmt, texte$0);
       case 2:
        var texte$1 = match[1];
        return pp_encode(encode, indent, fmt, texte$1);
       case 3:
        var e = match[1]; return caml_call3(Stdlib_Format[129], fmt, _D_, e);
       case 4:
        var xh_attrs = match[2], name = match[1];
        return pp_closedtag(encode, indent, fmt, name, xh_attrs);
       default:
        var xh_taglist = match[3], xh_attrs$0 = match[2], name$0 = match[1];
        return pp_tag(encode, indent, fmt, name$0, xh_attrs$0, xh_taglist);
     }
    }
    function pp_elts(encode, indent){
     function _aZ_(_a1_, _a2_){return pp_elt(encode, indent, _a1_, _a2_);}
     var _a0_ = [0, function(fmt, param){return cut(indent, fmt);}];
     return caml_call2(Stdlib_Format[123], _a0_, _aZ_);
    }
    function pp(opt, _aW_, param){
     if(opt)
      var sth = opt[1], encode = sth;
     else
      var encode = encode_unsafe_char;
     if(_aW_) var sth$0 = _aW_[1], indent = sth$0; else var indent = 0;
     return function(_aX_, _aY_){return pp_elt(encode, indent, _aX_, _aY_);};
    }
    return [0, , , , , , , , , , , , , , , pp_elt, , pp];
   }
   function Make(Xml, I, O){
    var symbol = O[2];
    function separator_to_string(param){return param ? cst$6 : cst$7;}
    function attrib_value_to_string(encode, a){
     var match = caml_call1(Xml[26], a);
     switch(match[0]){
       case 0:
        var f = match[1], _aP_ = string_of_number(f);
        return caml_call2(Stdlib_Printf[4], _G_, _aP_);
       case 1:
        var i = match[1]; return caml_call2(Stdlib_Printf[4], _H_, i);
       case 2:
        var s = match[1], _aQ_ = caml_call1(encode, s);
        return caml_call2(Stdlib_Printf[4], _I_, _aQ_);
       default:
        var
         slist = match[2],
         sep = match[1],
         _aR_ = separator_to_string(sep),
         _aS_ = caml_call1(encode, caml_call2(Stdlib_String[6], _aR_, slist));
        return caml_call2(Stdlib_Printf[4], _J_, _aS_);
     }
    }
    function attrib_to_string(encode, a){
     var
      _aN_ = attrib_value_to_string(encode, a),
      _aO_ = caml_call1(Xml[25], a);
     return caml_call3(Stdlib_Printf[4], _K_, _aO_, _aN_);
    }
    function xh_print_attrs(encode, attrs){
     if(! attrs) return O[1];
     var
      queue = attrs[2],
      attr = attrs[1],
      _aK_ = xh_print_attrs(encode, queue),
      _aL_ = attrib_to_string(encode, attr),
      _aM_ = caml_call2(Stdlib[28], cst$8, _aL_);
     return caml_call2(symbol, caml_call1(O[3], _aM_), _aK_);
    }
    function xh_print_closedtag(encode, tag, attrs){
     if(0 !== I[1] && ! caml_call2(Stdlib_List[36], tag, I[1])){
      var
       _aF_ = caml_call2(Stdlib[28], tag, cst$11),
       _aG_ = caml_call2(Stdlib[28], cst$12, _aF_),
       _aH_ = caml_call1(O[3], _aG_),
       _aI_ = xh_print_attrs(encode, attrs),
       _aJ_ = caml_call2(Stdlib[28], cst$13, tag);
      return caml_call2
              (symbol, caml_call2(symbol, caml_call1(O[3], _aJ_), _aI_), _aH_);
     }
     var
      _aC_ = caml_call1(O[3], cst$9),
      _aD_ = xh_print_attrs(encode, attrs),
      _aE_ = caml_call2(Stdlib[28], cst$10, tag);
     return caml_call2
             (symbol, caml_call2(symbol, caml_call1(O[3], _aE_), _aD_), _aC_);
    }
    function xh_print_tag(encode, tag, attrs, taglist){
     if(0 === taglist) return xh_print_closedtag(encode, tag, attrs);
     var
      _av_ = caml_call2(Stdlib[28], tag, cst$14),
      _aw_ = caml_call2(Stdlib[28], cst$15, _av_),
      _ax_ = caml_call1(O[3], _aw_),
      _ay_ = xh_print_taglist(encode, taglist),
      _az_ = caml_call1(O[3], cst$16),
      _aA_ = xh_print_attrs(encode, attrs),
      _aB_ = caml_call2(Stdlib[28], cst$17, tag);
     return caml_call2
             (symbol,
              caml_call2
               (symbol,
                caml_call2
                 (symbol,
                  caml_call2(symbol, caml_call1(O[3], _aB_), _aA_),
                  _az_),
                _ay_),
              _ax_);
    }
    function print_nodes(encode, name, xh_attrs, xh_taglist, queue){
     var _au_ = xh_print_taglist(encode, queue);
     return caml_call2
             (symbol, xh_print_tag(encode, name, xh_attrs, xh_taglist), _au_);
    }
    function xh_print_taglist(encode, taglist){
     var taglist$0 = taglist;
     for(;;){
      if(! taglist$0) return O[1];
      var
       taglist$1 = taglist$0[2],
       elt = taglist$0[1],
       match = caml_call1(Xml[27], elt);
      if(typeof match !== "number")
       switch(match[0]){
         case 0:
          var
           texte = match[1],
           _ak_ = xh_print_taglist(encode, taglist$1),
           _al_ = caml_call1(encode, texte),
           _am_ = caml_call2(Stdlib[28], _al_, cst$18),
           _an_ = caml_call2(Stdlib[28], cst$19, _am_);
          return caml_call2(symbol, caml_call1(O[3], _an_), _ak_);
         case 1:
          var texte$0 = match[1], _ao_ = xh_print_taglist(encode, taglist$1);
          return caml_call2(symbol, caml_call1(O[3], texte$0), _ao_);
         case 2:
          var
           texte$1 = match[1],
           _ap_ = xh_print_taglist(encode, taglist$1),
           _aq_ = caml_call1(encode, texte$1);
          return caml_call2(symbol, caml_call1(O[3], _aq_), _ap_);
         case 3:
          var
           e = match[1],
           _ar_ = xh_print_taglist(encode, taglist$1),
           _as_ = caml_call2(Stdlib[28], e, cst$20),
           _at_ = caml_call2(Stdlib[28], cst$21, _as_);
          return caml_call2(symbol, caml_call1(O[3], _at_), _ar_);
         case 4:
          var xh_attrs = match[2], name = match[1];
          return print_nodes(encode, name, xh_attrs, 0, taglist$1);
         default:
          var xh_taglist = match[3], xh_attrs$0 = match[2], name$0 = match[1];
          return print_nodes
                  (encode, name$0, xh_attrs$0, xh_taglist, taglist$1);
       }
      var taglist$0 = taglist$1;
     }
    }
    function print_list(opt, foret){
     if(opt)
      var sth = opt[1], encode = sth;
     else
      var encode = encode_unsafe_char;
     var _aj_ = xh_print_taglist(encode, foret);
     return caml_call1(O[4], _aj_);
    }
    return [0, , , , , , , , , xh_print_taglist, print_list];
   }
   function Make_typed(Xml, Typed_xml, O){
    var P = Make(Xml, [0, Typed_xml[1][7]], O), symbol = O[2];
    function print_list(opt, foret){
     if(opt)
      var sth = opt[1], encode = sth;
     else
      var encode = encode_unsafe_char;
     var
      _ah_ = caml_call2(Stdlib_List[19], Typed_xml[2], foret),
      _ai_ = P[9].call(null, encode, _ah_);
     return caml_call1(O[4], _ai_);
    }
    function print(opt, _aa_, doc){
     if(opt)
      var sth = opt[1], encode = sth;
     else
      var encode = encode_unsafe_char;
     if(_aa_) var sth$0 = _aa_[1], advert = sth$0; else var advert = cst$25;
     var
      doc$0 = caml_call1(Typed_xml[3], doc),
      match = caml_call1(Xml[27], doc$0);
     a:
     {
      if(typeof match !== "number" && 5 === match[0]){
       var
        c = match[3],
        a = match[2],
        n = match[1],
        _ag_ =
          function(a){
           return caml_string_equal(caml_call1(Xml[25], a), cst_xmlns$1);
          },
        a$0 =
          caml_call2(Stdlib_List[33], _ag_, a)
           ? a
           : [0, caml_call2(Xml[6], cst_xmlns$0, Typed_xml[1][5]), a],
        doc$1 = caml_call3(Xml[21], [0, a$0], n, c);
       break a;
      }
      var doc$1 = doc$0;
     }
     var _ab_ = P[9].call(null, encode, [0, doc$1, 0]);
     if(caml_string_notequal(advert, cst$26))
      var
       _ac_ = caml_call2(Stdlib[28], advert, cst$22),
       _ad_ = caml_call2(Stdlib[28], cst$23, _ac_);
     else
      var _ad_ = cst$24;
     var
      _ae_ = caml_call1(O[3], _ad_),
      _af_ =
        caml_call2
         (symbol,
          caml_call2(symbol, caml_call1(O[3], Typed_xml[1][6]), _ae_),
          _ab_);
     return caml_call1(O[4], _af_);
    }
    return [0, , , print_list, print];
   }
   function Simple_output(M){
    function empty(param){return 0;}
    function concat(f1, f2, param){
     caml_call1(f1, 0);
     return caml_call1(f2, 0);
    }
    function put(s, param){return caml_call1(M[1], s);}
    function make(f){return caml_call1(f, 0);}
    return [0, empty, concat, put, make];
   }
   function Make_simple(Xml, I){
    function print_list(output){
     return Make(Xml, I, Simple_output([0, output]))[10];
    }
    return [0, print_list];
   }
   function Make_typed_simple(Xml, Typed_xml){
    function print_list(output){
     return Make_typed(Xml, Typed_xml, Simple_output([0, output]))[3];
    }
    function print(output){
     return Make_typed(Xml, Typed_xml, Simple_output([0, output]))[4];
    }
    return [0, print_list, print];
   }
   function _L_(___, _Z_, _Y_){
    var _$_ = Make_typed(___, _Z_, _Y_);
    return [0, _$_[3], _$_[4]];
   }
   function _M_(_X_, _W_, _V_){return [0, Make(_X_, _W_, _V_)[10]];}
   function _N_(_U_, _T_){return [0, Make_fmt(_U_, _T_)[17]];}
   var
    Xml_print =
      [0,
       encode_unsafe_char,
       encode_unsafe_char_and_at,
       [0, normalize, normalize_html],
       compose_decl,
       compose_doctype,
       string_of_number,
       pp_number,
       function(Xml, Typed_xml){
        var P = Make_fmt(Xml, [0, Typed_xml[1][7]]);
        function pp_elt(opt, _R_, param, fmt, foret){
         if(opt)
          var sth = opt[1], encode = sth;
         else
          var encode = encode_unsafe_char;
         if(_R_) var sth$0 = _R_[1], indent = sth$0; else var indent = 0;
         var _S_ = caml_call1(Typed_xml[2], foret);
         return P[15].call(null, encode, indent, fmt, _S_);
        }
        function pp(opt, _P_, advert, param, fmt, doc$0){
         if(opt)
          var sth = opt[1], encode = sth;
         else
          var encode = encode_unsafe_char;
         if(_P_) var sth$0 = _P_[1], indent = sth$0; else var indent = 0;
         caml_call2(Stdlib_Format[7], fmt, 0);
         caml_call3(Stdlib_Format[129], fmt, _E_, Typed_xml[1][6]);
         if(advert){
          var s = advert[1];
          caml_call3(Stdlib_Format[129], fmt, _F_, s);
         }
         var
          doc = caml_call1(Typed_xml[3], doc$0),
          match = caml_call1(Xml[27], doc);
         a:
         {
          if(typeof match !== "number" && 5 === match[0]){
           var
            c = match[3],
            a = match[2],
            n = match[1],
            _O_ =
              function(a){
               return caml_string_equal(caml_call1(Xml[25], a), cst_xmlns$1);
              },
            a$0 =
              caml_call2(Stdlib_List[33], _O_, a)
               ? a
               : [0, caml_call2(Xml[6], cst_xmlns, Typed_xml[1][5]), a],
            _Q_ = caml_call3(Xml[21], [0, a$0], n, c);
           break a;
          }
          var _Q_ = doc;
         }
         P[15].call(null, encode, indent, fmt, _Q_);
         return caml_call2(Stdlib_Format[3], fmt, 0);
        }
        return [0, pp_elt, pp];
       },
       _N_,
       _M_,
       _L_,
       Make_simple,
       Make_typed_simple];
   runtime.caml_register_global(94, Xml_print, "Xml_print");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Xml_iter
//# unitInfo: Requires: Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_string_equal = runtime.caml_string_equal;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    Xml_iter =
      [0,
       function(Xml){
        function amap1(f, n){
         var match = caml_call1(Xml[27], n);
         if(typeof match !== "number")
          switch(match[0]){
            case 4:
             var
              attribs = match[2],
              name = match[1],
              _z_ = [0, caml_call2(f, name, attribs)];
             return caml_call2(Xml[20], _z_, name);
            case 5:
             var
              elts = match[3],
              attribs$0 = match[2],
              name$0 = match[1],
              _A_ = [0, caml_call2(f, name$0, attribs$0)];
             return caml_call3(Xml[21], _A_, name$0, elts);
          }
         return n;
        }
        function amap(f, n){
         var match = caml_call1(Xml[27], n);
         if(typeof match !== "number")
          switch(match[0]){
            case 4:
             var
              attribs = match[2],
              name = match[1],
              _u_ = [0, caml_call2(f, name, attribs)];
             return caml_call2(Xml[20], _u_, name);
            case 5:
             var
              elts = match[3],
              attribs$0 = match[2],
              name$0 = match[1],
              _v_ = function(_y_){return amap(f, _y_);},
              _w_ = caml_call2(Stdlib_List[19], _v_, elts),
              _x_ = [0, caml_call2(f, name$0, attribs$0)];
             return caml_call3(Xml[21], _x_, name$0, _w_);
          }
         return n;
        }
        function add_float_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[4], name, value), 0];
         var head = param[1], tail = param[2];
         if(caml_string_equal(caml_call1(Xml[25], head), name))
          return [0, caml_call2(Xml[4], name, value), tail];
         var tail$0 = param[2];
         return [0, head, add_float_attrib(name, value, tail$0)];
        }
        function map_float_attrib(is_attrib, f, l){
         function aux(head){
          var match = caml_call1(Xml[26], head);
          if(0 === match[0]){
           var value = match[1];
           if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
            var _s_ = caml_call1(f, value), _t_ = caml_call1(Xml[25], head);
            return caml_call2(Xml[4], _t_, _s_);
           }
          }
          return head;
         }
         return caml_call2(Stdlib_List[19], aux, l);
        }
        function add_int_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[5], name, value), 0];
         var head = param[1], tail = param[2];
         if(caml_string_equal(caml_call1(Xml[25], head), name))
          return [0, caml_call2(Xml[5], name, value), tail];
         var tail$0 = param[2];
         return [0, head, add_int_attrib(name, value, tail$0)];
        }
        function rm_attrib(is_attrib, param){
         var param$0 = param;
         for(;;){
          if(! param$0) return 0;
          var head = param$0[1], tail = param$0[2];
          if(! caml_call1(is_attrib, caml_call1(Xml[25], head))){
           var tail$0 = param$0[2];
           return [0, head, rm_attrib(is_attrib, tail$0)];
          }
          var param$0 = tail;
         }
        }
        function map_int_attrib(is_attrib, f, l){
         function aux(head){
          var match = caml_call1(Xml[26], head);
          if(1 === match[0]){
           var value = match[1];
           if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
            var _q_ = caml_call1(f, value), _r_ = caml_call1(Xml[25], head);
            return caml_call2(Xml[5], _r_, _q_);
           }
          }
          return head;
         }
         return caml_call2(Stdlib_List[19], aux, l);
        }
        function add_string_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[6], name, value), 0];
         var head = param[1], tail = param[2];
         if(caml_string_equal(caml_call1(Xml[25], head), name))
          return [0, caml_call2(Xml[6], name, value), tail];
         var tail$0 = param[2];
         return [0, head, add_string_attrib(name, value, tail$0)];
        }
        function map_string_attrib(is_attrib, f, l){
         function aux(head){
          var match = caml_call1(Xml[26], head);
          if(2 === match[0]){
           var value = match[1];
           if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
            var _o_ = caml_call1(f, value), _p_ = caml_call1(Xml[25], head);
            return caml_call2(Xml[6], _p_, _o_);
           }
          }
          return head;
         }
         return caml_call2(Stdlib_List[19], aux, l);
        }
        function add_space_sep_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[7], name, [0, value, 0]), 0];
         var
          tail = param[2],
          head = param[1],
          match = caml_call1(Xml[26], head);
         if(3 === match[0] && ! match[1]){
          var values = match[2];
          if(caml_string_equal(caml_call1(Xml[25], head), name))
           return [0, caml_call2(Xml[7], name, [0, value, values]), tail];
         }
         return caml_string_equal(caml_call1(Xml[25], head), name)
                 ? [0, caml_call2(Xml[7], name, [0, value, 0]), tail]
                 : [0, head, add_space_sep_attrib(name, value, tail)];
        }
        function add_comma_sep_attrib(name, value, param){
         if(! param) return [0, caml_call2(Xml[8], name, [0, value, 0]), 0];
         var
          tail = param[2],
          head = param[1],
          match = caml_call1(Xml[26], head);
         if(3 === match[0] && match[1]){
          var values = match[2];
          if(caml_string_equal(caml_call1(Xml[25], head), name))
           return [0, caml_call2(Xml[8], name, [0, value, values]), tail];
         }
         return caml_string_equal(caml_call1(Xml[25], head), name)
                 ? [0, caml_call2(Xml[8], name, [0, value, 0]), tail]
                 : [0, head, add_comma_sep_attrib(name, value, tail)];
        }
        function rm_attrib_from_list(is_attrib, is_value, param){
         if(! param) return 0;
         var
          tail = param[2],
          head = param[1],
          match = caml_call1(Xml[26], head);
         if(3 === match[0]){
          var values = match[2], sep = match[1];
          if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
           var
            _l_ = function(v){return 1 - caml_call1(is_value, v);},
            values$0 = caml_call2(Stdlib_List[41], _l_, values);
           if(! values$0) return tail;
           if(sep){
            var _m_ = caml_call1(Xml[25], head);
            return [0, caml_call2(Xml[8], _m_, values$0), tail];
           }
           var _n_ = caml_call1(Xml[25], head);
           return [0, caml_call2(Xml[7], _n_, values$0), tail];
          }
         }
         return [0, head, rm_attrib_from_list(is_attrib, is_value, tail)];
        }
        function map_string_attrib_in_list(is_attrib, f, l){
         function aux(head){
          var match = caml_call1(Xml[26], head);
          if(3 === match[0]){
           var values = match[2], sep = match[1];
           if(caml_call1(is_attrib, caml_call1(Xml[25], head))){
            if(sep){
             var
              _h_ = caml_call2(Stdlib_List[19], f, values),
              _i_ = caml_call1(Xml[25], head);
             return caml_call2(Xml[8], _i_, _h_);
            }
            var
             _j_ = caml_call2(Stdlib_List[19], f, values),
             _k_ = caml_call1(Xml[25], head);
            return caml_call2(Xml[7], _k_, _j_);
           }
          }
          return head;
         }
         return caml_call2(Stdlib_List[19], aux, l);
        }
        function fold
        (of_empty,
         of_comment,
         of_txt,
         of_encodedpcdata,
         of_entity,
         of_leaf,
         of_node,
         n){
         var match = caml_call1(Xml[27], n);
         if(typeof match === "number") return caml_call1(of_empty, 0);
         switch(match[0]){
           case 0:
            var s = match[1]; return caml_call1(of_comment, s);
           case 1:
            var s$0 = match[1]; return caml_call1(of_encodedpcdata, s$0);
           case 2:
            var s$1 = match[1]; return caml_call1(of_txt, s$1);
           case 3:
            var s$2 = match[1]; return caml_call1(of_entity, s$2);
           case 4:
            var attribs = match[2], name = match[1];
            return caml_call2(of_leaf, name, attribs);
           default:
            var
             elts = match[3],
             attribs$0 = match[2],
             name$0 = match[1],
             _f_ =
               function(_g_){
                return fold
                        (of_empty,
                         of_comment,
                         of_txt,
                         of_encodedpcdata,
                         of_entity,
                         of_leaf,
                         of_node,
                         _g_);
               };
            return caml_call3
                    (of_node,
                     name$0,
                     attribs$0,
                     caml_call2(Stdlib_List[19], _f_, elts));
         }
        }
        function all_entities(elt){
         function f(param){return 0;}
         function _e_(ename, attribs, elts){
          return caml_call1(Stdlib_List[14], elts);
         }
         return fold
                 (f,
                  f,
                  f,
                  f,
                  f,
                  function(ename, attribs){return 0;},
                  _e_,
                  elt);
        }
        function flatmap(f, l){
         var _d_ = caml_call2(Stdlib_List[19], f, l);
         return caml_call1(Stdlib_List[13], _d_);
        }
        function translate
        (root_leaf, root_node, sub_leaf, sub_node, update_state, state, n){
         function translate(state, n){
          var match = caml_call1(Xml[27], n);
          if(typeof match !== "number")
           switch(match[0]){
             case 4:
              var attribs = match[2], name = match[1];
              return caml_call3(sub_leaf, state, name, attribs);
             case 5:
              var
               elts = match[3],
               attribs$0 = match[2],
               name$0 = match[1],
               _b_ = caml_call3(update_state, name$0, attribs$0, state);
              return caml_call4
                      (sub_node,
                       state,
                       name$0,
                       attribs$0,
                       flatmap(function(_c_){return translate(_b_, _c_);}, elts));
           }
          return [0, n, 0];
         }
         var match = caml_call1(Xml[27], n);
         if(typeof match !== "number")
          switch(match[0]){
            case 4:
             var attribs = match[2], name = match[1];
             return caml_call2(root_leaf, name, attribs);
            case 5:
             var elts = match[3], attribs$0 = match[2], name$0 = match[1];
             return caml_call3
                     (root_node,
                      name$0,
                      attribs$0,
                      flatmap(function(_a_){return translate(state, _a_);}, elts));
          }
         return n;
        }
        return [0,
                amap,
                amap1,
                rm_attrib,
                rm_attrib_from_list,
                map_int_attrib,
                map_float_attrib,
                map_string_attrib,
                map_string_attrib_in_list,
                add_int_attrib,
                add_float_attrib,
                add_string_attrib,
                add_comma_sep_attrib,
                add_space_sep_attrib,
                fold,
                all_entities,
                translate];
       }];
   runtime.caml_register_global(1, Xml_iter, "Xml_iter");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Svg_f
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__String, Xml_print, Xml_stream
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$9 = "",
    cst$8 = " ",
    cst$11 = "%",
    cst_g_g = "%g, %g",
    cst$10 = ", ",
    cst_a$1 = "a",
    cst_alphabetic$2 = "alphabetic",
    cst_auto$3 = "auto",
    cst_central$1 = "central",
    cst_dx$1 = "dx",
    cst_dy$1 = "dy",
    cst_fill$1 = "fill",
    cst_font_face_uri$1 = "font-face-uri",
    cst_g$1 = "g",
    cst_glyphRef$1 = "glyphRef",
    cst_hanging$2 = "hanging",
    cst_http_www_w3_org_2000_svg$0 = "http://www.w3.org/2000/svg",
    cst_ideographic$2 = "ideographic",
    cst_in$2 = "in",
    cst_inherit$2 = "inherit",
    cst_mathematical$2 = "mathematical",
    cst_middle$2 = "middle",
    cst_none$2 = "none",
    cst_offset$1 = "offset",
    cst_operator$1 = "operator",
    cst_path$1 = "path",
    cst_r$1 = "r",
    cst_rotate$1 = "rotate",
    cst_scale$1 = "scale",
    cst_spacing$1 = "spacing",
    cst_stroke_width$1 = "stroke-width",
    cst_style$1 = "style",
    cst_svg$1 = "svg",
    cst_targetY$1 = "targetY",
    cst_type$4 = "type",
    cst_values$1 = "values",
    cst_x$1 = "x",
    cst_y$1 = "y";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$7 = cst$8,
    cst$6 = cst$9,
    partial = [12, 32, [8, [0, 0, 3], 0, 0, [12, 41, 0]]],
    partial$0 = [0, 0, 3],
    cst$5 = cst$11,
    cst$4 = cst$9,
    content_type = "image/svg+xml",
    version = "SVG 1.1",
    standard = "http://www.w3.org/TR/svg11/",
    namespace = cst_http_www_w3_org_2000_svg$0,
    cst$3 = cst$8,
    cst$2 = cst$8,
    cst$1 = cst$8,
    cst$0 = cst$11,
    cst = cst$9,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    Xml_print = global_data.Xml_print,
    Xml_stream = global_data.Xml_stream,
    _i_ = [0, [11, "skewY(", [2, 0, [12, 41, 0]]], "skewY(%s)"],
    _j_ = [0, [11, "skewX(", [2, 0, [12, 41, 0]]], "skewX(%s)"],
    _k_ = [0, [11, "scale(", [2, 0, [12, 41, 0]]], "scale(%s)"],
    _l_ =
      [0, [8, [0, 0, 3], 0, 0, [12, 32, [8, [0, 0, 3], 0, 0, 0]]], "%g %g"],
    _m_ =
      [0,
       [11, "rotate(", [2, 0, [12, 32, [2, 0, [12, 41, 0]]]]],
       "rotate(%s %s)"],
    _n_ =
      [0,
       [11,
        "matrix(",
        [8,
         [0, 0, 3],
         0,
         0,
         [12,
          32,
          [8,
           [0, 0, 3],
           0,
           0,
           [12,
            32,
            [8,
             [0, 0, 3],
             0,
             0,
             [12,
              32,
              [8, [0, 0, 3], 0, 0, [12, 32, [8, partial$0, 0, 0, partial]]]]]]]]]],
       "matrix(%g %g %g %g %g %g)"],
    _o_ = [0, [11, "translate(", [2, 0, [12, 41, 0]]], "translate(%s)"],
    cst_none$1 = cst_none$2,
    cst_auto$2 = cst_auto$3,
    _f_ =
      [0,
       [8, [0, 0, 3], 0, 0, [11, cst$10, [8, [0, 0, 3], 0, 0, 0]]],
       cst_g_g],
    _g_ = [0, [8, [0, 0, 3], 0, 0, 0], "%g"],
    _e_ =
      [0,
       [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, [12, 32, [2, 0, 0]]]]]]],
       "%s %s %s %s"],
    cst_strokePaint = "strokePaint",
    cst_sourceAlpha = "sourceAlpha",
    cst_fillPaint = "fillPaint",
    cst_sourceGraphic = "sourceGraphic",
    cst_backgroundImage = "backgroundImage",
    cst_backgroundAlpha = "backgroundAlpha",
    cst_nochange = "nochange",
    cst_alphabetic$1 = cst_alphabetic$2,
    cst_auto$1 = cst_auto$3,
    cst_hanging$1 = cst_hanging$2,
    cst_mathematical$1 = cst_mathematical$2,
    cst_inherit$1 = cst_inherit$2,
    cst_middle$1 = cst_middle$2,
    cst_central$0 = cst_central$1,
    cst_usescript = "usescript",
    cst_ideographic$1 = cst_ideographic$2,
    cst_textbeforeedge = "textbeforeedge",
    cst_resetsize = "resetsize",
    cst_textafteredge = "textafteredge",
    _d_ =
      [0,
       [8, [0, 0, 3], 0, 0, [11, cst$10, [8, [0, 0, 3], 0, 0, 0]]],
       cst_g_g],
    cst_stitch = "stitch",
    cst_onRequest = "onRequest",
    cst_repeat = "repeat",
    cst_wrap = "wrap",
    cst_remove = "remove",
    cst_reflect = "reflect",
    cst_noStitch = "noStitch",
    cst_over = "over",
    cst_none$0 = cst_none$2,
    cst_medial = "medial",
    cst_never = "never",
    cst_butt = "butt",
    cst_auto$0 = cst_auto$3,
    cst_atop = "atop",
    cst_arithmetic = "arithmetic",
    cst_underline = "underline",
    cst_gamma = "gamma",
    cst_linear = "linear",
    cst_overline = "overline",
    cst_onLoad = "onLoad",
    cst_turbulence = "turbulence",
    cst_table = "table",
    cst_geometricPrecision = "geometricPrecision",
    cst_optimizeSpeed = "optimizeSpeed",
    cst_miter = "miter",
    cst_initial = "initial",
    cst_start = "start",
    cst_whenNotActive = "whenNotActive",
    cst_identity = "identity",
    cst_skewY = "skewY",
    cst_skewX = "skewX",
    cst_square = "square",
    cst_scale$0 = cst_scale$1,
    cst_exact = "exact",
    cst_perceptual = "perceptual",
    cst_discrete = "discrete",
    cst_erode = "erode",
    cst_middle$0 = cst_middle$2,
    cst_round = "round",
    cst_xor = "xor",
    cst_XML = "XML",
    cst_sum = "sum",
    cst_pad = "pad",
    cst_out = "out",
    cst_new = "new",
    cst_end = "end",
    cst_CSS = "CSS",
    cst_in$1 = cst_in$2,
    cst_v = "v",
    cst_r$0 = cst_r$1,
    cst_h = "h",
    cst_g$0 = cst_g$1,
    cst_b = "b",
    cst_a$0 = cst_a$1,
    cst_rotate$0 = cst_rotate$1,
    cst_disable = "disable",
    cst_screen = "screen",
    cst_absolute_colorimetric = "absolute_colorimetric",
    cst_inherit$0 = cst_inherit$2,
    cst_always = "always",
    cst_spacingAndGlyphs = "spacingAndGlyphs",
    cst_replace = "replace",
    cst_multiply = "multiply",
    cst_spline = "spline",
    cst_matrix = "matrix",
    cst_saturation = "saturation",
    cst_dilate = "dilate",
    cst_translate = "translate",
    cst_default = "default",
    cst_lighten = "lighten",
    cst_normal = "normal",
    cst_freeze = "freeze",
    cst_magnify = "magnify",
    cst_hueRotate = "hueRotate",
    cst_spacing$0 = cst_spacing$1,
    cst_fractalNoise = "fractalNoise",
    cst_saturate = "saturate",
    cst_userSpaceOnUse = "userSpaceOnUse",
    cst_objectBoundingBox = "objectBoundingBox",
    cst_darken = "darken",
    cst_paced = "paced",
    cst_isolated = "isolated",
    cst_optimizeLegibility = "optimizeLegibility",
    cst_luminanceToAlpha = "luminanceToAlpha",
    cst_line_through = "line-through",
    cst_other = "other",
    cst_terminal = "terminal",
    cst_blink = "blink",
    cst_stroke_width$0 = cst_stroke_width$1,
    cst_stretch = "stretch",
    cst_bevel = "bevel",
    cst_duplicate = "duplicate",
    cst_preserve = "preserve",
    cst_relative_colorimetric = "relative_colorimetric",
    cst_after_edge = "after-edge",
    cst_alphabetic$0 = cst_alphabetic$2,
    cst_auto = cst_auto$3,
    cst_hanging$0 = cst_hanging$2,
    cst_mathematical$0 = cst_mathematical$2,
    cst_inherit = cst_inherit$2,
    cst_middle = cst_middle$2,
    cst_baseline = "baseline",
    cst_central = cst_central$1,
    cst_ideographic$0 = cst_ideographic$2,
    cst_text_before_edge = "text-before-edge",
    cst_before_edge = "before-edge",
    cst_text_after_edge = "text-after-edge",
    _h_ = [0, "; "],
    cst_http_www_w3_org_1999_xlink = "http://www.w3.org/1999/xlink",
    cst_xmlns_xlink = "xmlns:xlink",
    cst_http_www_w3_org_2000_svg = cst_http_www_w3_org_2000_svg$0,
    cst_xmlns = "xmlns",
    cst_svg$0 = cst_svg$1,
    cst_stroke_dasharray = "stroke-dasharray",
    cst_stroke_linejoin = "stroke-linejoin",
    cst_stroke_linecap = "stroke-linecap",
    cst_dominant_baseline = "dominant-baseline",
    cst_alignment_baseline = "alignment-baseline",
    cst_arabic_form = "arabic-form",
    cst_orientation = "orientation",
    cst_accumulate = "accumulate",
    cst_additive = "additive",
    cst_calcMode = "calcMode",
    cst_fill$0 = cst_fill$1,
    cst_restart = "restart",
    cst_attributeType = "attributeType",
    cst_xlink_actuate = "xlink:actuate",
    cst_xlink_show = "xlink:show",
    cst_type$2 = cst_type$4,
    cst_stitchTiles = "stitchTiles",
    cst_operator$0 = cst_operator$1,
    cst_yChannelSelector = "yChannelSelector",
    cst_xChannelSelector = "xChannelSelector",
    cst_targetY$0 = cst_targetY$1,
    cst_operator = cst_operator$1,
    cst_type$1 = cst_type$4,
    cst_type$0 = cst_type$4,
    cst_mode = "mode",
    cst_in2 = "in2",
    cst_in$0 = cst_in$2,
    cst_primitiveUnits = "primitiveUnits",
    cst_maskContentUnits = "maskContentUnits",
    cst_maskUnits = "maskUnits",
    cst_clipPathUnits = "clipPathUnits",
    cst_patternTransform = "patternTransform",
    cst_patternContentUnits = "patternContentUnits",
    cst_patternUnits = "patternUnits",
    cst_offset = cst_offset$1,
    cst_spreadMethod = "spreadMethod",
    cst_gradientUnits = "gradientUnits",
    cst_rendering_intent = "rendering-intent",
    cst_orient = "orient",
    cst_markerUnits = "markerUnits",
    cst_spacing = cst_spacing$1,
    cst_method = "method",
    cst_text_rendering = "text-rendering",
    cst_text_decoration = "text-decoration",
    cst_text_anchor = "text-anchor",
    cst_lengthAdjust = "lengthAdjust",
    cst_xml_space = "xml:space",
    cst_data = "data-",
    cst_zoomAndSpan = "zoomAndSpan",
    cst_foreignObject = "foreignObject",
    cst_metadata = "metadata",
    _c_ =
      [0,
       "-//W3C//DTD SVG 1.1//EN",
       [0, "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd", 0]],
    cst_svg = cst_svg$1,
    cst_version = "version",
    cst_baseProfile = "baseProfile",
    cst_x = cst_x$1,
    cst_y = cst_y$1,
    cst_width = "width",
    cst_height = "height",
    cst_preserveAspectRatio = "preserveAspectRatio",
    cst_contentScriptType = "contentScriptType",
    cst_contentStyleType = "contentStyleType",
    cst_href = "href",
    cst_xlink_href = "xlink:href",
    cst_requiredFeatures = "requiredFeatures",
    cst_requiredExtension = "requiredExtension",
    cst_systemLanguage = "systemLanguage",
    cst_externalRessourcesRequired = "externalRessourcesRequired",
    cst_id = "id",
    cst_xml_base = "xml:base",
    cst_xml_lang = "xml:lang",
    cst_type = cst_type$4,
    cst_media = "media",
    cst_xlink_title = "xlink:title",
    cst_class = "class",
    cst_style = cst_style$1,
    cst_transform = "transform",
    cst_viewBox = "viewBox",
    cst_d = "d",
    cst_pathLength = "pathLength",
    cst_rx = "rx",
    cst_ry = "ry",
    cst_cx = "cx",
    cst_cy = "cy",
    cst_r = cst_r$1,
    cst_x1 = "x1",
    cst_y1 = "y1",
    cst_x2 = "x2",
    cst_y2 = "y2",
    cst_points = "points",
    cst_x$0 = cst_x$1,
    cst_y$0 = cst_y$1,
    cst_dx = cst_dx$1,
    cst_dy = cst_dy$1,
    cst_dx$0 = cst_dx$1,
    cst_dy$0 = cst_dy$1,
    cst_textLength = "textLength",
    cst_rotate = cst_rotate$1,
    cst_startOffset = "startOffset",
    cst_glyphRef = cst_glyphRef$1,
    cst_format = "format",
    cst_refX = "refX",
    cst_refY = "refY",
    cst_markerWidth = "markerWidth",
    cst_markerHeight = "markerHeight",
    cst_local = "local",
    cst_gradientTransform = "gradientTransform",
    cst_fx = "fx",
    cst_fy = "fy",
    cst_filterResUnits = "filterResUnits",
    cst_result = "result",
    cst_azimuth = "azimuth",
    cst_elevation = "elevation",
    cst_pointsAtX = "pointsAtX",
    cst_pointsAtY = "pointsAtY",
    cst_pointsAtZ = "pointsAtZ",
    cst_specularExponent = "specularExponent",
    cst_specularConstant = "specularConstant",
    cst_limitingConeAngle = "limitingConeAngle",
    cst_values = cst_values$1,
    cst_tableValues = "tableValues",
    cst_intercept = "intercept",
    cst_amplitude = "amplitude",
    cst_exponent = "exponent",
    cst_offset$0 = cst_offset$1,
    cst_k1 = "k1",
    cst_k2 = "k2",
    cst_k3 = "k3",
    cst_k4 = "k4",
    cst_order = "order",
    cst_kernelMatrix = "kernelMatrix",
    cst_divisor = "divisor",
    cst_bias = "bias",
    cst_kernelUnitLength = "kernelUnitLength",
    cst_targetX = "targetX",
    cst_targetY = cst_targetY$1,
    cst_preserveAlpha = "preserveAlpha",
    cst_surfaceScale = "surfaceScale",
    cst_diffuseConstant = "diffuseConstant",
    cst_scale = cst_scale$1,
    cst_stdDeviation = "stdDeviation",
    cst_radius = "radius",
    cst_baseFrequency = "baseFrequency",
    cst_numOctaves = "numOctaves",
    cst_seed = "seed",
    cst_xlink_target = "xlink:target",
    cst_viewTarget = "viewTarget",
    cst_attributeName = "attributeName",
    cst_begin = "begin",
    cst_dur = "dur",
    cst_min = "min",
    cst_max = "max",
    cst_repeatCount = "repeatCount",
    cst_repeatDur = "repeatDur",
    cst_fill = cst_fill$1,
    cst_values$0 = cst_values$1,
    cst_keyTimes = "keyTimes",
    cst_keySplines = "keySplines",
    cst_from = "from",
    cst_to = "to",
    cst_by = "by",
    cst_keyPoints = "keyPoints",
    cst_path = cst_path$1,
    cst_type$3 = cst_type$4,
    cst_horiz_origin_x = "horiz-origin-x",
    cst_horiz_origin_y = "horiz-origin-y",
    cst_horiz_adv_x = "horiz-adv-x",
    cst_vert_origin_x = "vert-origin-x",
    cst_vert_origin_y = "vert-origin-y",
    cst_vert_adv_y = "vert-adv-y",
    cst_unicode = "unicode",
    cst_glyphname = "glyphname",
    cst_lang = "lang",
    cst_u1 = "u1",
    cst_u2 = "u2",
    cst_g1 = "g1",
    cst_g2 = "g2",
    cst_k = "k",
    cst_font_family = "font-family",
    cst_font_style = "font-style",
    cst_font_variant = "font-variant",
    cst_font_weight = "font-weight",
    cst_font_stretch = "font-stretch",
    cst_font_size = "font-size",
    cst_unicode_range = "unicode-range",
    cst_units_per_em = "units-per-em",
    cst_stemv = "stemv",
    cst_stemh = "stemh",
    cst_slope = "slope",
    cst_cap_height = "cap-height",
    cst_x_height = "x-height",
    cst_accent_height = "accent-height",
    cst_ascent = "ascent",
    cst_widths = "widths",
    cst_bbox = "bbox",
    cst_ideographic = cst_ideographic$2,
    cst_alphabetic = cst_alphabetic$2,
    cst_mathematical = cst_mathematical$2,
    cst_hanging = cst_hanging$2,
    cst_v_ideographic = "v-ideographic",
    cst_v_alphabetic = "v-alphabetic",
    cst_v_mathematical = "v-mathematical",
    cst_v_hanging = "v-hanging",
    cst_underline_position = "underline-position",
    cst_underline_thickness = "underline-thickness",
    cst_strikethrough_position = "strikethrough-position",
    cst_strikethrough_thickness = "strikethrough-thickness",
    cst_overline_position = "overline-position",
    cst_overline_thickness = "overline-thickness",
    cst_string = "string",
    cst_name = "name",
    cst_onabort = "onabort",
    cst_onactivate = "onactivate",
    cst_onbegin = "onbegin",
    cst_onend = "onend",
    cst_onerror = "onerror",
    cst_onfocusin = "onfocusin",
    cst_onfocusout = "onfocusout",
    cst_onload = "onload",
    cst_onrepeat = "onrepeat",
    cst_onresize = "onresize",
    cst_onscroll = "onscroll",
    cst_onunload = "onunload",
    cst_onzoom = "onzoom",
    cst_onclick = "onclick",
    cst_onmousedown = "onmousedown",
    cst_onmouseup = "onmouseup",
    cst_onmouseover = "onmouseover",
    cst_onmouseout = "onmouseout",
    cst_onmousemove = "onmousemove",
    cst_ontouchstart = "ontouchstart",
    cst_ontouchend = "ontouchend",
    cst_ontouchmove = "ontouchmove",
    cst_ontouchcancel = "ontouchcancel",
    cst_stop_color = "stop-color",
    cst_stop_opacity = "stop-opacity",
    cst_stroke = "stroke",
    cst_stroke_width = cst_stroke_width$1,
    cst_stroke_miterlimit = "stroke-miterlimit",
    cst_stroke_dashoffset = "stroke-dashoffset",
    cst_stroke_opacity = "stroke-opacity",
    cst_g = cst_g$1,
    cst_defs = "defs",
    cst_desc = "desc",
    cst_title = "title",
    cst_symbol = "symbol",
    cst_use = "use",
    cst_image = "image",
    cst_switch = "switch",
    cst_style$0 = cst_style$1,
    cst_path$0 = cst_path$1,
    cst_rect = "rect",
    cst_circle = "circle",
    cst_ellipse = "ellipse",
    cst_line = "line",
    cst_polyline = "polyline",
    cst_polygon = "polygon",
    cst_text = "text",
    cst_tspan = "tspan",
    cst_tref = "tref",
    cst_textPath = "textPath",
    cst_altGlyph = "altGlyph",
    cst_altGlyphDef = "altGlyphDef",
    cst_altGlyphItem = "altGlyphItem",
    cst_glyphRef$0 = cst_glyphRef$1,
    cst_marker = "marker",
    cst_color_profile = "color-profile",
    cst_linearGradient = "linearGradient",
    cst_radialGradient = "radialGradient",
    cst_stop = "stop",
    cst_pattern = "pattern",
    cst_clipPath = "clipPath",
    cst_filter = "filter",
    cst_feDistantLight = "feDistantLight",
    cst_fePointLight = "fePointLight",
    cst_feSpotLight = "feSpotLight",
    cst_feBlend = "feBlend",
    cst_feColorMatrix = "feColorMatrix",
    cst_feComponentTransfer = "feComponentTransfer",
    cst_feFuncA = "feFuncA",
    cst_feFuncG = "feFuncG",
    cst_feFuncB = "feFuncB",
    cst_feFuncR = "feFuncR",
    cst_feComposite = "feComposite",
    cst_feConvolveMatrix = "feConvolveMatrix",
    cst_feDiffuseLighting = "feDiffuseLighting",
    cst_feDisplacementMap = "feDisplacementMap",
    cst_feFlood = "feFlood",
    cst_feGaussianBlur = "feGaussianBlur",
    cst_feImage = "feImage",
    cst_feMerge = "feMerge",
    cst_feMorphology = "feMorphology",
    cst_feOffset = "feOffset",
    cst_feSpecularLighting = "feSpecularLighting",
    cst_feTile = "feTile",
    cst_feTurbulence = "feTurbulence",
    cst_cursor = "cursor",
    cst_a = cst_a$1,
    cst_view = "view",
    cst_script = "script",
    cst_animate = "animate",
    cst_set = "set",
    cst_animateMotion = "animateMotion",
    cst_mpath = "mpath",
    cst_animateColor = "animateColor",
    cst_animateTransform = "animateTransform",
    cst_font = "font",
    cst_glyph = "glyph",
    cst_missing_glyph = "missing-glyph",
    cst_hkern = "hkern",
    cst_vkern = "vkern",
    cst_font_face = "font-face",
    cst_font_face_src = "font-face-src",
    cst_font_face_uri = cst_font_face_uri$1,
    cst_font_face_uri$0 = cst_font_face_uri$1,
    cst_font_face_name = "font-face-name",
    cst_none = cst_none$2,
    cst_currentColor = "currentColor",
    cst_px = "px",
    cst_pt = "pt",
    cst_pc = "pc",
    cst_in = cst_in$2,
    cst_mm = "mm",
    cst_ex = "ex",
    cst_em = "em",
    cst_cm = "cm",
    cst_grad = "grad",
    cst_deg = "deg",
    cst_rad = "rad",
    _b_ = [0, [8, [0, 0, 3], 0, 0, [2, 0, 0]], "%g%s"],
    _a_ = [0, [11, "url(", [2, 0, [12, 41, 0]]], "url(%s)"];
   function string_of_iri(x){return caml_call2(Stdlib_Printf[4], _a_, x);}
   function to_string(f, param){
    var unit = param[2], n = param[1];
    if(unit)
     var unit$0 = unit[1], _fd_ = caml_call1(f, unit$0);
    else
     var _fd_ = cst;
    return caml_call3(Stdlib_Printf[4], _b_, n, _fd_);
   }
   function angle_names(param){
    return 4099509 === param
            ? cst_rad
            : 793050094 <= param ? cst_grad : cst_deg;
   }
   function string_of_angle(a){return to_string(angle_names, a);}
   function length_names(param){
    return 16389 <= param
            ? 17280
              === param
              ? cst_mm
              : 17956
                <= param
                ? 17960 <= param ? cst_px : cst_pt
                : 17939 <= param ? cst_pc : cst_in
            : 15496
              <= param
              ? 15507 <= param ? cst_ex : cst_em
              : 15050 <= param ? cst_cm : cst$0;
   }
   function string_of_length(a){return to_string(length_names, a);}
   function list(opt, f, l){
    if(opt) var sth = opt[1], sep = sth; else var sep = cst$2;
    var _fc_ = caml_call2(Stdlib_List[19], f, l);
    return caml_call2(Stdlib_String[6], sep, _fc_);
   }
   function string_of_paint_whitout_icc(param){
    if(typeof param === "number")
     return 870530776 <= param ? cst_none : cst_currentColor;
    var match = param[2], icc = match[2], c = match[1];
    if(! icc) return c;
    var x = icc[1], _fb_ = caml_call2(Stdlib[28], cst$1, x);
    return caml_call2(Stdlib[28], c, _fb_);
   }
   function string_of_paint(c){
    if(typeof c !== "number" && 3652393 <= c[1]){
     var _e9_ = c[2], match = _e9_[2], iri = _e9_[1];
     if(! match) return string_of_iri(iri);
     var
      b = match[1],
      _e__ = string_of_paint_whitout_icc(b),
      _e$_ = caml_call2(Stdlib[28], cst$3, _e__),
      _fa_ = string_of_iri(iri);
     return caml_call2(Stdlib[28], _fa_, _e$_);
    }
    return string_of_paint_whitout_icc(c);
   }
   function Make_with_wrapped_functions(Xml, C){
    var
     doctype = caml_call2(Xml_print[5], cst_svg, _c_),
     Info = [0, content_type, 0, 0, version, standard, namespace, doctype],
     string_of_uri = Xml[2],
     uri_of_string = Xml[3];
    function tot(x){return x;}
    function totl(x){return x;}
    function toelt(x){return x;}
    function toeltl(x){return x;}
    function to_attrib(x){return x;}
    function nullary(tag, a, param){
     var _e8_ = caml_call1(Xml[1][3], 0);
     return caml_call3(Xml[21], a, tag, _e8_);
    }
    function unary(tag, a, elt){
     var _e7_ = caml_call1(Xml[1][4], elt);
     return caml_call3(Xml[21], a, tag, _e7_);
    }
    function star(tag, a, elts){return caml_call3(Xml[21], a, tag, elts);}
    function to_xmlattribs(x){return x;}
    var
     float_attrib = Xml[4],
     string_attrib = Xml[6],
     string_of_coord = C[10],
     string_of_length = C[10],
     string_of_lengths = C[11];
    function user_attrib(f, name, v){
     var _e6_ = caml_call2(Xml[1][2], f, v);
     return caml_call2(Xml[6], name, _e6_);
    }
    var color_attrib = Xml[6];
    function metadata(a, children){
     return caml_call3(Xml[21], a, cst_metadata, children);
    }
    function foreignObject(a, children){
     return caml_call3(Xml[21], a, cst_foreignObject, children);
    }
    function txt(s){return caml_call1(Xml[17], s);}
    var
     a_version = caml_call1(string_attrib, cst_version),
     a_baseProfile = caml_call1(string_attrib, cst_baseProfile);
    function a_x(_e5_){return user_attrib(string_of_coord, cst_x, _e5_);}
    function a_y(_e4_){return user_attrib(string_of_coord, cst_y, _e4_);}
    function a_width(_e3_){
     return user_attrib(string_of_length, cst_width, _e3_);
    }
    function a_height(_e2_){
     return user_attrib(string_of_length, cst_height, _e2_);
    }
    var
     a_preserveAspectRatio =
       caml_call1(string_attrib, cst_preserveAspectRatio),
     a_contentScriptType = caml_call1(string_attrib, cst_contentScriptType),
     a_contentStyleType = caml_call1(string_attrib, cst_contentStyleType);
    function a_zoomAndPan(x){return user_attrib(C[4], cst_zoomAndSpan, x);}
    var
     a_href = caml_call1(string_attrib, cst_href),
     a_xlink_href = caml_call1(string_attrib, cst_xlink_href),
     a_requiredFeatures = caml_call1(Xml[7], cst_requiredFeatures),
     a_requiredExtensions = caml_call1(Xml[7], cst_requiredExtension),
     a_systemLanguage = caml_call1(Xml[8], cst_systemLanguage),
     _Y_ = C[3];
    function a_externalRessourcesRequired(_e1_){
     return user_attrib(_Y_, cst_externalRessourcesRequired, _e1_);
    }
    var a_id = caml_call1(string_attrib, cst_id);
    function a_user_data(name){
     return caml_call1(string_attrib, caml_call2(Stdlib[28], cst_data, name));
    }
    var
     a_xml_base = caml_call1(string_attrib, cst_xml_base),
     a_xml_lang = caml_call1(string_attrib, cst_xml_lang);
    function a_xml_space(x){return user_attrib(C[4], cst_xml_space, x);}
    var
     a_type = caml_call1(string_attrib, cst_type),
     a_media = caml_call1(Xml[8], cst_media),
     a_xlink_title = caml_call1(string_attrib, cst_xlink_title),
     a_class = caml_call1(Xml[7], cst_class),
     a_style = caml_call1(string_attrib, cst_style),
     _Z_ = C[21];
    function a_transform(_e0_){return user_attrib(_Z_, cst_transform, _e0_);}
    var ___ = C[7];
    function a_viewBox(_eZ_){return user_attrib(___, cst_viewBox, _eZ_);}
    var
     a_d = caml_call1(string_attrib, cst_d),
     a_pathLength = caml_call1(float_attrib, cst_pathLength);
    function a_rx(_eY_){return user_attrib(string_of_length, cst_rx, _eY_);}
    function a_ry(_eX_){return user_attrib(string_of_length, cst_ry, _eX_);}
    function a_cx(_eW_){return user_attrib(string_of_length, cst_cx, _eW_);}
    function a_cy(_eV_){return user_attrib(string_of_length, cst_cy, _eV_);}
    function a_r(_eU_){return user_attrib(string_of_length, cst_r, _eU_);}
    function a_x1(_eT_){return user_attrib(string_of_coord, cst_x1, _eT_);}
    function a_y1(_eS_){return user_attrib(string_of_coord, cst_y1, _eS_);}
    function a_x2(_eR_){return user_attrib(string_of_coord, cst_x2, _eR_);}
    function a_y2(_eQ_){return user_attrib(string_of_coord, cst_y2, _eQ_);}
    var _$_ = C[5];
    function a_points(_eP_){return user_attrib(_$_, cst_points, _eP_);}
    function a_x_list(_eO_){
     return user_attrib(string_of_lengths, cst_x$0, _eO_);
    }
    function a_y_list(_eN_){
     return user_attrib(string_of_lengths, cst_y$0, _eN_);
    }
    var _aa_ = C[12];
    function a_dx(_eM_){return user_attrib(_aa_, cst_dx, _eM_);}
    var _ab_ = C[12];
    function a_dy(_eL_){return user_attrib(_ab_, cst_dy, _eL_);}
    function a_dx_list(_eK_){
     return user_attrib(string_of_lengths, cst_dx$0, _eK_);
    }
    function a_dy_list(_eJ_){
     return user_attrib(string_of_lengths, cst_dy$0, _eJ_);
    }
    function a_lengthAdjust(x){return user_attrib(C[4], cst_lengthAdjust, x);}
    function a_textLength(_eI_){
     return user_attrib(string_of_length, cst_textLength, _eI_);
    }
    function a_text_anchor(x){return user_attrib(C[4], cst_text_anchor, x);}
    function a_text_decoration(x){
     return user_attrib(C[4], cst_text_decoration, x);
    }
    function a_text_rendering(x){
     return user_attrib(C[4], cst_text_rendering, x);
    }
    var _ac_ = C[14];
    function a_rotate(_eH_){return user_attrib(_ac_, cst_rotate, _eH_);}
    function a_startOffset(_eG_){
     return user_attrib(string_of_length, cst_startOffset, _eG_);
    }
    function a_method(x){return user_attrib(C[4], cst_method, x);}
    function a_spacing(x){return user_attrib(C[4], cst_spacing, x);}
    var
     a_glyphRef = caml_call1(string_attrib, cst_glyphRef),
     a_format = caml_call1(string_attrib, cst_format);
    function a_markerUnits(x){return user_attrib(C[4], cst_markerUnits, x);}
    function a_refX(_eF_){
     return user_attrib(string_of_coord, cst_refX, _eF_);
    }
    function a_refY(_eE_){
     return user_attrib(string_of_coord, cst_refY, _eE_);
    }
    function a_markerWidth(_eD_){
     return user_attrib(string_of_length, cst_markerWidth, _eD_);
    }
    function a_markerHeight(_eC_){
     return user_attrib(string_of_length, cst_markerHeight, _eC_);
    }
    function a_orient(x){return user_attrib(C[17], cst_orient, x);}
    var a_local = caml_call1(string_attrib, cst_local);
    function a_rendering_intent(x){
     return user_attrib(C[4], cst_rendering_intent, x);
    }
    function a_gradientUnits(x){
     return user_attrib(C[4], cst_gradientUnits, x);
    }
    var _ad_ = C[21];
    function a_gradientTransform(_eB_){
     return user_attrib(_ad_, cst_gradientTransform, _eB_);
    }
    function a_spreadMethod(x){return user_attrib(C[4], cst_spreadMethod, x);}
    function a_fx(_eA_){return user_attrib(string_of_coord, cst_fx, _eA_);}
    function a_fy(_ez_){return user_attrib(string_of_coord, cst_fy, _ez_);}
    function a_offset(x){return user_attrib(C[16], cst_offset, x);}
    function a_patternUnits(x){return user_attrib(C[4], cst_patternUnits, x);}
    function a_patternContentUnits(x){
     return user_attrib(C[4], cst_patternContentUnits, x);
    }
    function a_patternTransform(x){
     return user_attrib(C[21], cst_patternTransform, x);
    }
    function a_clipPathUnits(x){
     return user_attrib(C[4], cst_clipPathUnits, x);
    }
    function a_maskUnits(x){return user_attrib(C[4], cst_maskUnits, x);}
    function a_maskContentUnits(x){
     return user_attrib(C[4], cst_maskContentUnits, x);
    }
    function a_primitiveUnits(x){
     return user_attrib(C[4], cst_primitiveUnits, x);
    }
    var _ae_ = C[13];
    function a_filterRes(_ey_){
     return user_attrib(_ae_, cst_filterResUnits, _ey_);
    }
    var a_result = caml_call1(string_attrib, cst_result);
    function a_in(x){return user_attrib(C[8], cst_in$0, x);}
    function a_in2(x){return user_attrib(C[8], cst_in2, x);}
    var
     a_azimuth = caml_call1(float_attrib, cst_azimuth),
     a_elevation = caml_call1(float_attrib, cst_elevation),
     a_pointsAtX = caml_call1(float_attrib, cst_pointsAtX),
     a_pointsAtY = caml_call1(float_attrib, cst_pointsAtY),
     a_pointsAtZ = caml_call1(float_attrib, cst_pointsAtZ),
     a_specularExponent = caml_call1(float_attrib, cst_specularExponent),
     a_specularConstant = caml_call1(float_attrib, cst_specularConstant),
     a_limitingConeAngle = caml_call1(float_attrib, cst_limitingConeAngle);
    function a_mode(x){return user_attrib(C[4], cst_mode, x);}
    function a_feColorMatrix_type(x){return user_attrib(C[4], cst_type$0, x);}
    var _af_ = C[14];
    function a_values(_ex_){return user_attrib(_af_, cst_values, _ex_);}
    function a_transfer_type(x){return user_attrib(C[4], cst_type$1, x);}
    var _ag_ = C[14];
    function a_tableValues(_ew_){
     return user_attrib(_ag_, cst_tableValues, _ew_);
    }
    var _ah_ = C[12];
    function a_intercept(_ev_){return user_attrib(_ah_, cst_intercept, _ev_);}
    var _ai_ = C[12];
    function a_amplitude(_eu_){return user_attrib(_ai_, cst_amplitude, _eu_);}
    var _aj_ = C[12];
    function a_exponent(_et_){return user_attrib(_aj_, cst_exponent, _et_);}
    var _ak_ = C[12];
    function a_transfer_offset(_es_){
     return user_attrib(_ak_, cst_offset$0, _es_);
    }
    function a_feComposite_operator(x){
     return user_attrib(C[4], cst_operator, x);
    }
    var _al_ = C[12];
    function a_k1(_er_){return user_attrib(_al_, cst_k1, _er_);}
    var _am_ = C[12];
    function a_k2(_eq_){return user_attrib(_am_, cst_k2, _eq_);}
    var _an_ = C[12];
    function a_k3(_ep_){return user_attrib(_an_, cst_k3, _ep_);}
    var _ao_ = C[12];
    function a_k4(_eo_){return user_attrib(_ao_, cst_k4, _eo_);}
    var _ap_ = C[13];
    function a_order(_en_){return user_attrib(_ap_, cst_order, _en_);}
    var _aq_ = C[14];
    function a_kernelMatrix(_em_){
     return user_attrib(_aq_, cst_kernelMatrix, _em_);
    }
    var _ar_ = C[12];
    function a_divisor(_el_){return user_attrib(_ar_, cst_divisor, _el_);}
    var _as_ = C[12];
    function a_bias(_ek_){return user_attrib(_as_, cst_bias, _ek_);}
    var _at_ = C[13];
    function a_kernelUnitLength(_ej_){
     return user_attrib(_at_, cst_kernelUnitLength, _ej_);
    }
    var _au_ = C[9];
    function a_targetX(_ei_){return user_attrib(_au_, cst_targetX, _ei_);}
    var _av_ = C[9];
    function a_targetY(_eh_){return user_attrib(_av_, cst_targetY, _eh_);}
    function a_edgeMode(x){return user_attrib(C[4], cst_targetY$0, x);}
    var _aw_ = C[3];
    function a_preserveAlpha(_eg_){
     return user_attrib(_aw_, cst_preserveAlpha, _eg_);
    }
    var _ax_ = C[12];
    function a_surfaceScale(_ef_){
     return user_attrib(_ax_, cst_surfaceScale, _ef_);
    }
    var _ay_ = C[12];
    function a_diffuseConstant(_ee_){
     return user_attrib(_ay_, cst_diffuseConstant, _ee_);
    }
    var _az_ = C[12];
    function a_scale(_ed_){return user_attrib(_az_, cst_scale, _ed_);}
    function a_xChannelSelector(x){
     return user_attrib(C[4], cst_xChannelSelector, x);
    }
    function a_yChannelSelector(x){
     return user_attrib(C[4], cst_yChannelSelector, x);
    }
    var _aA_ = C[13];
    function a_stdDeviation(_ec_){
     return user_attrib(_aA_, cst_stdDeviation, _ec_);
    }
    function a_feMorphology_operator(x){
     return user_attrib(C[4], cst_operator$0, x);
    }
    var _aB_ = C[13];
    function a_radius(_eb_){return user_attrib(_aB_, cst_radius, _eb_);}
    var _aC_ = C[13];
    function a_baseFrenquency(_ea_){
     return user_attrib(_aC_, cst_baseFrequency, _ea_);
    }
    var _aD_ = C[9];
    function a_numOctaves(_d$_){
     return user_attrib(_aD_, cst_numOctaves, _d$_);
    }
    var _aE_ = C[12];
    function a_seed(_d__){return user_attrib(_aE_, cst_seed, _d__);}
    function a_stitchTiles(x){return user_attrib(C[4], cst_stitchTiles, x);}
    function a_feTurbulence_type(x){return user_attrib(C[4], cst_type$2, x);}
    function a_xlink_show(x){return user_attrib(C[4], cst_xlink_show, x);}
    function a_xlink_actuate(x){
     return user_attrib(C[4], cst_xlink_actuate, x);
    }
    var
     a_target = caml_call1(string_attrib, cst_xlink_target),
     a_viewTarget = caml_call1(string_attrib, cst_viewTarget),
     a_attributeName = caml_call1(string_attrib, cst_attributeName);
    function a_attributeType(x){
     return user_attrib(C[4], cst_attributeType, x);
    }
    var
     a_begin = caml_call1(string_attrib, cst_begin),
     a_dur = caml_call1(string_attrib, cst_dur),
     a_min = caml_call1(string_attrib, cst_min),
     a_max = caml_call1(string_attrib, cst_max);
    function a_restart(x){return user_attrib(C[4], cst_restart, x);}
    var
     a_repeatCount = caml_call1(string_attrib, cst_repeatCount),
     a_repeatDur = caml_call1(string_attrib, cst_repeatDur),
     _aF_ = C[18];
    function a_fill(_d9_){return user_attrib(_aF_, cst_fill, _d9_);}
    function a_animation_fill(x){return user_attrib(C[4], cst_fill$0, x);}
    function a_calcMode(x){return user_attrib(C[4], cst_calcMode, x);}
    var
     a_animation_values = caml_call1(Xml[8], cst_values$0),
     a_keyTimes = caml_call1(Xml[8], cst_keyTimes),
     a_keySplines = caml_call1(Xml[8], cst_keySplines),
     a_from = caml_call1(string_attrib, cst_from),
     a_to = caml_call1(string_attrib, cst_to),
     a_by = caml_call1(string_attrib, cst_by);
    function a_additive(x){return user_attrib(C[4], cst_additive, x);}
    function a_accumulate(x){return user_attrib(C[4], cst_accumulate, x);}
    var _aG_ = C[15];
    function a_keyPoints(_d8_){return user_attrib(_aG_, cst_keyPoints, _d8_);}
    var a_path = caml_call1(string_attrib, cst_path), _aH_ = C[4];
    function a_animateTransform_type(_d7_){
     return user_attrib(_aH_, cst_type$3, _d7_);
    }
    var _aI_ = C[12];
    function a_horiz_origin_x(_d6_){
     return user_attrib(_aI_, cst_horiz_origin_x, _d6_);
    }
    var _aJ_ = C[12];
    function a_horiz_origin_y(_d5_){
     return user_attrib(_aJ_, cst_horiz_origin_y, _d5_);
    }
    var _aK_ = C[12];
    function a_horiz_adv_x(_d4_){
     return user_attrib(_aK_, cst_horiz_adv_x, _d4_);
    }
    var _aL_ = C[12];
    function a_vert_origin_x(_d3_){
     return user_attrib(_aL_, cst_vert_origin_x, _d3_);
    }
    var _aM_ = C[12];
    function a_vert_origin_y(_d2_){
     return user_attrib(_aM_, cst_vert_origin_y, _d2_);
    }
    var _aN_ = C[12];
    function a_vert_adv_y(_d1_){
     return user_attrib(_aN_, cst_vert_adv_y, _d1_);
    }
    var
     a_unicode = caml_call1(string_attrib, cst_unicode),
     a_glyph_name = caml_call1(string_attrib, cst_glyphname);
    function a_orientation(x){return user_attrib(C[4], cst_orientation, x);}
    function a_arabic_form(x){return user_attrib(C[4], cst_arabic_form, x);}
    var
     a_lang = caml_call1(string_attrib, cst_lang),
     a_u1 = caml_call1(string_attrib, cst_u1),
     a_u2 = caml_call1(string_attrib, cst_u2),
     a_g1 = caml_call1(string_attrib, cst_g1),
     a_g2 = caml_call1(string_attrib, cst_g2),
     a_k = caml_call1(string_attrib, cst_k),
     a_font_family = caml_call1(string_attrib, cst_font_family),
     a_font_style = caml_call1(string_attrib, cst_font_style),
     a_font_variant = caml_call1(string_attrib, cst_font_variant),
     a_font_weight = caml_call1(string_attrib, cst_font_weight),
     a_font_stretch = caml_call1(string_attrib, cst_font_stretch),
     a_font_size = caml_call1(string_attrib, cst_font_size),
     a_unicode_range = caml_call1(string_attrib, cst_unicode_range),
     a_units_per_em = caml_call1(string_attrib, cst_units_per_em),
     _aO_ = C[12];
    function a_stemv(_d0_){return user_attrib(_aO_, cst_stemv, _d0_);}
    var _aP_ = C[12];
    function a_stemh(_dZ_){return user_attrib(_aP_, cst_stemh, _dZ_);}
    var _aQ_ = C[12];
    function a_slope(_dY_){return user_attrib(_aQ_, cst_slope, _dY_);}
    var _aR_ = C[12];
    function a_cap_height(_dX_){
     return user_attrib(_aR_, cst_cap_height, _dX_);
    }
    var _aS_ = C[12];
    function a_x_height(_dW_){return user_attrib(_aS_, cst_x_height, _dW_);}
    var _aT_ = C[12];
    function a_accent_height(_dV_){
     return user_attrib(_aT_, cst_accent_height, _dV_);
    }
    var _aU_ = C[12];
    function a_ascent(_dU_){return user_attrib(_aU_, cst_ascent, _dU_);}
    var
     a_widths = caml_call1(string_attrib, cst_widths),
     a_bbox = caml_call1(string_attrib, cst_bbox),
     _aV_ = C[12];
    function a_ideographic(_dT_){
     return user_attrib(_aV_, cst_ideographic, _dT_);
    }
    var _aW_ = C[12];
    function a_alphabetic(_dS_){
     return user_attrib(_aW_, cst_alphabetic, _dS_);
    }
    var _aX_ = C[12];
    function a_mathematical(_dR_){
     return user_attrib(_aX_, cst_mathematical, _dR_);
    }
    var _aY_ = C[12];
    function a_hanging(_dQ_){return user_attrib(_aY_, cst_hanging, _dQ_);}
    var _aZ_ = C[12];
    function a_videographic(_dP_){
     return user_attrib(_aZ_, cst_v_ideographic, _dP_);
    }
    var _a0_ = C[12];
    function a_v_alphabetic(_dO_){
     return user_attrib(_a0_, cst_v_alphabetic, _dO_);
    }
    var _a1_ = C[12];
    function a_v_mathematical(_dN_){
     return user_attrib(_a1_, cst_v_mathematical, _dN_);
    }
    var _a2_ = C[12];
    function a_v_hanging(_dM_){return user_attrib(_a2_, cst_v_hanging, _dM_);}
    var _a3_ = C[12];
    function a_underline_position(_dL_){
     return user_attrib(_a3_, cst_underline_position, _dL_);
    }
    var _a4_ = C[12];
    function a_underline_thickness(_dK_){
     return user_attrib(_a4_, cst_underline_thickness, _dK_);
    }
    var _a5_ = C[12];
    function a_strikethrough_position(_dJ_){
     return user_attrib(_a5_, cst_strikethrough_position, _dJ_);
    }
    var _a6_ = C[12];
    function a_strikethrough_thickness(_dI_){
     return user_attrib(_a6_, cst_strikethrough_thickness, _dI_);
    }
    var _a7_ = C[12];
    function a_overline_position(_dH_){
     return user_attrib(_a7_, cst_overline_position, _dH_);
    }
    var _a8_ = C[12];
    function a_overline_thickness(_dG_){
     return user_attrib(_a8_, cst_overline_thickness, _dG_);
    }
    var
     a_string = caml_call1(string_attrib, cst_string),
     a_name = caml_call1(string_attrib, cst_name);
    function a_alignment_baseline(x){
     return user_attrib(C[2], cst_alignment_baseline, x);
    }
    function a_dominant_baseline(x){
     return user_attrib(C[6], cst_dominant_baseline, x);
    }
    var
     a_onabort = caml_call1(Xml[9], cst_onabort),
     a_onactivate = caml_call1(Xml[9], cst_onactivate),
     a_onbegin = caml_call1(Xml[9], cst_onbegin),
     a_onend = caml_call1(Xml[9], cst_onend),
     a_onerror = caml_call1(Xml[9], cst_onerror),
     a_onfocusin = caml_call1(Xml[9], cst_onfocusin),
     a_onfocusout = caml_call1(Xml[9], cst_onfocusout),
     a_onload = caml_call1(Xml[9], cst_onload),
     a_onrepeat = caml_call1(Xml[9], cst_onrepeat),
     a_onresize = caml_call1(Xml[9], cst_onresize),
     a_onscroll = caml_call1(Xml[9], cst_onscroll),
     a_onunload = caml_call1(Xml[9], cst_onunload),
     a_onzoom = caml_call1(Xml[9], cst_onzoom),
     a_onclick = caml_call1(Xml[10], cst_onclick),
     a_onmousedown = caml_call1(Xml[10], cst_onmousedown),
     a_onmouseup = caml_call1(Xml[10], cst_onmouseup),
     a_onmouseover = caml_call1(Xml[10], cst_onmouseover),
     a_onmouseout = caml_call1(Xml[10], cst_onmouseout),
     a_onmousemove = caml_call1(Xml[10], cst_onmousemove),
     a_ontouchstart = caml_call1(Xml[12], cst_ontouchstart),
     a_ontouchend = caml_call1(Xml[12], cst_ontouchend),
     a_ontouchmove = caml_call1(Xml[12], cst_ontouchmove),
     a_ontouchcancel = caml_call1(Xml[12], cst_ontouchcancel),
     a_stop_color = caml_call1(color_attrib, cst_stop_color),
     _a9_ = C[12];
    function a_stop_opacity(_dF_){
     return user_attrib(_a9_, cst_stop_opacity, _dF_);
    }
    var _a__ = C[18];
    function a_stroke(_dE_){return user_attrib(_a__, cst_stroke, _dE_);}
    var _a$_ = C[10];
    function a_stroke_width(_dD_){
     return user_attrib(_a$_, cst_stroke_width, _dD_);
    }
    function a_stroke_linecap(x){
     return user_attrib(C[4], cst_stroke_linecap, x);
    }
    function a_stroke_linejoin(x){
     return user_attrib(C[4], cst_stroke_linejoin, x);
    }
    var _ba_ = C[12];
    function a_stroke_miterlimit(_dC_){
     return user_attrib(_ba_, cst_stroke_miterlimit, _dC_);
    }
    function a_stroke_dasharray(x){
     return user_attrib(C[19], cst_stroke_dasharray, x);
    }
    var _bb_ = C[10];
    function a_stroke_dashoffset(_dB_){
     return user_attrib(_bb_, cst_stroke_dashoffset, _dB_);
    }
    var _bc_ = C[12];
    function a_stroke_opacity(_dA_){
     return user_attrib(_bc_, cst_stroke_opacity, _dA_);
    }
    function svg(opt, children){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     var
      _dz_ =
        [0,
         caml_call2
          (string_attrib,
           cst_xmlns_xlink,
           caml_call1(Xml[1][1], cst_http_www_w3_org_1999_xlink)),
         a],
      attribs =
        [0,
         caml_call2
          (string_attrib,
           cst_xmlns,
           caml_call1(Xml[1][1], cst_http_www_w3_org_2000_svg)),
         _dz_];
     return star(cst_svg$0, [0, attribs], children);
    }
    function g(_dx_, _dy_){return star(cst_g, _dx_, _dy_);}
    function defs(_dv_, _dw_){return star(cst_defs, _dv_, _dw_);}
    function desc(_dt_, _du_){return unary(cst_desc, _dt_, _du_);}
    function title(_dr_, _ds_){return unary(cst_title, _dr_, _ds_);}
    function symbol(_dp_, _dq_){return star(cst_symbol, _dp_, _dq_);}
    function use(_dn_, _do_){return star(cst_use, _dn_, _do_);}
    function image(_dl_, _dm_){return star(cst_image, _dl_, _dm_);}
    function switch$0(_dj_, _dk_){return star(cst_switch, _dj_, _dk_);}
    function style(_dh_, _di_){return unary(cst_style$0, _dh_, _di_);}
    function path(_df_, _dg_){return star(cst_path$0, _df_, _dg_);}
    function rect(_dd_, _de_){return star(cst_rect, _dd_, _de_);}
    function circle(_db_, _dc_){return star(cst_circle, _db_, _dc_);}
    function ellipse(_c$_, _da_){return star(cst_ellipse, _c$_, _da_);}
    function line(_c9_, _c__){return star(cst_line, _c9_, _c__);}
    function polyline(_c7_, _c8_){return star(cst_polyline, _c7_, _c8_);}
    function polygon(_c5_, _c6_){return star(cst_polygon, _c5_, _c6_);}
    function text(_c3_, _c4_){return star(cst_text, _c3_, _c4_);}
    function tspan(_c1_, _c2_){return star(cst_tspan, _c1_, _c2_);}
    function tref(_cZ_, _c0_){return star(cst_tref, _cZ_, _c0_);}
    function textPath(_cX_, _cY_){return star(cst_textPath, _cX_, _cY_);}
    function altGlyph(_cV_, _cW_){return unary(cst_altGlyph, _cV_, _cW_);}
    function altGlyphDef(_cT_, _cU_){
     return unary(cst_altGlyphDef, _cT_, _cU_);
    }
    function altGlyphItem(_cR_, _cS_){
     return star(cst_altGlyphItem, _cR_, _cS_);
    }
    function glyphRef(_cP_, _cQ_){return nullary(cst_glyphRef$0, _cP_, _cQ_);}
    function marker(_cN_, _cO_){return star(cst_marker, _cN_, _cO_);}
    function color_profile(_cL_, _cM_){
     return star(cst_color_profile, _cL_, _cM_);
    }
    function linearGradient(_cJ_, _cK_){
     return star(cst_linearGradient, _cJ_, _cK_);
    }
    function radialGradient(_cH_, _cI_){
     return star(cst_radialGradient, _cH_, _cI_);
    }
    function stop(_cF_, _cG_){return star(cst_stop, _cF_, _cG_);}
    function pattern(_cD_, _cE_){return star(cst_pattern, _cD_, _cE_);}
    function clipPath(_cB_, _cC_){return star(cst_clipPath, _cB_, _cC_);}
    function filter(_cz_, _cA_){return star(cst_filter, _cz_, _cA_);}
    function feDistantLight(_cx_, _cy_){
     return star(cst_feDistantLight, _cx_, _cy_);
    }
    function fePointLight(_cv_, _cw_){
     return star(cst_fePointLight, _cv_, _cw_);
    }
    function feSpotLight(_ct_, _cu_){
     return star(cst_feSpotLight, _ct_, _cu_);
    }
    function feBlend(_cr_, _cs_){return star(cst_feBlend, _cr_, _cs_);}
    function feColorMatrix(_cp_, _cq_){
     return star(cst_feColorMatrix, _cp_, _cq_);
    }
    function feComponentTransfer(_cn_, _co_){
     return star(cst_feComponentTransfer, _cn_, _co_);
    }
    function feFuncA(_cl_, _cm_){return star(cst_feFuncA, _cl_, _cm_);}
    function feFuncG(_cj_, _ck_){return star(cst_feFuncG, _cj_, _ck_);}
    function feFuncB(_ch_, _ci_){return star(cst_feFuncB, _ch_, _ci_);}
    function feFuncR(_cf_, _cg_){return star(cst_feFuncR, _cf_, _cg_);}
    function feComposite(_cd_, _ce_){
     return star(cst_feComposite, _cd_, _ce_);
    }
    function feConvolveMatrix(_cb_, _cc_){
     return star(cst_feConvolveMatrix, _cb_, _cc_);
    }
    function feDiffuseLighting(_b$_, _ca_){
     return star(cst_feDiffuseLighting, _b$_, _ca_);
    }
    function feDisplacementMap(_b9_, _b__){
     return star(cst_feDisplacementMap, _b9_, _b__);
    }
    function feFlood(_b7_, _b8_){return star(cst_feFlood, _b7_, _b8_);}
    function feGaussianBlur(_b5_, _b6_){
     return star(cst_feGaussianBlur, _b5_, _b6_);
    }
    function feImage(_b3_, _b4_){return star(cst_feImage, _b3_, _b4_);}
    function feMerge(_b1_, _b2_){return star(cst_feMerge, _b1_, _b2_);}
    function feMorphology(_bZ_, _b0_){
     return star(cst_feMorphology, _bZ_, _b0_);
    }
    function feOffset(_bX_, _bY_){return star(cst_feOffset, _bX_, _bY_);}
    function feSpecularLighting(_bV_, _bW_){
     return star(cst_feSpecularLighting, _bV_, _bW_);
    }
    function feTile(_bT_, _bU_){return star(cst_feTile, _bT_, _bU_);}
    function feTurbulence(_bR_, _bS_){
     return star(cst_feTurbulence, _bR_, _bS_);
    }
    function cursor(_bP_, _bQ_){return star(cst_cursor, _bP_, _bQ_);}
    function a(_bN_, _bO_){return star(cst_a, _bN_, _bO_);}
    function view(_bL_, _bM_){return star(cst_view, _bL_, _bM_);}
    function script(_bJ_, _bK_){return unary(cst_script, _bJ_, _bK_);}
    function animation(_bH_, _bI_){return star(cst_animate, _bH_, _bI_);}
    function set(_bF_, _bG_){return star(cst_set, _bF_, _bG_);}
    function animateMotion(_bD_, _bE_){
     return star(cst_animateMotion, _bD_, _bE_);
    }
    function mpath(_bB_, _bC_){return star(cst_mpath, _bB_, _bC_);}
    function animateColor(_bz_, _bA_){
     return star(cst_animateColor, _bz_, _bA_);
    }
    function animateTransform(_bx_, _by_){
     return star(cst_animateTransform, _bx_, _by_);
    }
    function font(_bv_, _bw_){return star(cst_font, _bv_, _bw_);}
    function glyph(_bt_, _bu_){return star(cst_glyph, _bt_, _bu_);}
    function missing_glyph(_br_, _bs_){
     return star(cst_missing_glyph, _br_, _bs_);
    }
    function hkern(_bp_, _bq_){return nullary(cst_hkern, _bp_, _bq_);}
    function vkern(_bn_, _bo_){return nullary(cst_vkern, _bn_, _bo_);}
    function font_face(_bl_, _bm_){return nullary(cst_font_face, _bl_, _bm_);}
    function font_face_src(_bj_, _bk_){
     return star(cst_font_face_src, _bj_, _bk_);
    }
    function font_face_uri(_bh_, _bi_){
     return star(cst_font_face_uri, _bh_, _bi_);
    }
    function font_face_format(_bf_, _bg_){
     return nullary(cst_font_face_uri$0, _bf_, _bg_);
    }
    function font_face_name(_bd_, _be_){
     return nullary(cst_font_face_name, _bd_, _be_);
    }
    function doc_toelt(x){return x;}
    var I = caml_call1(Xml_stream[2], Xml);
    function of_seq(s){return caml_call1(I[1], s);}
    function data(s){return caml_call1(Xml[18], s);}
    function leaf(tag, a, param){return caml_call2(Xml[20], a, tag);}
    function node(tag, a, elts){return caml_call3(Xml[21], a, tag, elts);}
    function coerce_elt(x){return x;}
    var
     float_attrib$0 = Xml[4],
     int_attrib = Xml[5],
     string_attrib$0 = Xml[6];
    function uri_attrib(a, s){return caml_call2(Xml[13], a, s);}
    var
     space_sep_attrib = Xml[7],
     comma_sep_attrib = Xml[8],
     Unsafe =
       [0,
        data,
        leaf,
        node,
        coerce_elt,
        float_attrib$0,
        int_attrib,
        string_attrib$0,
        uri_attrib,
        space_sep_attrib,
        comma_sep_attrib];
    return [0,
            Xml,
            Info,
            string_of_uri,
            uri_of_string,
            tot,
            totl,
            toelt,
            toeltl,
            to_attrib,
            ,
            ,
            ,
            to_xmlattribs,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            metadata,
            foreignObject,
            txt,
            txt,
            a_version,
            a_baseProfile,
            a_x,
            a_y,
            a_width,
            a_height,
            a_preserveAspectRatio,
            a_contentScriptType,
            a_contentStyleType,
            a_zoomAndPan,
            a_href,
            a_xlink_href,
            a_requiredFeatures,
            a_requiredExtensions,
            a_systemLanguage,
            a_externalRessourcesRequired,
            a_id,
            a_user_data,
            a_xml_base,
            a_xml_lang,
            a_xml_space,
            a_type,
            a_media,
            a_xlink_title,
            a_class,
            a_style,
            a_transform,
            a_viewBox,
            a_d,
            a_pathLength,
            a_rx,
            a_ry,
            a_cx,
            a_cy,
            a_r,
            a_x1,
            a_y1,
            a_x2,
            a_y2,
            a_points,
            a_x_list,
            a_y_list,
            a_dx,
            a_dy,
            a_dx_list,
            a_dy_list,
            a_lengthAdjust,
            a_textLength,
            a_text_anchor,
            a_text_decoration,
            a_text_rendering,
            a_rotate,
            a_startOffset,
            a_method,
            a_spacing,
            a_glyphRef,
            a_format,
            a_markerUnits,
            a_refX,
            a_refY,
            a_markerWidth,
            a_markerHeight,
            a_orient,
            a_local,
            a_rendering_intent,
            a_gradientUnits,
            a_gradientTransform,
            a_spreadMethod,
            a_fx,
            a_fy,
            a_offset,
            a_patternUnits,
            a_patternContentUnits,
            a_patternTransform,
            a_clipPathUnits,
            a_maskUnits,
            a_maskContentUnits,
            a_primitiveUnits,
            a_filterRes,
            a_result,
            a_in,
            a_in2,
            a_azimuth,
            a_elevation,
            a_pointsAtX,
            a_pointsAtY,
            a_pointsAtZ,
            a_specularExponent,
            a_specularConstant,
            a_limitingConeAngle,
            a_mode,
            a_feColorMatrix_type,
            a_values,
            a_transfer_type,
            a_tableValues,
            a_intercept,
            a_amplitude,
            a_exponent,
            a_transfer_offset,
            a_feComposite_operator,
            a_k1,
            a_k2,
            a_k3,
            a_k4,
            a_order,
            a_kernelMatrix,
            a_divisor,
            a_bias,
            a_kernelUnitLength,
            a_targetX,
            a_targetY,
            a_edgeMode,
            a_preserveAlpha,
            a_surfaceScale,
            a_diffuseConstant,
            a_scale,
            a_xChannelSelector,
            a_yChannelSelector,
            a_stdDeviation,
            a_feMorphology_operator,
            a_radius,
            a_baseFrenquency,
            a_numOctaves,
            a_seed,
            a_stitchTiles,
            a_feTurbulence_type,
            a_xlink_show,
            a_xlink_actuate,
            a_target,
            a_viewTarget,
            a_attributeName,
            a_attributeType,
            a_begin,
            a_dur,
            a_min,
            a_max,
            a_restart,
            a_repeatCount,
            a_repeatDur,
            a_fill,
            a_animation_fill,
            a_calcMode,
            a_animation_values,
            a_keyTimes,
            a_keySplines,
            a_from,
            a_to,
            a_by,
            a_additive,
            a_accumulate,
            a_keyPoints,
            a_path,
            a_animateTransform_type,
            a_horiz_origin_x,
            a_horiz_origin_y,
            a_horiz_adv_x,
            a_vert_origin_x,
            a_vert_origin_y,
            a_vert_adv_y,
            a_unicode,
            a_glyph_name,
            a_orientation,
            a_arabic_form,
            a_lang,
            a_u1,
            a_u2,
            a_g1,
            a_g2,
            a_k,
            a_font_family,
            a_font_style,
            a_font_variant,
            a_font_weight,
            a_font_stretch,
            a_font_size,
            a_unicode_range,
            a_units_per_em,
            a_stemv,
            a_stemh,
            a_slope,
            a_cap_height,
            a_x_height,
            a_accent_height,
            a_ascent,
            a_widths,
            a_bbox,
            a_ideographic,
            a_alphabetic,
            a_mathematical,
            a_hanging,
            a_videographic,
            a_v_alphabetic,
            a_v_mathematical,
            a_v_hanging,
            a_underline_position,
            a_underline_thickness,
            a_strikethrough_position,
            a_strikethrough_thickness,
            a_overline_position,
            a_overline_thickness,
            a_string,
            a_name,
            a_alignment_baseline,
            a_dominant_baseline,
            a_onabort,
            a_onactivate,
            a_onbegin,
            a_onend,
            a_onerror,
            a_onfocusin,
            a_onfocusout,
            a_onload,
            a_onrepeat,
            a_onresize,
            a_onscroll,
            a_onunload,
            a_onzoom,
            a_onclick,
            a_onmousedown,
            a_onmouseup,
            a_onmouseover,
            a_onmouseout,
            a_onmousemove,
            a_ontouchstart,
            a_ontouchend,
            a_ontouchmove,
            a_ontouchcancel,
            a_stop_color,
            a_stop_opacity,
            a_stroke,
            a_stroke_width,
            a_stroke_linecap,
            a_stroke_linejoin,
            a_stroke_miterlimit,
            a_stroke_dasharray,
            a_stroke_dashoffset,
            a_stroke_opacity,
            svg,
            g,
            defs,
            desc,
            title,
            symbol,
            use,
            image,
            switch$0,
            style,
            path,
            rect,
            circle,
            ellipse,
            line,
            polyline,
            polygon,
            text,
            tspan,
            tref,
            textPath,
            altGlyph,
            altGlyphDef,
            altGlyphItem,
            glyphRef,
            marker,
            color_profile,
            linearGradient,
            radialGradient,
            stop,
            pattern,
            clipPath,
            filter,
            feDistantLight,
            fePointLight,
            feSpotLight,
            feBlend,
            feColorMatrix,
            feComponentTransfer,
            feFuncA,
            feFuncG,
            feFuncB,
            feFuncR,
            feComposite,
            feConvolveMatrix,
            feDiffuseLighting,
            feDisplacementMap,
            feFlood,
            feGaussianBlur,
            feImage,
            feMerge,
            feMorphology,
            feOffset,
            feSpecularLighting,
            feTile,
            feTurbulence,
            cursor,
            a,
            view,
            script,
            animation,
            set,
            animateMotion,
            mpath,
            animateColor,
            animateTransform,
            font,
            glyph,
            missing_glyph,
            hkern,
            vkern,
            font_face,
            font_face_src,
            font_face_uri,
            font_face_format,
            font_face_name,
            doc_toelt,
            ,
            of_seq,
            Unsafe];
   }
   function Wrapped_functions(Xml){
    function string_of_alignment_baseline(param){
     return -72987685 <= param
             ? 354434192
               <= param
               ? 881373037
                 <= param
                 ? 1018879136 <= param ? cst_after_edge : cst_alphabetic$0
                 : 726666127 <= param ? cst_auto : cst_hanging$0
               : 15943541
                 === param
                 ? cst_middle
                 : 218255880 <= param ? cst_mathematical$0 : cst_inherit
             : -840627829
               <= param
               ? -415175851
                 <= param
                 ? -354838363 <= param ? cst_baseline : cst_central
                 : -693588957
                   <= param
                   ? cst_ideographic$0
                   : cst_text_before_edge
               : -863864035 <= param ? cst_before_edge : cst_text_after_edge;
    }
    function string_of_big_variant(param){
     return 3350435 <= param
             ? 476616093
               <= param
               ? 744337004
                 <= param
                 ? 914009117
                   <= param
                   ? 970483178
                     <= param
                     ? 1040349136
                       <= param
                       ? 1071251601 <= param ? cst_stitch : cst_onRequest
                       : 990972795 <= param ? cst_repeat : cst_wrap
                     : 958206052 <= param ? cst_remove : cst_reflect
                   : 870530776
                     <= param
                     ? 884917925
                       <= param
                       ? 889668530 <= param ? cst_noStitch : cst$4
                       : 881966452 <= param ? cst_over : cst_none$0
                     : 861714216 <= param ? cst_medial : cst_never
                 : 568588039
                   <= param
                   ? 716799946
                     <= param
                     ? 726666127
                       <= param
                       ? 737755699 <= param ? cst_butt : cst_auto$0
                       : 726615284 <= param ? cst_atop : cst_arithmetic
                     : 698610924 <= param ? cst_underline : cst_gamma
                   : 512807795
                     <= param
                     ? 518168424
                       <= param
                       ? 557106693 <= param ? cst_linear : cst_overline
                       : 517347077 <= param ? cst_onLoad : cst_turbulence
                     : 504440814 <= param ? cst_table : cst_geometricPrecision
               : 163178525
                 <= param
                 ? 316735838
                   <= param
                   ? 389604418
                     <= param
                     ? 463106021
                       <= param
                       ? 466749770 <= param ? cst_optimizeSpeed : cst_miter
                       : 418396260 <= param ? cst_initial : cst_start
                     : 384893183 <= param ? cst_whenNotActive : cst_identity
                   : 201080426
                     <= param
                     ? 289998318
                       <= param
                       ? 289998319 <= param ? cst_skewY : cst_skewX
                       : 226915517 <= param ? cst_square : cst_scale$0
                     : 172069535 <= param ? cst_exact : cst_perceptual
                 : 4393399
                   <= param
                   ? 9660462
                     <= param
                     ? 106228547
                       <= param
                       ? 118574553 <= param ? cst_discrete : cst_erode
                       : 15943541 <= param ? cst_middle$0 : cst_round
                     : 4401019 <= param ? cst_xor : cst_XML
                   : 3901504
                     <= param
                     ? 4000051
                       <= param
                       ? 4153707 <= param ? cst_sum : cst_pad
                       : 3954798 <= param ? cst_out : cst_new
                     : 3455931 <= param ? cst_end : cst_CSS
             : -453122489
               <= param
               ? -72987685
                 <= param
                 ? 66
                   <= param
                   ? 72
                     <= param
                     ? 86
                       <= param
                       ? 16389 <= param ? cst_in$1 : cst_v
                       : 82 <= param ? cst_r$0 : cst_h
                     : 71 <= param ? cst_g$0 : cst_b
                   : -68046964
                     <= param
                     ? -4932997
                       <= param
                       ? 65 <= param ? cst_a$0 : cst_rotate$0
                       : -22441528 <= param ? cst_disable : cst_screen
                     : -72678338
                       <= param
                       ? cst_absolute_colorimetric
                       : cst_inherit$0
                 : -262362527
                   <= param
                   ? -197222844
                     <= param
                     ? -115006565
                       <= param
                       ? -76840209 <= param ? cst_always : cst_spacingAndGlyphs
                       : -126259180 <= param ? cst_replace : cst_multiply
                     : -197983439 <= param ? cst_spline : cst_matrix
                   : -384499551
                     <= param
                     ? -318472885
                       <= param
                       ? -313337870 <= param ? cst_saturation : cst_dilate
                       : -346900690 <= param ? cst_translate : cst_default
                     : -415993185 <= param ? cst_lighten : cst_normal
               : -839430911
                 <= param
                 ? -672592881
                   <= param
                   ? -552838301
                     <= param
                     ? -505547199
                       <= param
                       ? -474415497 <= param ? cst_freeze : cst_magnify
                       : -543144685 <= param ? cst_hueRotate : cst_spacing$0
                     : -621842423 <= param ? cst_fractalNoise : cst_saturate
                   : -797470191
                     <= param
                     ? -699926424
                       <= param
                       ? -689066995
                         <= param
                         ? cst_userSpaceOnUse
                         : cst_objectBoundingBox
                       : -707876225 <= param ? cst_darken : cst_paced
                     : -824137927
                       <= param
                       ? cst_isolated
                       : cst_optimizeLegibility
                 : -951087346
                   <= param
                   ? -912466532
                     <= param
                     ? -851306022
                       <= param
                       ? -851300629
                         <= param
                         ? cst_luminanceToAlpha
                         : cst_line_through
                       : -912009552 <= param ? cst_other : cst_terminal
                     : -937074372 <= param ? cst_blink : cst_stroke_width$0
                   : -1044642615
                     === param
                     ? cst_relative_colorimetric
                     : -1014056864
                       <= param
                       ? -1012636187 <= param ? cst_stretch : cst_bevel
                       : -1024851605 <= param ? cst_duplicate : cst_preserve;
    }
    var string_of_bool = Stdlib[30];
    function _D_(param){
     var b = param[2], a = param[1];
     return caml_call3(Stdlib_Printf[4], _d_, a, b);
    }
    var _E_ = 0;
    function string_of_coords(_X_){return list(_E_, _D_, _X_);}
    function string_of_dominant_baseline(param){
     return -72987685 <= param
             ? 354434192
               <= param
               ? 881373037
                 <= param
                 ? 945233102 <= param ? cst_nochange : cst_alphabetic$1
                 : 726666127 <= param ? cst_auto$1 : cst_hanging$1
               : 15943541
                 === param
                 ? cst_middle$1
                 : 218255880 <= param ? cst_mathematical$1 : cst_inherit$1
             : -840627829
               <= param
               ? -504734109
                 <= param
                 ? -415175851 <= param ? cst_central$0 : cst_usescript
                 : -693588957
                   <= param
                   ? cst_ideographic$1
                   : cst_textbeforeedge
               : -880506735 <= param ? cst_resetsize : cst_textafteredge;
    }
    function string_of_in_value(param){
     if(typeof param === "number")
      return 198492909 <= param
              ? 885982307
                <= param
                ? 976982182 <= param ? cst_strokePaint : cst_sourceAlpha
                : 768130555 <= param ? cst_fillPaint : cst_sourceGraphic
              : -522189715
                <= param
                ? cst_backgroundImage
                : cst_backgroundAlpha;
     var svg = param[2];
     return svg;
    }
    var string_of_int = Stdlib[33], _F_ = 0;
    function string_of_lengths(_W_){return list(_F_, string_of_length, _W_);}
    var string_of_number = Xml_print[6];
    function string_of_percentage(x){
     var _V_ = caml_call1(string_of_number, x);
     return caml_call2(Stdlib[28], _V_, cst$5);
    }
    function string_of_fourfloats(param){
     var
      d = param[4],
      c = param[3],
      b = param[2],
      a = param[1],
      _R_ = caml_call1(string_of_number, d),
      _S_ = caml_call1(string_of_number, c),
      _T_ = caml_call1(string_of_number, b),
      _U_ = caml_call1(string_of_number, a);
     return caml_call5(Stdlib_Printf[4], _e_, _U_, _T_, _S_, _R_);
    }
    function string_of_number_optional_numb(param){
     var match = param[2], x = param[1];
     if(! match) return caml_call2(Stdlib_Printf[4], _g_, x);
     var y = match[1];
     return caml_call3(Stdlib_Printf[4], _f_, x, y);
    }
    var _G_ = 0;
    function string_of_numbers(_Q_){return list(_G_, string_of_number, _Q_);}
    function string_of_numbers_semicolon(_P_){return list(_h_, string_of_number, _P_);
    }
    function string_of_offset(param){
     if(-488794310 <= param[1]){
      var x = param[2];
      return string_of_percentage(x);
     }
     var x$0 = param[2];
     return caml_call1(string_of_number, x$0);
    }
    function string_of_orient(param){
     if(! param) return cst_auto$2;
     var svg = param[1];
     return string_of_angle(svg);
    }
    function string_of_strokedasharray(l){
     return l ? list(0, string_of_length, l) : cst_none$1;
    }
    function string_of_transform(param){
     var _I_ = param[1];
     if(-4932997 > _I_){
      if(-262362527 <= _I_){
       var
        match$1 = param[2],
        f = match$1[6],
        e = match$1[5],
        d = match$1[4],
        c = match$1[3],
        b = match$1[2],
        a = match$1[1];
       return caml_call7(Stdlib_Printf[4], _n_, a, b, c, d, e, f);
      }
      var x$2 = param[2], _O_ = string_of_number_optional_numb(x$2);
      return caml_call2(Stdlib_Printf[4], _o_, _O_);
     }
     if(289998318 <= _I_){
      if(289998319 <= _I_){
       var angle = param[2], _J_ = string_of_angle(angle);
       return caml_call2(Stdlib_Printf[4], _i_, _J_);
      }
      var angle$0 = param[2], _K_ = string_of_angle(angle$0);
      return caml_call2(Stdlib_Printf[4], _j_, _K_);
     }
     if(201080426 <= _I_){
      var x = param[2], _L_ = string_of_number_optional_numb(x);
      return caml_call2(Stdlib_Printf[4], _k_, _L_);
     }
     var match = param[2], x$0 = match[2], angle$1 = match[1];
     if(x$0)
      var
       match$0 = x$0[1],
       y = match$0[2],
       x$1 = match$0[1],
       _M_ = caml_call3(Stdlib_Printf[4], _l_, x$1, y);
     else
      var _M_ = cst$6;
     var _N_ = string_of_angle(angle$1);
     return caml_call3(Stdlib_Printf[4], _m_, _N_, _M_);
    }
    function string_of_transforms(l){
     var _H_ = caml_call2(Stdlib_List[19], string_of_transform, l);
     return caml_call2(Stdlib_String[6], cst$7, _H_);
    }
    return [0,
            Xml,
            string_of_alignment_baseline,
            string_of_big_variant,
            string_of_bool,
            string_of_coords,
            string_of_dominant_baseline,
            string_of_in_value,
            string_of_int,
            string_of_length,
            string_of_lengths,
            string_of_number,
            ,
            string_of_fourfloats,
            string_of_number_optional_numb,
            string_of_numbers,
            string_of_numbers_semicolon,
            string_of_offset,
            string_of_orient,
            string_of_paint,
            string_of_strokedasharray,
            string_of_transform,
            string_of_transforms];
   }
   function _p_(_z_, _y_){
    var
     _A_ = Make_with_wrapped_functions(_z_, _y_),
     _B_ = _A_[342],
     _C_ = _A_[2];
    return [0,
            _A_[1],
            [0, _C_[1], _C_[2], _C_[4], _C_[5], _C_[6], _C_[7], _C_[3]],
            _A_[3],
            _A_[4],
            _A_[26],
            _A_[27],
            _A_[28],
            _A_[29],
            _A_[30],
            _A_[31],
            _A_[32],
            _A_[33],
            _A_[34],
            _A_[35],
            _A_[36],
            _A_[37],
            _A_[38],
            _A_[39],
            _A_[40],
            _A_[41],
            _A_[42],
            _A_[43],
            _A_[44],
            _A_[45],
            _A_[46],
            _A_[47],
            _A_[48],
            _A_[49],
            _A_[50],
            _A_[51],
            _A_[52],
            _A_[53],
            _A_[54],
            _A_[55],
            _A_[56],
            _A_[57],
            _A_[58],
            _A_[59],
            _A_[60],
            _A_[61],
            _A_[62],
            _A_[63],
            _A_[64],
            _A_[65],
            _A_[66],
            _A_[67],
            _A_[68],
            _A_[69],
            _A_[70],
            _A_[71],
            _A_[72],
            _A_[73],
            _A_[74],
            _A_[75],
            _A_[76],
            _A_[77],
            _A_[78],
            _A_[79],
            _A_[80],
            _A_[81],
            _A_[82],
            _A_[83],
            _A_[84],
            _A_[85],
            _A_[86],
            _A_[87],
            _A_[88],
            _A_[89],
            _A_[90],
            _A_[91],
            _A_[92],
            _A_[93],
            _A_[94],
            _A_[95],
            _A_[96],
            _A_[97],
            _A_[98],
            _A_[99],
            _A_[100],
            _A_[101],
            _A_[102],
            _A_[103],
            _A_[104],
            _A_[105],
            _A_[106],
            _A_[107],
            _A_[108],
            _A_[109],
            _A_[110],
            _A_[111],
            _A_[112],
            _A_[113],
            _A_[114],
            _A_[115],
            _A_[116],
            _A_[117],
            _A_[118],
            _A_[119],
            _A_[120],
            _A_[121],
            _A_[122],
            _A_[123],
            _A_[124],
            _A_[125],
            _A_[126],
            _A_[127],
            _A_[128],
            _A_[129],
            _A_[130],
            _A_[131],
            _A_[132],
            _A_[133],
            _A_[134],
            _A_[135],
            _A_[136],
            _A_[137],
            _A_[138],
            _A_[139],
            _A_[140],
            _A_[141],
            _A_[142],
            _A_[143],
            _A_[144],
            _A_[145],
            _A_[146],
            _A_[147],
            _A_[148],
            _A_[149],
            _A_[150],
            _A_[151],
            _A_[152],
            _A_[153],
            _A_[154],
            _A_[155],
            _A_[156],
            _A_[157],
            _A_[158],
            _A_[159],
            _A_[160],
            _A_[161],
            _A_[162],
            _A_[163],
            _A_[164],
            _A_[165],
            _A_[166],
            _A_[167],
            _A_[168],
            _A_[169],
            _A_[170],
            _A_[171],
            _A_[172],
            _A_[173],
            _A_[174],
            _A_[175],
            _A_[176],
            _A_[177],
            _A_[178],
            _A_[179],
            _A_[180],
            _A_[181],
            _A_[182],
            _A_[183],
            _A_[184],
            _A_[185],
            _A_[186],
            _A_[187],
            _A_[188],
            _A_[189],
            _A_[190],
            _A_[191],
            _A_[192],
            _A_[193],
            _A_[194],
            _A_[195],
            _A_[196],
            _A_[197],
            _A_[198],
            _A_[199],
            _A_[200],
            _A_[201],
            _A_[202],
            _A_[203],
            _A_[204],
            _A_[205],
            _A_[206],
            _A_[207],
            _A_[208],
            _A_[209],
            _A_[210],
            _A_[211],
            _A_[212],
            _A_[213],
            _A_[214],
            _A_[215],
            _A_[216],
            _A_[217],
            _A_[218],
            _A_[219],
            _A_[220],
            _A_[221],
            _A_[222],
            _A_[223],
            _A_[224],
            _A_[225],
            _A_[226],
            _A_[227],
            _A_[228],
            _A_[229],
            _A_[253],
            _A_[254],
            _A_[255],
            _A_[256],
            _A_[257],
            _A_[258],
            _A_[259],
            _A_[260],
            _A_[261],
            _A_[262],
            _A_[230],
            _A_[231],
            _A_[232],
            _A_[233],
            _A_[234],
            _A_[235],
            _A_[236],
            _A_[237],
            _A_[238],
            _A_[239],
            _A_[240],
            _A_[241],
            _A_[242],
            _A_[243],
            _A_[244],
            _A_[245],
            _A_[246],
            _A_[247],
            _A_[248],
            _A_[249],
            _A_[250],
            _A_[251],
            _A_[252],
            _A_[24],
            _A_[263],
            _A_[264],
            _A_[265],
            _A_[266],
            _A_[267],
            _A_[268],
            _A_[269],
            _A_[270],
            _A_[271],
            _A_[272],
            _A_[273],
            _A_[274],
            _A_[275],
            _A_[276],
            _A_[277],
            _A_[278],
            _A_[279],
            _A_[280],
            _A_[281],
            _A_[282],
            _A_[283],
            _A_[284],
            _A_[285],
            _A_[286],
            _A_[287],
            _A_[288],
            _A_[289],
            _A_[290],
            _A_[291],
            _A_[292],
            _A_[293],
            _A_[294],
            _A_[295],
            _A_[296],
            _A_[297],
            _A_[298],
            _A_[299],
            _A_[300],
            _A_[301],
            _A_[302],
            _A_[303],
            _A_[304],
            _A_[305],
            _A_[306],
            _A_[307],
            _A_[308],
            _A_[309],
            _A_[310],
            _A_[311],
            _A_[312],
            _A_[313],
            _A_[314],
            _A_[315],
            _A_[316],
            _A_[317],
            _A_[318],
            _A_[319],
            _A_[320],
            _A_[321],
            _A_[322],
            _A_[323],
            _A_[324],
            _A_[325],
            _A_[326],
            _A_[327],
            _A_[328],
            _A_[329],
            _A_[330],
            _A_[331],
            _A_[332],
            _A_[333],
            _A_[334],
            _A_[335],
            _A_[336],
            _A_[337],
            _A_[338],
            _A_[22],
            _A_[23],
            _A_[25],
            _A_[341],
            _A_[5],
            _A_[6],
            _A_[7],
            _A_[8],
            _A_[339],
            _A_[13],
            _A_[9],
            [0,
             _B_[1],
             _B_[3],
             _B_[2],
             _B_[4],
             _B_[7],
             _B_[5],
             _B_[6],
             _B_[8],
             _B_[9],
             _B_[10]]];
   }
   function _q_(_w_){
    var _x_ = Wrapped_functions(_w_);
    return [0,
            _x_[1],
            _x_[2],
            _x_[4],
            _x_[3],
            _x_[5],
            _x_[6],
            _x_[13],
            _x_[7],
            _x_[8],
            _x_[9],
            _x_[10],
            _x_[11],
            _x_[14],
            _x_[15],
            _x_[16],
            _x_[17],
            _x_[18],
            _x_[19],
            _x_[20],
            _x_[21],
            _x_[22]];
   }
   var
    Svg_f =
      [0,
       function(_s_){
        var
         _r_ = Wrapped_functions(_s_),
         _v_ =
           Make_with_wrapped_functions
            (_s_,
             [0,
              _r_[1],
              _r_[2],
              _r_[4],
              _r_[3],
              _r_[5],
              _r_[6],
              _r_[13],
              _r_[7],
              _r_[8],
              _r_[9],
              _r_[10],
              _r_[11],
              _r_[14],
              _r_[15],
              _r_[16],
              _r_[17],
              _r_[18],
              _r_[19],
              _r_[20],
              _r_[21],
              _r_[22]]),
         _t_ = _v_[342],
         _u_ = _v_[2];
        return [0,
                _v_[1],
                [0, _u_[1], _u_[2], _u_[4], _u_[5], _u_[6], _u_[7], _u_[3]],
                _v_[3],
                _v_[4],
                _v_[26],
                _v_[27],
                _v_[28],
                _v_[29],
                _v_[30],
                _v_[31],
                _v_[32],
                _v_[33],
                _v_[34],
                _v_[35],
                _v_[36],
                _v_[37],
                _v_[38],
                _v_[39],
                _v_[40],
                _v_[41],
                _v_[42],
                _v_[43],
                _v_[44],
                _v_[45],
                _v_[46],
                _v_[47],
                _v_[48],
                _v_[49],
                _v_[50],
                _v_[51],
                _v_[52],
                _v_[53],
                _v_[54],
                _v_[55],
                _v_[56],
                _v_[57],
                _v_[58],
                _v_[59],
                _v_[60],
                _v_[61],
                _v_[62],
                _v_[63],
                _v_[64],
                _v_[65],
                _v_[66],
                _v_[67],
                _v_[68],
                _v_[69],
                _v_[70],
                _v_[71],
                _v_[72],
                _v_[73],
                _v_[74],
                _v_[75],
                _v_[76],
                _v_[77],
                _v_[78],
                _v_[79],
                _v_[80],
                _v_[81],
                _v_[82],
                _v_[83],
                _v_[84],
                _v_[85],
                _v_[86],
                _v_[87],
                _v_[88],
                _v_[89],
                _v_[90],
                _v_[91],
                _v_[92],
                _v_[93],
                _v_[94],
                _v_[95],
                _v_[96],
                _v_[97],
                _v_[98],
                _v_[99],
                _v_[100],
                _v_[101],
                _v_[102],
                _v_[103],
                _v_[104],
                _v_[105],
                _v_[106],
                _v_[107],
                _v_[108],
                _v_[109],
                _v_[110],
                _v_[111],
                _v_[112],
                _v_[113],
                _v_[114],
                _v_[115],
                _v_[116],
                _v_[117],
                _v_[118],
                _v_[119],
                _v_[120],
                _v_[121],
                _v_[122],
                _v_[123],
                _v_[124],
                _v_[125],
                _v_[126],
                _v_[127],
                _v_[128],
                _v_[129],
                _v_[130],
                _v_[131],
                _v_[132],
                _v_[133],
                _v_[134],
                _v_[135],
                _v_[136],
                _v_[137],
                _v_[138],
                _v_[139],
                _v_[140],
                _v_[141],
                _v_[142],
                _v_[143],
                _v_[144],
                _v_[145],
                _v_[146],
                _v_[147],
                _v_[148],
                _v_[149],
                _v_[150],
                _v_[151],
                _v_[152],
                _v_[153],
                _v_[154],
                _v_[155],
                _v_[156],
                _v_[157],
                _v_[158],
                _v_[159],
                _v_[160],
                _v_[161],
                _v_[162],
                _v_[163],
                _v_[164],
                _v_[165],
                _v_[166],
                _v_[167],
                _v_[168],
                _v_[169],
                _v_[170],
                _v_[171],
                _v_[172],
                _v_[173],
                _v_[174],
                _v_[175],
                _v_[176],
                _v_[177],
                _v_[178],
                _v_[179],
                _v_[180],
                _v_[181],
                _v_[182],
                _v_[183],
                _v_[184],
                _v_[185],
                _v_[186],
                _v_[187],
                _v_[188],
                _v_[189],
                _v_[190],
                _v_[191],
                _v_[192],
                _v_[193],
                _v_[194],
                _v_[195],
                _v_[196],
                _v_[197],
                _v_[198],
                _v_[199],
                _v_[200],
                _v_[201],
                _v_[202],
                _v_[203],
                _v_[204],
                _v_[205],
                _v_[206],
                _v_[207],
                _v_[208],
                _v_[209],
                _v_[210],
                _v_[211],
                _v_[212],
                _v_[213],
                _v_[214],
                _v_[215],
                _v_[216],
                _v_[217],
                _v_[218],
                _v_[219],
                _v_[220],
                _v_[221],
                _v_[222],
                _v_[223],
                _v_[224],
                _v_[225],
                _v_[226],
                _v_[227],
                _v_[228],
                _v_[229],
                _v_[253],
                _v_[254],
                _v_[255],
                _v_[256],
                _v_[257],
                _v_[258],
                _v_[259],
                _v_[260],
                _v_[261],
                _v_[262],
                _v_[230],
                _v_[231],
                _v_[232],
                _v_[233],
                _v_[234],
                _v_[235],
                _v_[236],
                _v_[237],
                _v_[238],
                _v_[239],
                _v_[240],
                _v_[241],
                _v_[242],
                _v_[243],
                _v_[244],
                _v_[245],
                _v_[246],
                _v_[247],
                _v_[248],
                _v_[249],
                _v_[250],
                _v_[251],
                _v_[252],
                _v_[24],
                _v_[263],
                _v_[264],
                _v_[265],
                _v_[266],
                _v_[267],
                _v_[268],
                _v_[269],
                _v_[270],
                _v_[271],
                _v_[272],
                _v_[273],
                _v_[274],
                _v_[275],
                _v_[276],
                _v_[277],
                _v_[278],
                _v_[279],
                _v_[280],
                _v_[281],
                _v_[282],
                _v_[283],
                _v_[284],
                _v_[285],
                _v_[286],
                _v_[287],
                _v_[288],
                _v_[289],
                _v_[290],
                _v_[291],
                _v_[292],
                _v_[293],
                _v_[294],
                _v_[295],
                _v_[296],
                _v_[297],
                _v_[298],
                _v_[299],
                _v_[300],
                _v_[301],
                _v_[302],
                _v_[303],
                _v_[304],
                _v_[305],
                _v_[306],
                _v_[307],
                _v_[308],
                _v_[309],
                _v_[310],
                _v_[311],
                _v_[312],
                _v_[313],
                _v_[314],
                _v_[315],
                _v_[316],
                _v_[317],
                _v_[318],
                _v_[319],
                _v_[320],
                _v_[321],
                _v_[322],
                _v_[323],
                _v_[324],
                _v_[325],
                _v_[326],
                _v_[327],
                _v_[328],
                _v_[329],
                _v_[330],
                _v_[331],
                _v_[332],
                _v_[333],
                _v_[334],
                _v_[335],
                _v_[336],
                _v_[337],
                _v_[338],
                _v_[22],
                _v_[23],
                _v_[25],
                _v_[341],
                _v_[5],
                _v_[6],
                _v_[7],
                _v_[8],
                _v_[339],
                _v_[13],
                _v_[9],
                [0,
                 _t_[1],
                 _t_[3],
                 _t_[2],
                 _t_[4],
                 _t_[7],
                 _t_[5],
                 _t_[6],
                 _t_[8],
                 _t_[9],
                 _t_[10]]];
       },
       _q_,
       _p_];
   runtime.caml_register_global(495, Svg_f, "Svg_f");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Html_f
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Printf, Stdlib__String, Xml_print, Xml_stream
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$9 = "",
    cst$8 = " ",
    cst$7 = ", ",
    cst_all$1 = "all",
    cst_alternate$1 = "alternate",
    cst_any$2 = "any",
    cst_archives$1 = "archives",
    cst_area$0 = "area",
    cst_async$1 = "async",
    cst_audio$1 = "audio",
    cst_author$1 = "author",
    cst_autofocus$1 = "autofocus",
    cst_autoplay$1 = "autoplay",
    cst_base$0 = "base",
    cst_bookmark$1 = "bookmark",
    cst_br$0 = "br",
    cst_button$1 = "button",
    cst_char$1 = "char",
    cst_checkbox$1 = "checkbox",
    cst_checked$1 = "checked",
    cst_cite$1 = "cite",
    cst_col$1 = "col",
    cst_colgroup$1 = "colgroup",
    cst_cols$1 = "cols",
    cst_command$1 = "command",
    cst_controls$1 = "controls",
    cst_datetime$1 = "datetime",
    cst_defer$1 = "defer",
    cst_disabled$1 = "disabled",
    cst_email$1 = "email",
    cst_embed$0 = "embed",
    cst_external$1 = "external",
    cst_first$1 = "first",
    cst_for$1 = "for",
    cst_form$1 = "form",
    cst_formnovalidate$1 = "formnovalidate",
    cst_help$1 = "help",
    cst_hidden$2 = "hidden",
    cst_hr$0 = "hr",
    cst_html$1 = "html",
    cst_http_www_w3_org_1999_xhtml$0 = "http://www.w3.org/1999/xhtml",
    cst_icon$2 = "icon",
    cst_img$0 = "img",
    cst_index$1 = "index",
    cst_input$0 = "input",
    cst_ismap$1 = "ismap",
    cst_keygen$0 = "keygen",
    cst_label$1 = "label",
    cst_last$1 = "last",
    cst_license$1 = "license",
    cst_link$0 = "link",
    cst_loop$1 = "loop",
    cst_max$1 = "max",
    cst_meta$0 = "meta",
    cst_min$1 = "min",
    cst_multiple$1 = "multiple",
    cst_muted$1 = "muted",
    cst_next$1 = "next",
    cst_nofollow$1 = "nofollow",
    cst_noreferrer$1 = "noreferrer",
    cst_novalidate$1 = "novalidate",
    cst_open$1 = "open",
    cst_param$0 = "param",
    cst_pingback$1 = "pingback",
    cst_prefetch$1 = "prefetch",
    cst_prev$1 = "prev",
    cst_pubdate$1 = "pubdate",
    cst_radio$1 = "radio",
    cst_readonly$2 = "readonly",
    cst_required$1 = "required",
    cst_reserved$1 = "reserved",
    cst_rows$1 = "rows",
    cst_scoped$1 = "scoped",
    cst_seamless$1 = "seamless",
    cst_search$2 = "search",
    cst_selected$1 = "selected",
    cst_sidebar$1 = "sidebar",
    cst_sizes$1 = "sizes",
    cst_source$0 = "source",
    cst_span$1 = "span",
    cst_style$1 = "style",
    cst_stylesheet$1 = "stylesheet",
    cst_summary$1 = "summary",
    cst_tag$1 = "tag",
    cst_tel$1 = "tel",
    cst_time$1 = "time",
    cst_title$1 = "title",
    cst_type$4 = "type",
    cst_up$1 = "up",
    cst_url$1 = "url",
    cst_value$3 = "value",
    cst_wbr$0 = "wbr",
    cst_xml_lang$1 = "xml:lang",
    caml_list_of_js_array = runtime.caml_list_of_js_array;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$6 = cst$7,
    cst$5 = cst$8,
    cst$4 = cst$7,
    cst$3 = ",",
    cst$2 = cst$8,
    cst$1 = cst$8,
    cst$0 = cst$9,
    cst = cst$9,
    content_type = "text/html",
    alternative_content_types =
      [0, "application/xhtml+xml", [0, "application/xml", [0, "text/xml", 0]]],
    version = "HTML5-draft",
    standard = "http://www.w3.org/TR/html5/",
    namespace = cst_http_www_w3_org_1999_xhtml$0,
    emptytags =
      caml_list_of_js_array
       ([cst_area$0,
         cst_base$0,
         cst_br$0,
         cst_col$1,
         cst_command$1,
         cst_embed$0,
         cst_hr$0,
         cst_img$0,
         cst_input$0,
         cst_keygen$0,
         cst_link$0,
         cst_meta$0,
         cst_param$0,
         cst_source$0,
         cst_wbr$0]),
    Xml_print = global_data.Xml_print,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Xml_stream = global_data.Xml_stream,
    _c_ = [0, [2, 0, [12, 32, [2, 0, [12, 120, 0]]]], "%s %sx"],
    _b_ = [0, [2, 0, [12, 32, [2, 0, [12, 119, 0]]]], "%s %sw"],
    _a_ = [0, [4, 0, 0, 0, [12, 120, [4, 0, 0, 0, 0]]], "%dx%d"],
    cst_any$1 = cst_any$2,
    cst_any$0 = cst_any$2,
    cst_on = "on",
    cst_off = "off",
    cst_week = "week",
    cst_time$0 = cst_time$1,
    cst_text = "text",
    cst_file = "file",
    cst_date = "date",
    cst_datetime_local = "datetime-local",
    cst_password = "password",
    cst_month = "month",
    cst_search$1 = cst_search$2,
    cst_button$0 = cst_button$1,
    cst_checkbox$0 = cst_checkbox$1,
    cst_email$0 = cst_email$1,
    cst_hidden$1 = cst_hidden$2,
    cst_url$0 = cst_url$1,
    cst_tel$0 = cst_tel$1,
    cst_reset = "reset",
    cst_range = "range",
    cst_radio$0 = cst_radio$1,
    cst_readonly$1 = cst_readonly$2,
    cst_color = "color",
    cst_number = "number",
    cst_image = "image",
    cst_submit = "submit",
    cst_datetime$0 = cst_datetime$1,
    cst_external$0 = cst_external$1,
    cst_0 = "0",
    cst_formnovalidate$0 = cst_formnovalidate$1,
    cst_audio$0 = cst_audio$1,
    cst_async$0 = cst_async$1,
    cst_toolbar = "toolbar",
    cst_soft = "soft",
    cst_rows$0 = cst_rows$1,
    cst_rect = "rect",
    cst_prev$0 = cst_prev$1,
    cst_POST = "POST",
    cst_poly = "poly",
    cst_open$0 = cst_open$1,
    cst_none = "none",
    cst_next$0 = cst_next$1,
    cst_loop$0 = cst_loop$1,
    cst_left = "left",
    cst_last$0 = cst_last$1,
    cst_kana = "kana",
    cst_icon$1 = cst_icon$2,
    cst_help$0 = cst_help$1,
    cst_hard = "hard",
    cst_cols$0 = cst_cols$1,
    cst_char$0 = cst_char$1,
    cst_auto = "auto",
    cst_noreferrer$0 = cst_noreferrer$1,
    cst_author$0 = cst_author$1,
    cst_muted$0 = cst_muted$1,
    cst_autoplay$0 = cst_autoplay$1,
    cst_anonymous = "anonymous",
    cst_metadata = "metadata",
    cst_license$0 = cst_license$1,
    cst_search$0 = cst_search$2,
    cst_first$0 = cst_first$1,
    cst_novalidate$0 = cst_novalidate$1,
    cst_controls$0 = cst_controls$1,
    cst_bookmark$0 = cst_bookmark$1,
    cst_required$0 = cst_required$1,
    cst_selected$0 = cst_selected$1,
    cst_circle = "circle",
    cst_rowgroup = "rowgroup",
    cst_checkbox = cst_checkbox$1,
    cst_katakana = "katakana",
    cst_email = cst_email$1,
    cst_latin = "latin",
    cst_hidden$0 = cst_hidden$2,
    cst_yes = "yes",
    cst_url = cst_url$1,
    cst_tel = cst_tel$1,
    cst_tag$0 = cst_tag$1,
    cst_rtl = "rtl",
    cst_row = "row",
    cst_1 = "1",
    cst_ltr = "ltr",
    cst_GET = "GET",
    cst_col$0 = cst_col$1,
    cst_any = cst_any$2,
    cst_all$0 = cst_all$1,
    cst_up$0 = cst_up$1,
    cst_no = "no",
    cst_right = "right",
    cst_scoped$0 = cst_scoped$1,
    cst_numeric = "numeric",
    cst_pingback$0 = cst_pingback$1,
    cst_radio = cst_radio$1,
    cst_pubdate$0 = cst_pubdate$1,
    cst_multiple$0 = cst_multiple$1,
    cst_latin_name = "latin-name",
    cst_autofocus$0 = cst_autofocus$1,
    cst_nofollow$0 = cst_nofollow$1,
    cst_defer$0 = cst_defer$1,
    cst_full_width_latin = "full-width-latin",
    cst_default = "default",
    cst_context = "context",
    cst_verbatim = "verbatim",
    cst_checked$0 = cst_checked$1,
    cst_stylesheet$0 = cst_stylesheet$1,
    cst_reserved$0 = cst_reserved$1,
    cst_alternate$0 = cst_alternate$1,
    cst_http_www_w3_org_1999_xhtml = cst_http_www_w3_org_1999_xhtml$0,
    cst_disabled$0 = cst_disabled$1,
    cst_ismap$0 = cst_ismap$1,
    cst_use_credentials = "use-credentials",
    cst_index$0 = cst_index$1,
    cst_justify = "justify",
    cst_groups = "groups",
    cst_command$0 = cst_command$1,
    cst_sidebar$0 = cst_sidebar$1,
    cst_latin_prose = "latin-prose",
    cst_readonly$0 = cst_readonly$2,
    cst_colgroup$0 = cst_colgroup$1,
    cst_archives$0 = cst_archives$1,
    cst_seamless$0 = cst_seamless$1,
    cst_preserve = "preserve",
    cst_prefetch$0 = cst_prefetch$1,
    cst_same_origin = "same-origin",
    cst_origin_when_cross_origin = "origin-when-cross-origin",
    cst_no_referrer_when_downgrade = "no-referrer-when-downgrade",
    cst_no_referrer = "no-referrer",
    cst_unsafe_url = "unsafe-url",
    cst_origin = "origin",
    cst_strict_origin = "strict-origin",
    cst_strict_origin_when_cross_o = "strict-origin-when-cross-origin",
    cst_projection = "projection",
    cst_aural = "aural",
    cst_handheld = "handheld",
    cst_embossed = "embossed",
    cst_tty = "tty",
    cst_all = cst_all$1,
    cst_tv = "tv",
    cst_screen = "screen",
    cst_speech = "speech",
    cst_print = "print",
    cst_braille = "braille",
    cst_external = cst_external$1,
    cst_canonical = "canonical",
    cst_prev = cst_prev$1,
    cst_next = cst_next$1,
    cst_last = cst_last$1,
    cst_icon$0 = cst_icon$2,
    cst_help = cst_help$1,
    cst_noreferrer = cst_noreferrer$1,
    cst_author = cst_author$1,
    cst_license = cst_license$1,
    cst_search = cst_search$2,
    cst_noopener = "noopener",
    cst_first = cst_first$1,
    cst_bookmark = cst_bookmark$1,
    cst_tag = cst_tag$1,
    cst_up = cst_up$1,
    cst_pingback = cst_pingback$1,
    cst_nofollow = cst_nofollow$1,
    cst_stylesheet = cst_stylesheet$1,
    cst_alternate = cst_alternate$1,
    cst_index = cst_index$1,
    cst_sidebar = cst_sidebar$1,
    cst_archives = cst_archives$1,
    cst_prefetch = cst_prefetch$1,
    cst_allow_same_origin = "allow-same-origin",
    cst_allow_popups = "allow-popups",
    cst_allow_forms = "allow-forms",
    cst_allow_pointer_lock = "allow-pointer-lock",
    cst_allow_script = "allow-script",
    cst_allow_top_navigation = "allow-top-navigation",
    cst_link = cst_link$0,
    cst_style$0 = cst_style$1,
    cst_img = cst_img$0,
    cst_object = "object",
    cst_table = "table",
    cst_figure = "figure",
    cst_optgroup = "optgroup",
    cst_fieldset = "fieldset",
    cst_details = "details",
    cst_datalist = "datalist",
    cst_menu = "menu",
    cst_command = cst_command$1,
    cst_area = cst_area$0,
    cst_coords = "coords",
    cst_shape = "shape",
    cst_bdo = "bdo",
    cst_nbsp = "nbsp",
    cst_html$0 = cst_html$1,
    cst_aria = "aria-",
    cst_scrolling = "scrolling",
    cst_frameborder = "frameborder",
    cst_char = cst_char$1,
    cst_rules = "rules",
    cst_scope = "scope",
    cst_align = "align",
    cst_type$3 = cst_type$4,
    cst_type$2 = cst_type$4,
    cst_type$1 = cst_type$4,
    cst_type$0 = cst_type$4,
    cst_wrap = "wrap",
    cst_step = "step",
    cst_sizes = cst_sizes$1,
    cst_spellcheck = "spellcheck",
    cst_sandbox = "sandbox",
    cst_preload = "preload",
    cst_inputmode = "inputmode",
    cst_draggable = "draggable",
    cst_dir = "dir",
    cst_contenteditable = "contenteditable",
    cst_crossorigin = "crossorigin",
    cst_autocomplete = "autocomplete",
    cst_referrerpolicy = "referrerpolicy",
    cst_method = "method",
    cst_width = "width",
    cst_height = "height",
    cst_download = "download",
    cst_accesskey = "accesskey",
    cst_xml_space = "xml:space",
    cst_xmlns = "xmlns",
    cst_data = "data-",
    cst_html = cst_html$1,
    cst_class = "class",
    cst_id = "id",
    cst_title = cst_title$1,
    cst_xml_lang = cst_xml_lang$1,
    cst_lang = "lang",
    cst_style = cst_style$1,
    cst_property = "property",
    cst_onabort = "onabort",
    cst_onafterprint = "onafterprint",
    cst_onbeforeprint = "onbeforeprint",
    cst_onbeforeunload = "onbeforeunload",
    cst_onblur = "onblur",
    cst_oncanplay = "oncanplay",
    cst_oncanplaythrough = "oncanplaythrough",
    cst_onchange = "onchange",
    cst_ondurationchange = "ondurationchange",
    cst_onemptied = "onemptied",
    cst_onended = "onended",
    cst_onerror = "onerror",
    cst_onfocus = "onfocus",
    cst_onformchange = "onformchange",
    cst_onforminput = "onforminput",
    cst_onhashchange = "onhashchange",
    cst_oninput = "oninput",
    cst_oninvalid = "oninvalid",
    cst_onoffline = "onoffline",
    cst_ononline = "ononline",
    cst_onpause = "onpause",
    cst_onplay = "onplay",
    cst_onplaying = "onplaying",
    cst_onpagehide = "onpagehide",
    cst_onpageshow = "onpageshow",
    cst_onpopstate = "onpopstate",
    cst_onprogress = "onprogress",
    cst_onratechange = "onratechange",
    cst_onreadystatechange = "onreadystatechange",
    cst_onredo = "onredo",
    cst_onresize = "onresize",
    cst_onscroll = "onscroll",
    cst_onseeked = "onseeked",
    cst_onseeking = "onseeking",
    cst_onselect = "onselect",
    cst_onshow = "onshow",
    cst_onstalled = "onstalled",
    cst_onstorage = "onstorage",
    cst_onsubmit = "onsubmit",
    cst_onsuspend = "onsuspend",
    cst_ontimeupdate = "ontimeupdate",
    cst_onundo = "onundo",
    cst_onunload = "onunload",
    cst_onvolumechange = "onvolumechange",
    cst_onwaiting = "onwaiting",
    cst_onload = "onload",
    cst_onloadeddata = "onloadeddata",
    cst_onloadedmetadata = "onloadedmetadata",
    cst_onloadstart = "onloadstart",
    cst_onmessage = "onmessage",
    cst_onmousewheel = "onmousewheel",
    cst_onclick = "onclick",
    cst_oncontextmenu = "oncontextmenu",
    cst_ondblclick = "ondblclick",
    cst_ondrag = "ondrag",
    cst_ondragend = "ondragend",
    cst_ondragenter = "ondragenter",
    cst_ondragleave = "ondragleave",
    cst_ondragover = "ondragover",
    cst_ondragstart = "ondragstart",
    cst_ondrop = "ondrop",
    cst_onmousedown = "onmousedown",
    cst_onmouseup = "onmouseup",
    cst_onmouseover = "onmouseover",
    cst_onmousemove = "onmousemove",
    cst_onmouseout = "onmouseout",
    cst_ontouchstart = "ontouchstart",
    cst_ontouchend = "ontouchend",
    cst_ontouchmove = "ontouchmove",
    cst_ontouchcancel = "ontouchcancel",
    cst_onkeypress = "onkeypress",
    cst_onkeydown = "onkeydown",
    cst_onkeyup = "onkeyup",
    cst_version = "version",
    cst_manifest = "manifest",
    cst_cite = cst_cite$1,
    cst_charset = "charset",
    cst_accept_charset = "accept-charset",
    cst_accept = "accept",
    cst_href = "href",
    cst_hreflang = "hreflang",
    cst_rel = "rel",
    cst_tabindex = "tabindex",
    cst_type = cst_type$4,
    cst_alt = "alt",
    cst_src = "src",
    cst_for = cst_for$1,
    cst_for$0 = cst_for$1,
    cst_selected = cst_selected$1,
    cst_value = cst_value$3,
    cst_value$0 = cst_value$3,
    cst_value$1 = cst_value$3,
    cst_value$2 = cst_value$3,
    cst_action = "action",
    cst_enctype = "enctype",
    cst_checked = cst_checked$1,
    cst_disabled = cst_disabled$1,
    cst_readonly = cst_readonly$2,
    cst_maxlength = "maxlength",
    cst_minlength = "minlength",
    cst_name = "name",
    cst_allowfullscreen = "allowfullscreen",
    cst_allowpaymentrequest = "allowpaymentrequest",
    cst_async = cst_async$1,
    cst_autofocus = cst_autofocus$1,
    cst_autoplay = cst_autoplay$1,
    cst_muted = cst_muted$1,
    cst_integrity = "integrity",
    cst_mediagroup = "mediagroup",
    cst_challenge = "challenge",
    cst_contextmenu = "contextmenu",
    cst_controls = cst_controls$1,
    cst_form = cst_form$1,
    cst_formaction = "formaction",
    cst_formenctype = "formenctype",
    cst_formnovalidate = cst_formnovalidate$1,
    cst_formtarget = "formtarget",
    cst_hidden = cst_hidden$2,
    cst_high = "high",
    cst_icon = cst_icon$2,
    cst_ismap = cst_ismap$1,
    cst_keytype = "keytype",
    cst_list = "list",
    cst_loop = cst_loop$1,
    cst_low = "low",
    cst_max = cst_max$1,
    cst_max$0 = cst_max$1,
    cst_min = cst_min$1,
    cst_min$0 = cst_min$1,
    cst_novalidate = cst_novalidate$1,
    cst_open = cst_open$1,
    cst_optimum = "optimum",
    cst_pattern = "pattern",
    cst_placeholder = "placeholder",
    cst_poster = "poster",
    cst_pubdate = cst_pubdate$1,
    cst_radiogroup = "radiogroup",
    cst_required = cst_required$1,
    cst_reserved = cst_reserved$1,
    cst_scoped = cst_scoped$1,
    cst_seamless = cst_seamless$1,
    cst_span = cst_span$1,
    cst_xml_lang$0 = cst_xml_lang$1,
    cst_srcset = "srcset",
    cst_sizes$0 = cst_sizes$1,
    cst_start = "start",
    cst_size = "size",
    cst_multiple = cst_multiple$1,
    cst_cols = cst_cols$1,
    cst_rows = cst_rows$1,
    cst_summary = cst_summary$1,
    cst_axis = "axis",
    cst_colspan = "colspan",
    cst_headers = "headers",
    cst_rowspan = "rowspan",
    cst_border = "border",
    cst_data$0 = "data",
    cst_codetype = "codetype",
    cst_marginheight = "marginheight",
    cst_marginwidth = "marginwidth",
    cst_target = "target",
    cst_content = "content",
    cst_http_equiv = "http-equiv",
    cst_media = "media",
    cst_role = "role",
    cst_body = "body",
    cst_head = "head",
    cst_title$0 = cst_title$1,
    cst_footer = "footer",
    cst_header = "header",
    cst_section = "section",
    cst_nav = "nav",
    cst_h1 = "h1",
    cst_h2 = "h2",
    cst_h3 = "h3",
    cst_h4 = "h4",
    cst_h5 = "h5",
    cst_h6 = "h6",
    cst_hgroup = "hgroup",
    cst_address = "address",
    cst_blockquote = "blockquote",
    cst_div = "div",
    cst_p = "p",
    cst_pre = "pre",
    cst_abbr = "abbr",
    cst_br = cst_br$0,
    cst_cite$0 = cst_cite$1,
    cst_code = "code",
    cst_dfn = "dfn",
    cst_em = "em",
    cst_kbd = "kbd",
    cst_q = "q",
    cst_samp = "samp",
    cst_span$0 = cst_span$1,
    cst_strong = "strong",
    cst_time = cst_time$1,
    cst_var = "var",
    cst_a = "a",
    cst_dl = "dl",
    cst_ol = "ol",
    cst_ul = "ul",
    cst_dd = "dd",
    cst_dt = "dt",
    cst_li = "li",
    cst_hr = cst_hr$0,
    cst_b = "b",
    cst_i = "i",
    cst_u = "u",
    cst_small = "small",
    cst_sub = "sub",
    cst_sup = "sup",
    cst_mark = "mark",
    cst_rp = "rp",
    cst_rt = "rt",
    cst_ruby = "ruby",
    cst_wbr = cst_wbr$0,
    cst_datetime = cst_datetime$1,
    cst_usemap = "usemap",
    cst_defer = cst_defer$1,
    cst_label = cst_label$1,
    cst_map = "map",
    cst_del = "del",
    cst_ins = "ins",
    cst_script = "script",
    cst_noscript = "noscript",
    cst_template = "template",
    cst_article = "article",
    cst_aside = "aside",
    cst_main = "main",
    cst_audio = cst_audio$1,
    cst_video = "video",
    cst_canvas = "canvas",
    cst_embed = cst_embed$0,
    cst_source = cst_source$0,
    cst_meter = "meter",
    cst_output = "output",
    cst_form$0 = cst_form$1,
    cst_input = cst_input$0,
    cst_keygen = cst_keygen$0,
    cst_label$0 = cst_label$1,
    cst_option = "option",
    cst_select = "select",
    cst_textarea = "textarea",
    cst_button = cst_button$1,
    cst_progress = "progress",
    cst_legend = "legend",
    cst_summary$0 = cst_summary$1,
    cst_figcaption = "figcaption",
    cst_caption = "caption",
    cst_td = "td",
    cst_th = "th",
    cst_tr = "tr",
    cst_colgroup = cst_colgroup$1,
    cst_col = cst_col$1,
    cst_thead = "thead",
    cst_tbody = "tbody",
    cst_tfoot = "tfoot",
    cst_iframe = "iframe",
    cst_param = cst_param$0,
    cst_meta = cst_meta$0,
    cst_base = cst_base$0;
   function Make_with_wrapped_functions(Xml, C, Svg){
    var
     doctype = caml_call2(Xml_print[5], cst_html, 0),
     Info =
       [0,
        content_type,
        alternative_content_types,
        version,
        standard,
        namespace,
        doctype,
        emptytags],
     string_of_uri = Xml[2],
     uri_of_string = Xml[3];
    function to_xmlattribs(x){return x;}
    function to_attrib(x){return x;}
    var float_attrib = Xml[4], int_attrib = Xml[5], string_attrib = Xml[6];
    function uri_attrib(a, s){return caml_call2(Xml[13], a, s);}
    var space_sep_attrib = Xml[7], comma_sep_attrib = Xml[8];
    function user_attrib(f, name, v){
     var _dE_ = caml_call2(Xml[1][2], f, v);
     return caml_call2(Xml[6], name, _dE_);
    }
    var _D_ = C[3];
    function bool_attrib(_dC_, _dD_){return user_attrib(_D_, _dC_, _dD_);}
    function constant_attrib(a, param){
     return caml_call2(string_attrib, a, caml_call1(Xml[1][1], a));
    }
    function linktypes_attrib(name, x){return user_attrib(C[8], name, x);}
    function mediadesc_attrib(name, x){return user_attrib(C[9], name, x);}
    function srcset_attrib(name, x){return user_attrib(C[14], name, x);}
    var
     a_class = caml_call1(space_sep_attrib, cst_class),
     a_id = caml_call1(string_attrib, cst_id);
    function a_user_data(name){
     return caml_call1(string_attrib, caml_call2(Stdlib[28], cst_data, name));
    }
    var
     a_title = caml_call1(string_attrib, cst_title),
     a_xml_lang = caml_call1(string_attrib, cst_xml_lang),
     a_lang = caml_call1(string_attrib, cst_lang),
     a_style = caml_call1(string_attrib, cst_style),
     a_property = caml_call1(string_attrib, cst_property),
     a_onabort = caml_call1(Xml[9], cst_onabort),
     a_onafterprint = caml_call1(Xml[9], cst_onafterprint),
     a_onbeforeprint = caml_call1(Xml[9], cst_onbeforeprint),
     a_onbeforeunload = caml_call1(Xml[9], cst_onbeforeunload),
     a_onblur = caml_call1(Xml[9], cst_onblur),
     a_oncanplay = caml_call1(Xml[9], cst_oncanplay),
     a_oncanplaythrough = caml_call1(Xml[9], cst_oncanplaythrough),
     a_onchange = caml_call1(Xml[9], cst_onchange),
     a_ondurationchange = caml_call1(Xml[9], cst_ondurationchange),
     a_onemptied = caml_call1(Xml[9], cst_onemptied),
     a_onended = caml_call1(Xml[9], cst_onended),
     a_onerror = caml_call1(Xml[9], cst_onerror),
     a_onfocus = caml_call1(Xml[9], cst_onfocus),
     a_onformchange = caml_call1(Xml[9], cst_onformchange),
     a_onforminput = caml_call1(Xml[9], cst_onforminput),
     a_onhashchange = caml_call1(Xml[9], cst_onhashchange),
     a_oninput = caml_call1(Xml[9], cst_oninput),
     a_oninvalid = caml_call1(Xml[9], cst_oninvalid),
     a_onoffline = caml_call1(Xml[9], cst_onoffline),
     a_ononline = caml_call1(Xml[9], cst_ononline),
     a_onpause = caml_call1(Xml[9], cst_onpause),
     a_onplay = caml_call1(Xml[9], cst_onplay),
     a_onplaying = caml_call1(Xml[9], cst_onplaying),
     a_onpagehide = caml_call1(Xml[9], cst_onpagehide),
     a_onpageshow = caml_call1(Xml[9], cst_onpageshow),
     a_onpopstate = caml_call1(Xml[9], cst_onpopstate),
     a_onprogress = caml_call1(Xml[9], cst_onprogress),
     a_onratechange = caml_call1(Xml[9], cst_onratechange),
     a_onreadystatechange = caml_call1(Xml[9], cst_onreadystatechange),
     a_onredo = caml_call1(Xml[9], cst_onredo),
     a_onresize = caml_call1(Xml[9], cst_onresize),
     a_onscroll = caml_call1(Xml[9], cst_onscroll),
     a_onseeked = caml_call1(Xml[9], cst_onseeked),
     a_onseeking = caml_call1(Xml[9], cst_onseeking),
     a_onselect = caml_call1(Xml[9], cst_onselect),
     a_onshow = caml_call1(Xml[9], cst_onshow),
     a_onstalled = caml_call1(Xml[9], cst_onstalled),
     a_onstorage = caml_call1(Xml[9], cst_onstorage),
     a_onsubmit = caml_call1(Xml[9], cst_onsubmit),
     a_onsuspend = caml_call1(Xml[9], cst_onsuspend),
     a_ontimeupdate = caml_call1(Xml[9], cst_ontimeupdate),
     a_onundo = caml_call1(Xml[9], cst_onundo),
     a_onunload = caml_call1(Xml[9], cst_onunload),
     a_onvolumechange = caml_call1(Xml[9], cst_onvolumechange),
     a_onwaiting = caml_call1(Xml[9], cst_onwaiting),
     a_onload = caml_call1(Xml[9], cst_onload),
     a_onloadeddata = caml_call1(Xml[9], cst_onloadeddata),
     a_onloadedmetadata = caml_call1(Xml[9], cst_onloadedmetadata),
     a_onloadstart = caml_call1(Xml[9], cst_onloadstart),
     a_onmessage = caml_call1(Xml[9], cst_onmessage),
     a_onmousewheel = caml_call1(Xml[9], cst_onmousewheel),
     a_onclick = caml_call1(Xml[10], cst_onclick),
     a_oncontextmenu = caml_call1(Xml[10], cst_oncontextmenu),
     a_ondblclick = caml_call1(Xml[10], cst_ondblclick),
     a_ondrag = caml_call1(Xml[10], cst_ondrag),
     a_ondragend = caml_call1(Xml[10], cst_ondragend),
     a_ondragenter = caml_call1(Xml[10], cst_ondragenter),
     a_ondragleave = caml_call1(Xml[10], cst_ondragleave),
     a_ondragover = caml_call1(Xml[10], cst_ondragover),
     a_ondragstart = caml_call1(Xml[10], cst_ondragstart),
     a_ondrop = caml_call1(Xml[10], cst_ondrop),
     a_onmousedown = caml_call1(Xml[10], cst_onmousedown),
     a_onmouseup = caml_call1(Xml[10], cst_onmouseup),
     a_onmouseover = caml_call1(Xml[10], cst_onmouseover),
     a_onmousemove = caml_call1(Xml[10], cst_onmousemove),
     a_onmouseout = caml_call1(Xml[10], cst_onmouseout),
     a_ontouchstart = caml_call1(Xml[12], cst_ontouchstart),
     a_ontouchend = caml_call1(Xml[12], cst_ontouchend),
     a_ontouchmove = caml_call1(Xml[12], cst_ontouchmove),
     a_ontouchcancel = caml_call1(Xml[12], cst_ontouchcancel),
     a_onkeypress = caml_call1(Xml[11], cst_onkeypress),
     a_onkeydown = caml_call1(Xml[11], cst_onkeydown),
     a_onkeyup = caml_call1(Xml[11], cst_onkeyup),
     a_version = caml_call1(string_attrib, cst_version);
    function a_xmlns(x){return user_attrib(C[2], cst_xmlns, x);}
    function a_manifest(_dB_){return uri_attrib(cst_manifest, _dB_);}
    function a_cite(_dA_){return uri_attrib(cst_cite, _dA_);}
    function a_xml_space(x){return user_attrib(C[2], cst_xml_space, x);}
    function a_accesskey(c){return user_attrib(C[5], cst_accesskey, c);}
    var
     a_charset = caml_call1(string_attrib, cst_charset),
     a_accept_charset = caml_call1(space_sep_attrib, cst_accept_charset),
     a_accept = caml_call1(comma_sep_attrib, cst_accept);
    function a_href(_dz_){return uri_attrib(cst_href, _dz_);}
    var a_hreflang = caml_call1(string_attrib, cst_hreflang);
    function a_download(file){return user_attrib(C[16], cst_download, file);}
    function a_rel(_dy_){return linktypes_attrib(cst_rel, _dy_);}
    var
     a_tabindex = caml_call1(int_attrib, cst_tabindex),
     a_mime_type = caml_call1(string_attrib, cst_type),
     a_alt = caml_call1(string_attrib, cst_alt);
    function a_height(p){return caml_call2(int_attrib, cst_height, p);}
    function a_src(_dx_){return uri_attrib(cst_src, _dx_);}
    function a_width(p){return caml_call2(int_attrib, cst_width, p);}
    var
     a_label_for = caml_call1(string_attrib, cst_for),
     a_output_for = caml_call1(space_sep_attrib, cst_for$0);
    function a_selected(_dw_){return constant_attrib(cst_selected, _dw_);}
    var
     a_text_value = caml_call1(string_attrib, cst_value),
     a_int_value = caml_call1(int_attrib, cst_value$0),
     a_value = caml_call1(string_attrib, cst_value$1),
     a_float_value = caml_call1(float_attrib, cst_value$2);
    function a_action(_dv_){return uri_attrib(cst_action, _dv_);}
    function a_method(x){return user_attrib(C[2], cst_method, x);}
    var a_enctype = caml_call1(string_attrib, cst_enctype);
    function a_checked(_du_){return constant_attrib(cst_checked, _du_);}
    function a_disabled(_dt_){return constant_attrib(cst_disabled, _dt_);}
    function a_readonly(_ds_){return constant_attrib(cst_readonly, _ds_);}
    var
     a_maxlength = caml_call1(int_attrib, cst_maxlength),
     a_minlength = caml_call1(int_attrib, cst_minlength),
     a_name = caml_call1(string_attrib, cst_name);
    function a_allowfullscreen(_dr_){
     return constant_attrib(cst_allowfullscreen, _dr_);
    }
    function a_allowpaymentrequest(_dq_){
     return constant_attrib(cst_allowpaymentrequest, _dq_);
    }
    function a_referrerpolicy(x){
     return user_attrib(C[10], cst_referrerpolicy, x);
    }
    function a_autocomplete(x){return user_attrib(C[4], cst_autocomplete, x);}
    function a_async(_dp_){return constant_attrib(cst_async, _dp_);}
    function a_autofocus(_do_){return constant_attrib(cst_autofocus, _do_);}
    function a_autoplay(_dn_){return constant_attrib(cst_autoplay, _dn_);}
    function a_muted(_dm_){return constant_attrib(cst_muted, _dm_);}
    function a_crossorigin(x){return user_attrib(C[2], cst_crossorigin, x);}
    var
     a_integrity = caml_call1(string_attrib, cst_integrity),
     a_mediagroup = caml_call1(string_attrib, cst_mediagroup),
     a_challenge = caml_call1(string_attrib, cst_challenge);
    function a_contenteditable(ce){
     return bool_attrib(cst_contenteditable, ce);
    }
    var a_contextmenu = caml_call1(string_attrib, cst_contextmenu);
    function a_controls(_dl_){return constant_attrib(cst_controls, _dl_);}
    function a_dir(x){return user_attrib(C[2], cst_dir, x);}
    function a_draggable(d){return bool_attrib(cst_draggable, d);}
    var a_form = caml_call1(string_attrib, cst_form);
    function a_formaction(_dk_){return uri_attrib(cst_formaction, _dk_);}
    var a_formenctype = caml_call1(string_attrib, cst_formenctype);
    function a_formnovalidate(_dj_){
     return constant_attrib(cst_formnovalidate, _dj_);
    }
    var a_formtarget = caml_call1(string_attrib, cst_formtarget);
    function a_hidden(_di_){return constant_attrib(cst_hidden, _di_);}
    var a_high = caml_call1(float_attrib, cst_high);
    function a_icon(_dh_){return uri_attrib(cst_icon, _dh_);}
    function a_ismap(_dg_){return constant_attrib(cst_ismap, _dg_);}
    var
     a_keytype = caml_call1(string_attrib, cst_keytype),
     a_list = caml_call1(string_attrib, cst_list);
    function a_loop(_df_){return constant_attrib(cst_loop, _df_);}
    var
     a_low = caml_call1(float_attrib, cst_low),
     a_max = caml_call1(float_attrib, cst_max),
     _E_ = C[7];
    function a_input_max(_de_){return user_attrib(_E_, cst_max$0, _de_);}
    var a_min = caml_call1(float_attrib, cst_min), _F_ = C[7];
    function a_input_min(_dd_){return user_attrib(_F_, cst_min$0, _dd_);}
    function a_inputmode(x){return user_attrib(C[2], cst_inputmode, x);}
    function a_novalidate(_dc_){return constant_attrib(cst_novalidate, _dc_);}
    function a_open(_db_){return constant_attrib(cst_open, _db_);}
    var
     a_optimum = caml_call1(float_attrib, cst_optimum),
     a_pattern = caml_call1(string_attrib, cst_pattern),
     a_placeholder = caml_call1(string_attrib, cst_placeholder);
    function a_poster(_da_){return uri_attrib(cst_poster, _da_);}
    function a_preload(x){return user_attrib(C[2], cst_preload, x);}
    function a_pubdate(_c$_){return constant_attrib(cst_pubdate, _c$_);}
    var a_radiogroup = caml_call1(string_attrib, cst_radiogroup);
    function a_required(_c__){return constant_attrib(cst_required, _c__);}
    function a_reversed(_c9_){return constant_attrib(cst_reserved, _c9_);}
    function a_sandbox(x){return user_attrib(C[12], cst_sandbox, x);}
    function a_spellcheck(sc){return bool_attrib(cst_spellcheck, sc);}
    function a_scoped(_c8_){return constant_attrib(cst_scoped, _c8_);}
    function a_seamless(_c7_){return constant_attrib(cst_seamless, _c7_);}
    function a_sizes(sizes){return user_attrib(C[13], cst_sizes, sizes);}
    var
     a_span = caml_call1(int_attrib, cst_span),
     a_srclang = caml_call1(string_attrib, cst_xml_lang$0);
    function a_srcset(_c6_){return srcset_attrib(cst_srcset, _c6_);}
    var
     a_img_sizes = caml_call1(comma_sep_attrib, cst_sizes$0),
     a_start = caml_call1(int_attrib, cst_start);
    function a_step(step){return user_attrib(C[15], cst_step, step);}
    function a_wrap(x){return user_attrib(C[2], cst_wrap, x);}
    var a_size = caml_call1(int_attrib, cst_size);
    function a_input_type(it){return user_attrib(C[6], cst_type$0, it);}
    function a_menu_type(x){return user_attrib(C[2], cst_type$1, x);}
    function a_command_type(x){return user_attrib(C[2], cst_type$2, x);}
    function a_button_type(bt){return user_attrib(C[6], cst_type$3, bt);}
    function a_multiple(_c5_){return constant_attrib(cst_multiple, _c5_);}
    var
     a_cols = caml_call1(int_attrib, cst_cols),
     a_rows = caml_call1(int_attrib, cst_rows),
     a_summary = caml_call1(string_attrib, cst_summary);
    function a_align(x){return user_attrib(C[2], cst_align, x);}
    var
     a_axis = caml_call1(string_attrib, cst_axis),
     a_colspan = caml_call1(int_attrib, cst_colspan),
     a_headers = caml_call1(space_sep_attrib, cst_headers),
     a_rowspan = caml_call1(int_attrib, cst_rowspan);
    function a_scope(x){return user_attrib(C[2], cst_scope, x);}
    var a_border = caml_call1(int_attrib, cst_border);
    function a_rules(x){return user_attrib(C[2], cst_rules, x);}
    function a_char(c){return user_attrib(C[5], cst_char, c);}
    function a_data(_c4_){return uri_attrib(cst_data$0, _c4_);}
    var a_codetype = caml_call1(string_attrib, cst_codetype);
    function a_frameborder(x){return user_attrib(C[2], cst_frameborder, x);}
    var
     a_marginheight = caml_call1(int_attrib, cst_marginheight),
     a_marginwidth = caml_call1(int_attrib, cst_marginwidth);
    function a_scrolling(x){return user_attrib(C[2], cst_scrolling, x);}
    var
     a_target = caml_call1(string_attrib, cst_target),
     a_content = caml_call1(string_attrib, cst_content),
     a_http_equiv = caml_call1(string_attrib, cst_http_equiv);
    function a_media(_c3_){return mediadesc_attrib(cst_media, _c3_);}
    var a_role = caml_call1(space_sep_attrib, cst_role);
    function a_aria(name){
     return caml_call1
             (space_sep_attrib, caml_call2(Stdlib[28], cst_aria, name));
    }
    function terminal(tag, a, param){return caml_call2(Xml[20], a, tag);}
    function unary(tag, a, elt){
     var _c2_ = caml_call1(Xml[1][4], elt);
     return caml_call3(Xml[21], a, tag, _c2_);
    }
    function star(tag, a, elts){return caml_call3(Xml[21], a, tag, elts);}
    function plus(tag, a, elt, elts){
     var _c1_ = caml_call2(Xml[1][5], elt, elts);
     return caml_call3(Xml[21], a, tag, _c1_);
    }
    function option_cons(opt, elts){
     if(! opt) return elts;
     var x = opt[1];
     return caml_call2(Xml[1][5], x, elts);
    }
    function body(_cZ_, _c0_){return star(cst_body, _cZ_, _c0_);}
    function head(_cW_, _cX_, _cY_){return plus(cst_head, _cW_, _cX_, _cY_);}
    function title(_cU_, _cV_){return unary(cst_title$0, _cU_, _cV_);}
    function html(a, head, body){
     var
      _cT_ = caml_call1(Xml[1][4], body),
      content = caml_call2(Xml[1][5], head, _cT_);
     return caml_call3(Xml[21], a, cst_html$0, content);
    }
    function footer(_cR_, _cS_){return star(cst_footer, _cR_, _cS_);}
    function header(_cP_, _cQ_){return star(cst_header, _cP_, _cQ_);}
    function section(_cN_, _cO_){return star(cst_section, _cN_, _cO_);}
    function nav(_cL_, _cM_){return star(cst_nav, _cL_, _cM_);}
    function txt(s){return caml_call1(Xml[17], s);}
    var entity = Xml[19];
    function space(param){return caml_call1(entity, cst_nbsp);}
    var cdata = Xml[22], cdata_script = Xml[23], cdata_style = Xml[24];
    function h1(_cJ_, _cK_){return star(cst_h1, _cJ_, _cK_);}
    function h2(_cH_, _cI_){return star(cst_h2, _cH_, _cI_);}
    function h3(_cF_, _cG_){return star(cst_h3, _cF_, _cG_);}
    function h4(_cD_, _cE_){return star(cst_h4, _cD_, _cE_);}
    function h5(_cB_, _cC_){return star(cst_h5, _cB_, _cC_);}
    function h6(_cz_, _cA_){return star(cst_h6, _cz_, _cA_);}
    function hgroup(_cx_, _cy_){return star(cst_hgroup, _cx_, _cy_);}
    function address(_cv_, _cw_){return star(cst_address, _cv_, _cw_);}
    function blockquote(_ct_, _cu_){return star(cst_blockquote, _ct_, _cu_);}
    function div(_cr_, _cs_){return star(cst_div, _cr_, _cs_);}
    function p(_cp_, _cq_){return star(cst_p, _cp_, _cq_);}
    function pre(_cn_, _co_){return star(cst_pre, _cn_, _co_);}
    function abbr(_cl_, _cm_){return star(cst_abbr, _cl_, _cm_);}
    function br(_cj_, _ck_){return terminal(cst_br, _cj_, _ck_);}
    function cite(_ch_, _ci_){return star(cst_cite$0, _ch_, _ci_);}
    function code(_cf_, _cg_){return star(cst_code, _cf_, _cg_);}
    function dfn(_cd_, _ce_){return star(cst_dfn, _cd_, _ce_);}
    function em(_cb_, _cc_){return star(cst_em, _cb_, _cc_);}
    function kbd(_b$_, _ca_){return star(cst_kbd, _b$_, _ca_);}
    function q(_b9_, _b__){return star(cst_q, _b9_, _b__);}
    function samp(_b7_, _b8_){return star(cst_samp, _b7_, _b8_);}
    function span(_b5_, _b6_){return star(cst_span$0, _b5_, _b6_);}
    function strong(_b3_, _b4_){return star(cst_strong, _b3_, _b4_);}
    function time(_b1_, _b2_){return star(cst_time, _b1_, _b2_);}
    function var$0(_bZ_, _b0_){return star(cst_var, _bZ_, _b0_);}
    function a(_bX_, _bY_){return star(cst_a, _bX_, _bY_);}
    function dl(_bV_, _bW_){return star(cst_dl, _bV_, _bW_);}
    function ol(_bT_, _bU_){return star(cst_ol, _bT_, _bU_);}
    function ul(_bR_, _bS_){return star(cst_ul, _bR_, _bS_);}
    function dd(_bP_, _bQ_){return star(cst_dd, _bP_, _bQ_);}
    function dt(_bN_, _bO_){return star(cst_dt, _bN_, _bO_);}
    function li(_bL_, _bM_){return star(cst_li, _bL_, _bM_);}
    function hr(_bJ_, _bK_){return terminal(cst_hr, _bJ_, _bK_);}
    function b(_bH_, _bI_){return star(cst_b, _bH_, _bI_);}
    function i(_bF_, _bG_){return star(cst_i, _bF_, _bG_);}
    function u(_bD_, _bE_){return star(cst_u, _bD_, _bE_);}
    function small(_bB_, _bC_){return star(cst_small, _bB_, _bC_);}
    function sub(_bz_, _bA_){return star(cst_sub, _bz_, _bA_);}
    function sup(_bx_, _by_){return star(cst_sup, _bx_, _by_);}
    function mark(_bv_, _bw_){return star(cst_mark, _bv_, _bw_);}
    function rp(_bt_, _bu_){return star(cst_rp, _bt_, _bu_);}
    function rt(_br_, _bs_){return star(cst_rt, _br_, _bs_);}
    function ruby(_bp_, _bq_){return star(cst_ruby, _bp_, _bq_);}
    function wbr(_bn_, _bo_){return terminal(cst_wbr, _bn_, _bo_);}
    function bdo(dir, opt, elts){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     var _bm_ = [0, [0, a_dir(dir), a]];
     return caml_call3(Xml[21], _bm_, cst_bdo, elts);
    }
    var a_datetime = caml_call1(string_attrib, cst_datetime);
    function a_shape(x){return user_attrib(C[2], cst_shape, x);}
    function a_coords(coords){return user_attrib(C[11], cst_coords, coords);}
    var a_usemap = caml_call1(string_attrib, cst_usemap);
    function a_defer(_bl_){return constant_attrib(cst_defer, _bl_);}
    var a_label = caml_call1(string_attrib, cst_label);
    function area(alt, opt, param){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     var _bk_ = [0, [0, caml_call1(a_alt, alt), a]];
     return caml_call2(Xml[20], _bk_, cst_area);
    }
    function map(_bi_, _bj_){return star(cst_map, _bi_, _bj_);}
    function del(_bg_, _bh_){return star(cst_del, _bg_, _bh_);}
    function ins(_be_, _bf_){return star(cst_ins, _be_, _bf_);}
    function script(_bc_, _bd_){return unary(cst_script, _bc_, _bd_);}
    function noscript(_ba_, _bb_){return star(cst_noscript, _ba_, _bb_);}
    function template(_a__, _a$_){return star(cst_template, _a__, _a$_);}
    function article(_a8_, _a9_){return star(cst_article, _a8_, _a9_);}
    function aside(_a6_, _a7_){return star(cst_aside, _a6_, _a7_);}
    function main(_a4_, _a5_){return star(cst_main, _a4_, _a5_);}
    function video_audio(name, src, srcs, opt, elts){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     if(src) var uri = src[1], a$0 = [0, a_src(uri), a]; else var a$0 = a;
     if(! srcs) return caml_call3(Xml[21], [0, a$0], name, elts);
     var srcs$0 = srcs[1], _a3_ = caml_call2(Xml[1][6], srcs$0, elts);
     return caml_call3(Xml[21], [0, a$0], name, _a3_);
    }
    function audio(_aZ_, _a0_, _a1_, _a2_){
     return video_audio(cst_audio, _aZ_, _a0_, _a1_, _a2_);
    }
    function video(_aV_, _aW_, _aX_, _aY_){
     return video_audio(cst_video, _aV_, _aW_, _aX_, _aY_);
    }
    function canvas(_aT_, _aU_){return star(cst_canvas, _aT_, _aU_);}
    function command(label, opt, param){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     var _aS_ = [0, [0, caml_call1(a_label, label), a]];
     return caml_call2(Xml[20], _aS_, cst_command);
    }
    function menu(children, a, param){
     if(children)
      var l = children[1][2], children$0 = l;
     else
      var children$0 = caml_call1(Xml[1][3], 0);
     return caml_call3(Xml[21], a, cst_menu, children$0);
    }
    function embed(_aQ_, _aR_){return terminal(cst_embed, _aQ_, _aR_);}
    function source(_aO_, _aP_){return terminal(cst_source, _aO_, _aP_);}
    function meter(_aM_, _aN_){return star(cst_meter, _aM_, _aN_);}
    function output_elt(_aK_, _aL_){return star(cst_output, _aK_, _aL_);}
    function form(_aI_, _aJ_){return star(cst_form$0, _aI_, _aJ_);}
    function svg(opt, children){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     var _aH_ = caml_call2(Svg[242], [0, a], children);
     return caml_call1(Svg[324], _aH_);
    }
    function input(_aF_, _aG_){return terminal(cst_input, _aF_, _aG_);}
    function keygen(_aD_, _aE_){return terminal(cst_keygen, _aD_, _aE_);}
    function label(_aB_, _aC_){return star(cst_label$0, _aB_, _aC_);}
    function option(_az_, _aA_){return unary(cst_option, _az_, _aA_);}
    function select(_ax_, _ay_){return star(cst_select, _ax_, _ay_);}
    function textarea(_av_, _aw_){return unary(cst_textarea, _av_, _aw_);}
    function button(_at_, _au_){return star(cst_button, _at_, _au_);}
    function datalist(children, a, param){
     if(children)
      var x = children[1][2], children$0 = x;
     else
      var children$0 = caml_call1(Xml[1][3], 0);
     return caml_call3(Xml[21], a, cst_datalist, children$0);
    }
    function progress(_ar_, _as_){return star(cst_progress, _ar_, _as_);}
    function legend(_ap_, _aq_){return star(cst_legend, _ap_, _aq_);}
    function details(summary, a, children){
     return plus(cst_details, a, summary, children);
    }
    function summary(_an_, _ao_){return star(cst_summary$0, _an_, _ao_);}
    function fieldset(legend, a, elts){
     var _am_ = option_cons(legend, elts);
     return caml_call3(Xml[21], a, cst_fieldset, _am_);
    }
    function optgroup(label, opt, elts){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     var _al_ = [0, [0, caml_call1(a_label, label), a]];
     return caml_call3(Xml[21], _al_, cst_optgroup, elts);
    }
    function figcaption(_aj_, _ak_){return star(cst_figcaption, _aj_, _ak_);}
    function figure(figcaption, a, elts){
     if(figcaption){
      var match = figcaption[1];
      if(437082891 <= match[1])
       var
        c = match[2],
        _ah_ = caml_call1(Xml[1][4], c),
        _ai_ = caml_call2(Xml[1][6], elts, _ah_);
      else
       var c$0 = match[2], _ai_ = caml_call2(Xml[1][5], c$0, elts);
      var content = _ai_;
     }
     else
      var content = elts;
     return caml_call3(Xml[21], a, cst_figure, content);
    }
    function caption(_af_, _ag_){return star(cst_caption, _af_, _ag_);}
    function tablex(caption, columns, thead, tfoot, a, elts){
     var content = option_cons(thead, option_cons(tfoot, elts));
     if(columns)
      var
       columns$0 = columns[1],
       content$0 = caml_call2(Xml[1][6], columns$0, content);
     else
      var content$0 = content;
     var content$1 = option_cons(caption, content$0);
     return caml_call3(Xml[21], a, cst_table, content$1);
    }
    function td(_ad_, _ae_){return star(cst_td, _ad_, _ae_);}
    function th(_ab_, _ac_){return star(cst_th, _ab_, _ac_);}
    function tr(_$_, _aa_){return star(cst_tr, _$_, _aa_);}
    function colgroup(_Z_, ___){return star(cst_colgroup, _Z_, ___);}
    function col(_X_, _Y_){return terminal(cst_col, _X_, _Y_);}
    function thead(_V_, _W_){return star(cst_thead, _V_, _W_);}
    function tbody(_T_, _U_){return star(cst_tbody, _T_, _U_);}
    function tfoot(_R_, _S_){return star(cst_tfoot, _R_, _S_);}
    function iframe(_P_, _Q_){return star(cst_iframe, _P_, _Q_);}
    function object(params, opt, elts){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     if(params)
      var e = params[1], elts$0 = caml_call2(Xml[1][6], e, elts);
     else
      var elts$0 = elts;
     return caml_call3(Xml[21], [0, a], cst_object, elts$0);
    }
    function param(_N_, _O_){return terminal(cst_param, _N_, _O_);}
    function img(src, alt, opt, param){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     var _M_ = [0, caml_call1(a_alt, alt), a], a$0 = [0, a_src(src), _M_];
     return caml_call2(Xml[20], [0, a$0], cst_img);
    }
    function meta(_K_, _L_){return terminal(cst_meta, _K_, _L_);}
    function style(opt, elts){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     return caml_call3(Xml[21], [0, a], cst_style$0, elts);
    }
    function link(rel, href, opt, param){
     if(opt) var sth = opt[1], a = sth; else var a = 0;
     var _I_ = [0, a_href(href), a], _J_ = [0, [0, a_rel(rel), _I_]];
     return caml_call2(Xml[20], _J_, cst_link);
    }
    function base(_G_, _H_){return terminal(cst_base, _G_, _H_);}
    function tot(x){return x;}
    function totl(x){return x;}
    function toelt(x){return x;}
    function toeltl(x){return x;}
    function doc_toelt(x){return x;}
    var I = caml_call1(Xml_stream[2], Xml);
    function of_seq(s){return caml_call1(I[1], s);}
    function data(s){return caml_call1(Xml[18], s);}
    function leaf(tag, a, param){return caml_call2(Xml[20], a, tag);}
    function node(tag, a, elts){return caml_call3(Xml[21], a, tag, elts);}
    function coerce_elt(x){return x;}
    var
     float_attrib$0 = Xml[4],
     int_attrib$0 = Xml[5],
     string_attrib$0 = Xml[6];
    function uri_attrib$0(a, s){return caml_call2(Xml[13], a, s);}
    var
     space_sep_attrib$0 = Xml[7],
     comma_sep_attrib$0 = Xml[8],
     Unsafe =
       [0,
        data,
        leaf,
        node,
        coerce_elt,
        float_attrib$0,
        int_attrib$0,
        string_attrib$0,
        uri_attrib$0,
        space_sep_attrib$0,
        comma_sep_attrib$0];
    return [0,
            Xml,
            Info,
            string_of_uri,
            uri_of_string,
            to_xmlattribs,
            to_attrib,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            ,
            a_class,
            a_id,
            a_user_data,
            a_title,
            a_xml_lang,
            a_lang,
            a_style,
            a_property,
            a_onabort,
            a_onafterprint,
            a_onbeforeprint,
            a_onbeforeunload,
            a_onblur,
            a_oncanplay,
            a_oncanplaythrough,
            a_onchange,
            a_ondurationchange,
            a_onemptied,
            a_onended,
            a_onerror,
            a_onfocus,
            a_onformchange,
            a_onforminput,
            a_onhashchange,
            a_oninput,
            a_oninvalid,
            a_onoffline,
            a_ononline,
            a_onpause,
            a_onplay,
            a_onplaying,
            a_onpagehide,
            a_onpageshow,
            a_onpopstate,
            a_onprogress,
            a_onratechange,
            a_onreadystatechange,
            a_onredo,
            a_onresize,
            a_onscroll,
            a_onseeked,
            a_onseeking,
            a_onselect,
            a_onshow,
            a_onstalled,
            a_onstorage,
            a_onsubmit,
            a_onsuspend,
            a_ontimeupdate,
            a_onundo,
            a_onunload,
            a_onvolumechange,
            a_onwaiting,
            a_onload,
            a_onloadeddata,
            a_onloadedmetadata,
            a_onloadstart,
            a_onmessage,
            a_onmousewheel,
            a_onclick,
            a_oncontextmenu,
            a_ondblclick,
            a_ondrag,
            a_ondragend,
            a_ondragenter,
            a_ondragleave,
            a_ondragover,
            a_ondragstart,
            a_ondrop,
            a_onmousedown,
            a_onmouseup,
            a_onmouseover,
            a_onmousemove,
            a_onmouseout,
            a_ontouchstart,
            a_ontouchend,
            a_ontouchmove,
            a_ontouchcancel,
            a_onkeypress,
            a_onkeydown,
            a_onkeyup,
            a_version,
            a_xmlns,
            a_manifest,
            a_cite,
            a_xml_space,
            a_accesskey,
            a_charset,
            a_accept_charset,
            a_accept,
            a_href,
            a_hreflang,
            a_download,
            a_rel,
            a_tabindex,
            a_mime_type,
            a_alt,
            a_height,
            a_src,
            a_width,
            a_label_for,
            a_label_for,
            a_output_for,
            a_output_for,
            a_selected,
            a_text_value,
            a_int_value,
            a_value,
            a_float_value,
            a_action,
            a_method,
            a_method,
            a_enctype,
            a_checked,
            a_disabled,
            a_readonly,
            a_maxlength,
            a_minlength,
            a_name,
            a_allowfullscreen,
            a_allowpaymentrequest,
            a_referrerpolicy,
            a_autocomplete,
            a_async,
            a_autofocus,
            a_autoplay,
            a_muted,
            a_crossorigin,
            a_integrity,
            a_mediagroup,
            a_challenge,
            a_contenteditable,
            a_contextmenu,
            a_controls,
            a_dir,
            a_draggable,
            a_form,
            a_formaction,
            a_formenctype,
            a_formnovalidate,
            a_formtarget,
            a_hidden,
            a_high,
            a_icon,
            a_ismap,
            a_keytype,
            a_list,
            a_loop,
            a_low,
            a_max,
            a_input_max,
            a_min,
            a_input_min,
            a_inputmode,
            a_novalidate,
            a_open,
            a_optimum,
            a_pattern,
            a_placeholder,
            a_poster,
            a_preload,
            a_pubdate,
            a_radiogroup,
            a_required,
            a_reversed,
            a_sandbox,
            a_spellcheck,
            a_scoped,
            a_seamless,
            a_sizes,
            a_span,
            a_srclang,
            a_srcset,
            a_img_sizes,
            a_start,
            a_step,
            a_wrap,
            a_size,
            a_input_type,
            a_menu_type,
            a_command_type,
            a_button_type,
            a_multiple,
            a_cols,
            a_rows,
            a_summary,
            a_align,
            a_axis,
            a_colspan,
            a_headers,
            a_rowspan,
            a_scope,
            a_border,
            a_rules,
            a_char,
            a_data,
            a_codetype,
            a_frameborder,
            a_marginheight,
            a_marginwidth,
            a_scrolling,
            a_target,
            a_content,
            a_http_equiv,
            a_media,
            a_role,
            a_aria,
            ,
            ,
            ,
            ,
            ,
            body,
            head,
            title,
            html,
            footer,
            header,
            section,
            nav,
            txt,
            txt,
            entity,
            space,
            cdata,
            cdata_script,
            cdata_style,
            h1,
            h2,
            h3,
            h4,
            h5,
            h6,
            hgroup,
            address,
            blockquote,
            div,
            p,
            pre,
            abbr,
            br,
            cite,
            code,
            dfn,
            em,
            kbd,
            q,
            samp,
            span,
            strong,
            time,
            var$0,
            a,
            dl,
            ol,
            ul,
            dd,
            dt,
            li,
            hr,
            b,
            i,
            u,
            small,
            sub,
            sup,
            mark,
            rp,
            rt,
            ruby,
            wbr,
            bdo,
            a_datetime,
            a_shape,
            a_coords,
            a_usemap,
            a_defer,
            a_label,
            area,
            map,
            del,
            ins,
            script,
            noscript,
            template,
            article,
            aside,
            main,
            ,
            audio,
            video,
            canvas,
            command,
            menu,
            embed,
            source,
            meter,
            output_elt,
            form,
            svg,
            input,
            keygen,
            label,
            option,
            select,
            textarea,
            button,
            datalist,
            progress,
            legend,
            details,
            summary,
            fieldset,
            optgroup,
            figcaption,
            figure,
            caption,
            tablex,
            tablex,
            td,
            th,
            tr,
            colgroup,
            col,
            thead,
            tbody,
            tfoot,
            iframe,
            object,
            param,
            img,
            meta,
            style,
            link,
            base,
            tot,
            totl,
            toelt,
            toeltl,
            doc_toelt,
            ,
            of_seq,
            Unsafe];
   }
   function Wrapped_functions(Xml){
    function string_of_sandbox_token(param){
     return -177579325 <= param
             ? 642066717
               <= param
               ? 961985737 <= param ? cst_allow_same_origin : cst_allow_popups
               : -141440231
                 <= param
                 ? cst_allow_forms
                 : cst_allow_pointer_lock
             : -237921695
               <= param
               ? cst_allow_script
               : cst_allow_top_navigation;
    }
    function string_of_linktype(param){
     if(typeof param === "number")
      return 381789656 <= param
              ? 814486425
                <= param
                ? 870035731
                  <= param
                  ? 1021867988
                    <= param
                    ? 1026883179 <= param ? cst_external : cst_canonical
                    : 892857107 <= param ? cst_prev : cst_next
                  : 847656566 <= param ? cst_last : cst_icon$0
                : 395967329
                  <= param
                  ? 693914176
                    <= param
                    ? 803495649 <= param ? cst_help : cst_noreferrer
                    : 672161451 <= param ? cst_author : cst_license
                  : 395056008 <= param ? cst_search : cst_noopener
              : -289155950
                <= param
                ? 19067
                  <= param
                  ? 212027606
                    <= param
                    ? 332064784 <= param ? cst_first : cst_bookmark
                    : 4198970 <= param ? cst_tag : cst_up
                  : -123098695 <= param ? cst_pingback : cst_nofollow
                : -837966724
                  <= param
                  ? -687429350
                    <= param
                    ? -543567890 <= param ? cst_stylesheet : cst_alternate
                    : -784200974 <= param ? cst_index : cst_sidebar
                  : -954191215 <= param ? cst_archives : cst_prefetch;
     var s = param[2];
     return s;
    }
    function string_of_mediadesc_token(param){
     if(typeof param === "number")
      return 3256577 <= param
              ? 67844052
                <= param
                ? 985170249
                  <= param
                  ? 993823919 <= param ? cst_projection : cst_aural
                  : 741408196 <= param ? cst_handheld : cst_embossed
                : 4203225 <= param ? cst_tty : cst_all
              : -321929715
                === param
                ? cst_braille
                : -68046964
                  <= param
                  ? 18850 <= param ? cst_tv : cst_screen
                  : -275811774 <= param ? cst_speech : cst_print;
     var s = param[2];
     return s;
    }
    function string_of_referrerpolicy(param){
     return 128179133 <= param
             ? 516162486
               === param
               ? cst_unsafe_url
               : 880519217
                 <= param
                 ? 1065162943
                   <= param
                   ? cst_same_origin
                   : cst_origin_when_cross_origin
                 : 808133042
                   <= param
                   ? cst_no_referrer_when_downgrade
                   : cst_no_referrer
             : -6975994
               <= param
               ? 50834029 <= param ? cst : cst_origin
               : -512964804
                 <= param
                 ? cst_strict_origin
                 : cst_strict_origin_when_cross_o;
    }
    function string_of_big_variant(param){
     if(typeof param === "number")
      return 4252495 <= param
              ? 748194550
                <= param
                ? 892709484
                  <= param
                  ? 936387931
                    <= param
                    ? 984475830
                      <= param
                      ? 1003109192
                        <= param
                        ? 1026883179 <= param ? cst_external$0 : cst_0
                        : 995986491 <= param ? cst_formnovalidate$0 : cst_audio$0
                      : 963342108 <= param ? cst_async$0 : cst_toolbar
                    : 892857107
                      <= param
                      ? 914891065
                        <= param
                        ? 925976842 <= param ? cst_soft : cst_rows$0
                        : 914389316 <= param ? cst_rect : cst_prev$0
                      : 892711040 <= param ? cst_POST : cst_poly
                  : 847656566
                    <= param
                    ? 848351876
                      <= param
                      ? 870530776
                        <= param
                        ? 881668074 <= param ? cst_open$0 : cst_none
                        : 870035731 <= param ? cst_next$0 : cst_loop$0
                      : 847852583 <= param ? cst_left : cst_last$0
                    : 803298059
                      <= param
                      ? 814486425
                        <= param
                        ? 836565865 <= param ? cst_kana : cst_icon$1
                        : 803495649 <= param ? cst_help$0 : cst_hard
                      : 748545107 <= param ? cst_cols$0 : cst_char$0
                : 292438678
                  <= param
                  ? 434500685
                    <= param
                    ? 596180811
                      <= param
                      ? 693914176
                        <= param
                        ? 726666127 <= param ? cst_auto : cst_noreferrer$0
                        : 672161451 <= param ? cst_author$0 : cst_muted$0
                      : 475573507 <= param ? cst_autoplay$0 : cst_anonymous
                    : 332064784
                      <= param
                      ? 395967329
                        <= param
                        ? 432776079 <= param ? cst_metadata : cst_license$0
                        : 395056008 <= param ? cst_search$0 : cst_first$0
                      : 306241015 <= param ? cst_novalidate$0 : cst_controls$0
                  : 111644259
                    <= param
                    ? 178382384
                      <= param
                      ? 202657151
                        <= param
                        ? 212027606 <= param ? cst_bookmark$0 : cst_required$0
                        : 186574459 <= param ? cst_selected$0 : cst_circle
                      : 140750597 <= param ? cst_rowgroup : cst_checkbox
                    : 19559306
                      <= param
                      ? 50085628
                        <= param
                        ? 95509868 <= param ? cst_katakana : cst_email
                        : 48900580 <= param ? cst_latin : cst_hidden$0
                      : 4448519 <= param ? cst_yes : cst_url
              : -369291781
                <= param
                ? 17505
                  <= param
                  ? 3805386
                    <= param
                    ? 4102650
                      <= param
                      ? 4198970
                        <= param
                        ? 4199867 <= param ? cst_tel : cst_tag$0
                        : 4103754 <= param ? cst_rtl : cst_row
                      : 3953222 <= param ? cst_1 : cst_ltr
                    : 3256577
                      <= param
                      ? 3356704
                        <= param
                        ? 3553398 <= param ? cst_GET : cst_col$0
                        : 3257036 <= param ? cst_any : cst_all$0
                      : 19067 <= param ? cst_up$0 : cst_no
                  : -165772469
                    <= param
                    ? -123098695
                      <= param
                      ? -100768656
                        <= param
                        ? -57574468 <= param ? cst_right : cst_scoped$0
                        : -116258131 <= param ? cst_numeric : cst_pingback$0
                      : -146439973 <= param ? cst_radio : cst_pubdate$0
                    : -289155950
                      <= param
                      ? -200275514
                        <= param
                        ? -197222864 <= param ? cst_multiple$0 : cst_latin_name
                        : -247853591 <= param ? cst_autofocus$0 : cst_nofollow$0
                      : -363872942 <= param ? cst_defer$0 : cst_full_width_latin
                : -784200974
                  <= param
                  ? -613973726
                    <= param
                    ? -529147129
                      <= param
                      ? -423051825
                        <= param
                        ? -384499551 <= param ? cst_default : cst_context
                        : -514572330 <= param ? cst_verbatim : cst_checked$0
                      : -543567890 <= param ? cst_stylesheet$0 : cst_reserved$0
                    : -728306478
                      <= param
                      ? -707104822
                        <= param
                        ? -687429350
                          <= param
                          ? cst_alternate$0
                          : cst_http_www_w3_org_1999_xhtml
                        : -709493348 <= param ? cst_disabled$0 : cst_ismap$0
                      : -773209244 <= param ? cst_use_credentials : cst_index$0
                  : -883155966
                    <= param
                    ? -837966724
                      <= param
                      ? -792946572
                        <= param
                        ? -788068560 <= param ? cst_justify : cst_groups
                        : -826369749 <= param ? cst_command$0 : cst_sidebar$0
                      : -872161756 <= param ? cst_latin_prose : cst_readonly$0
                    : -1000861353
                      === param
                      ? cst_prefetch$0
                      : -954191215
                        <= param
                        ? -931002593 <= param ? cst_colgroup$0 : cst_archives$0
                        : -967956361 <= param ? cst_seamless$0 : cst_preserve;
     var s = param[2];
     return s;
    }
    function string_of_input_type(param){
     return 50085628 <= param
             ? 612668487
               <= param
               ? 781515420
                 <= param
                 ? 936769581
                   <= param
                   ? 969837588 <= param ? cst_week : cst_time$0
                   : 936573133 <= param ? cst_text : cst_file
                 : 758940238 <= param ? cst_date : cst_datetime_local
               : 242538002
                 <= param
                 ? 529348384
                   <= param
                   ? 578936635 <= param ? cst_password : cst_month
                   : 395056008 <= param ? cst_search$1 : cst_button$0
                 : 111644259 <= param ? cst_checkbox$0 : cst_email$0
             : -146439973
               <= param
               ? -101336657
                 <= param
                 ? 4252495
                   <= param
                   ? 19559306 <= param ? cst_hidden$1 : cst_url$0
                   : 4199867 <= param ? cst_tel$0 : cst_reset
                 : -145943139 <= param ? cst_range : cst_radio$0
               : -795439301
                 <= param
                 ? -578166461
                   <= param
                   ? -528289822 <= param ? cst_readonly$1 : cst_color
                   : -703661335 <= param ? cst_number : cst_image
                 : -828715976 <= param ? cst_submit : cst_datetime$0;
    }
    function string_of_number_or_datetime(param){
     if(-703661335 <= param[1]){
      var n = param[2];
      return caml_call1(Stdlib[33], n);
     }
     var t = param[2];
     return t;
    }
    var
     string_of_character = caml_call1(Stdlib_String[1], 1),
     string_of_number = Stdlib[33],
     string_of_bool = Stdlib[30];
    function onoff_of_bool(param){return param ? cst_on : cst_off;}
    function unoption_string(param){
     if(! param) return cst$0;
     var x = param[1];
     return x;
    }
    function string_of_step(param){
     if(! param) return cst_any$0;
     var x = param[1];
     return caml_call1(Xml_print[6], x);
    }
    function string_of_sizes(param){
     if(! param) return cst_any$1;
     var l = param[1];
     function _B_(param){
      var y = param[2], x = param[1];
      return caml_call3(Stdlib_Printf[4], _a_, x, y);
     }
     var _C_ = caml_call2(Stdlib_List[19], _B_, l);
     return caml_call2(Stdlib_String[6], cst$1, _C_);
    }
    function string_of_sandbox(l){
     var _A_ = caml_call2(Stdlib_List[19], string_of_sandbox_token, l);
     return caml_call2(Stdlib_String[6], cst$2, _A_);
    }
    function string_of_numbers(l){
     var _z_ = caml_call2(Stdlib_List[19], string_of_number, l);
     return caml_call2(Stdlib_String[6], cst$3, _z_);
    }
    function string_of_mediadesc(l){
     var _y_ = caml_call2(Stdlib_List[19], string_of_mediadesc_token, l);
     return caml_call2(Stdlib_String[6], cst$4, _y_);
    }
    function string_of_linktypes(l){
     var _x_ = caml_call2(Stdlib_List[19], string_of_linktype, l);
     return caml_call2(Stdlib_String[6], cst$5, _x_);
    }
    function string_of_srcset(l){
     function f(param){
      var _s_ = param[1];
      if(-738802218 === _s_){
       var
        match = param[2],
        v = match[2],
        url = match[1],
        _t_ = caml_call1(string_of_number, v),
        _u_ = caml_call1(Xml[2], url);
       return caml_call3(Stdlib_Printf[4], _b_, _u_, _t_);
      }
      if(4252495 <= _s_){
       var url$0 = param[2];
       return caml_call1(Xml[2], url$0);
      }
      var
       match$0 = param[2],
       v$0 = match$0[2],
       url$1 = match$0[1],
       _v_ = caml_call1(Xml_print[6], v$0),
       _w_ = caml_call1(Xml[2], url$1);
      return caml_call3(Stdlib_Printf[4], _c_, _w_, _v_);
     }
     var _r_ = caml_call2(Stdlib_List[19], f, l);
     return caml_call2(Stdlib_String[6], cst$6, _r_);
    }
    return [0,
            Xml,
            ,
            ,
            ,
            string_of_referrerpolicy,
            string_of_big_variant,
            string_of_input_type,
            string_of_number_or_datetime,
            string_of_character,
            ,
            string_of_bool,
            onoff_of_bool,
            unoption_string,
            string_of_step,
            string_of_sizes,
            string_of_sandbox,
            string_of_numbers,
            string_of_mediadesc,
            string_of_linktypes,
            string_of_srcset];
   }
   function _d_(_o_, _n_, _m_){
    var _p_ = Make_with_wrapped_functions(_o_, _n_, _m_), _q_ = _p_[361];
    return [0,
            _p_[1],
            _p_[2],
            _p_[3],
            _p_[4],
            _p_[19],
            _p_[21],
            _p_[20],
            _p_[22],
            _p_[23],
            _p_[24],
            _p_[27],
            _p_[28],
            _p_[29],
            _p_[30],
            _p_[31],
            _p_[32],
            _p_[33],
            _p_[34],
            _p_[35],
            _p_[36],
            _p_[37],
            _p_[38],
            _p_[39],
            _p_[40],
            _p_[41],
            _p_[42],
            _p_[43],
            _p_[44],
            _p_[77],
            _p_[45],
            _p_[46],
            _p_[47],
            _p_[48],
            _p_[49],
            _p_[50],
            _p_[51],
            _p_[52],
            _p_[53],
            _p_[54],
            _p_[55],
            _p_[56],
            _p_[57],
            _p_[58],
            _p_[59],
            _p_[60],
            _p_[61],
            _p_[62],
            _p_[63],
            _p_[64],
            _p_[65],
            _p_[66],
            _p_[67],
            _p_[68],
            _p_[69],
            _p_[70],
            _p_[71],
            _p_[72],
            _p_[73],
            _p_[74],
            _p_[75],
            _p_[76],
            _p_[78],
            _p_[79],
            _p_[80],
            _p_[81],
            _p_[82],
            _p_[83],
            _p_[84],
            _p_[85],
            _p_[86],
            _p_[87],
            _p_[88],
            _p_[89],
            _p_[90],
            _p_[91],
            _p_[92],
            _p_[93],
            _p_[94],
            _p_[95],
            _p_[96],
            _p_[97],
            _p_[98],
            _p_[99],
            _p_[138],
            _p_[139],
            _p_[141],
            _p_[142],
            _p_[143],
            _p_[144],
            _p_[145],
            _p_[146],
            _p_[147],
            _p_[148],
            _p_[149],
            _p_[150],
            _p_[151],
            _p_[152],
            _p_[153],
            _p_[154],
            _p_[155],
            _p_[156],
            _p_[157],
            _p_[158],
            _p_[159],
            _p_[160],
            _p_[161],
            _p_[162],
            _p_[163],
            _p_[164],
            _p_[165],
            _p_[166],
            _p_[167],
            _p_[168],
            _p_[169],
            _p_[170],
            _p_[171],
            _p_[172],
            _p_[173],
            _p_[174],
            _p_[175],
            _p_[176],
            _p_[177],
            _p_[178],
            _p_[179],
            _p_[180],
            _p_[181],
            _p_[140],
            _p_[182],
            _p_[183],
            _p_[184],
            _p_[185],
            _p_[186],
            _p_[187],
            _p_[188],
            _p_[189],
            _p_[190],
            _p_[191],
            _p_[192],
            _p_[193],
            _p_[194],
            _p_[195],
            _p_[100],
            _p_[101],
            _p_[102],
            _p_[103],
            _p_[104],
            _p_[105],
            _p_[106],
            _p_[107],
            _p_[108],
            _p_[109],
            _p_[110],
            _p_[111],
            _p_[112],
            _p_[113],
            _p_[114],
            _p_[291],
            _p_[128],
            _p_[132],
            _p_[202],
            _p_[131],
            _p_[119],
            _p_[120],
            _p_[121],
            _p_[122],
            _p_[135],
            _p_[136],
            _p_[129],
            _p_[130],
            _p_[201],
            _p_[137],
            _p_[203],
            _p_[123],
            _p_[196],
            _p_[117],
            _p_[197],
            _p_[124],
            _p_[125],
            _p_[126],
            _p_[127],
            _p_[133],
            _p_[134],
            _p_[200],
            _p_[199],
            _p_[198],
            _p_[296],
            _p_[205],
            _p_[206],
            _p_[207],
            _p_[208],
            _p_[209],
            _p_[210],
            _p_[204],
            _p_[211],
            _p_[212],
            _p_[213],
            _p_[115],
            _p_[116],
            _p_[118],
            _p_[292],
            _p_[293],
            _p_[294],
            _p_[214],
            _p_[215],
            _p_[216],
            _p_[217],
            _p_[218],
            _p_[219],
            _p_[220],
            _p_[221],
            _p_[222],
            _p_[295],
            _p_[223],
            _p_[25],
            _p_[26],
            _p_[224],
            _p_[225],
            _p_[239],
            _p_[234],
            _p_[232],
            _p_[353],
            _p_[233],
            _p_[231],
            _p_[318],
            _p_[235],
            _p_[236],
            _p_[237],
            _p_[238],
            _p_[246],
            _p_[247],
            _p_[248],
            _p_[249],
            _p_[250],
            _p_[251],
            _p_[252],
            _p_[253],
            _p_[304],
            _p_[305],
            _p_[306],
            _p_[256],
            _p_[257],
            _p_[254],
            _p_[255],
            _p_[272],
            _p_[273],
            _p_[274],
            _p_[275],
            _p_[276],
            _p_[277],
            _p_[333],
            _p_[334],
            _p_[278],
            _p_[279],
            _p_[280],
            _p_[281],
            _p_[282],
            _p_[283],
            _p_[284],
            _p_[285],
            _p_[289],
            _p_[290],
            _p_[258],
            _p_[259],
            _p_[260],
            _p_[261],
            _p_[262],
            _p_[263],
            _p_[264],
            _p_[265],
            _p_[266],
            _p_[267],
            _p_[268],
            _p_[269],
            _p_[270],
            _p_[271],
            _p_[299],
            _p_[300],
            _p_[349],
            _p_[346],
            _p_[347],
            _p_[348],
            _p_[313],
            _p_[308],
            _p_[309],
            _p_[310],
            _p_[314],
            _p_[297],
            _p_[298],
            _p_[335],
            _p_[337],
            _p_[336],
            _p_[341],
            _p_[342],
            _p_[343],
            _p_[344],
            _p_[345],
            _p_[338],
            _p_[339],
            _p_[340],
            _p_[317],
            _p_[331],
            _p_[328],
            _p_[321],
            _p_[319],
            _p_[325],
            _p_[323],
            _p_[326],
            _p_[332],
            _p_[322],
            _p_[324],
            _p_[320],
            _p_[327],
            _p_[315],
            _p_[316],
            _p_[241],
            _p_[242],
            _p_[243],
            _p_[244],
            _p_[245],
            _p_[329],
            _p_[330],
            _p_[311],
            _p_[312],
            _p_[301],
            _p_[302],
            _p_[303],
            _p_[350],
            _p_[351],
            _p_[352],
            _p_[287],
            _p_[286],
            _p_[288],
            _p_[240],
            _p_[360],
            _p_[354],
            _p_[355],
            _p_[356],
            _p_[357],
            _p_[358],
            _p_[5],
            _p_[6],
            [0,
             _q_[1],
             _q_[3],
             _q_[2],
             _q_[4],
             _q_[7],
             _q_[5],
             _q_[6],
             _q_[8],
             _q_[9],
             _q_[10]]];
   }
   function _e_(_k_){
    var _l_ = Wrapped_functions(_k_);
    return [0,
            _l_[1],
            _l_[6],
            _l_[11],
            _l_[12],
            _l_[9],
            _l_[7],
            _l_[8],
            _l_[19],
            _l_[18],
            _l_[5],
            _l_[17],
            _l_[16],
            _l_[15],
            _l_[20],
            _l_[14],
            _l_[13]];
   }
   var
    Html_f =
      [0,
       function(_h_, _g_){
        var
         _f_ = Wrapped_functions(_h_),
         _j_ =
           Make_with_wrapped_functions
            (_h_,
             [0,
              _f_[1],
              _f_[6],
              _f_[11],
              _f_[12],
              _f_[9],
              _f_[7],
              _f_[8],
              _f_[19],
              _f_[18],
              _f_[5],
              _f_[17],
              _f_[16],
              _f_[15],
              _f_[20],
              _f_[14],
              _f_[13]],
             _g_),
         _i_ = _j_[361];
        return [0,
                _j_[1],
                _j_[2],
                _j_[3],
                _j_[4],
                _j_[19],
                _j_[21],
                _j_[20],
                _j_[22],
                _j_[23],
                _j_[24],
                _j_[27],
                _j_[28],
                _j_[29],
                _j_[30],
                _j_[31],
                _j_[32],
                _j_[33],
                _j_[34],
                _j_[35],
                _j_[36],
                _j_[37],
                _j_[38],
                _j_[39],
                _j_[40],
                _j_[41],
                _j_[42],
                _j_[43],
                _j_[44],
                _j_[77],
                _j_[45],
                _j_[46],
                _j_[47],
                _j_[48],
                _j_[49],
                _j_[50],
                _j_[51],
                _j_[52],
                _j_[53],
                _j_[54],
                _j_[55],
                _j_[56],
                _j_[57],
                _j_[58],
                _j_[59],
                _j_[60],
                _j_[61],
                _j_[62],
                _j_[63],
                _j_[64],
                _j_[65],
                _j_[66],
                _j_[67],
                _j_[68],
                _j_[69],
                _j_[70],
                _j_[71],
                _j_[72],
                _j_[73],
                _j_[74],
                _j_[75],
                _j_[76],
                _j_[78],
                _j_[79],
                _j_[80],
                _j_[81],
                _j_[82],
                _j_[83],
                _j_[84],
                _j_[85],
                _j_[86],
                _j_[87],
                _j_[88],
                _j_[89],
                _j_[90],
                _j_[91],
                _j_[92],
                _j_[93],
                _j_[94],
                _j_[95],
                _j_[96],
                _j_[97],
                _j_[98],
                _j_[99],
                _j_[138],
                _j_[139],
                _j_[141],
                _j_[142],
                _j_[143],
                _j_[144],
                _j_[145],
                _j_[146],
                _j_[147],
                _j_[148],
                _j_[149],
                _j_[150],
                _j_[151],
                _j_[152],
                _j_[153],
                _j_[154],
                _j_[155],
                _j_[156],
                _j_[157],
                _j_[158],
                _j_[159],
                _j_[160],
                _j_[161],
                _j_[162],
                _j_[163],
                _j_[164],
                _j_[165],
                _j_[166],
                _j_[167],
                _j_[168],
                _j_[169],
                _j_[170],
                _j_[171],
                _j_[172],
                _j_[173],
                _j_[174],
                _j_[175],
                _j_[176],
                _j_[177],
                _j_[178],
                _j_[179],
                _j_[180],
                _j_[181],
                _j_[140],
                _j_[182],
                _j_[183],
                _j_[184],
                _j_[185],
                _j_[186],
                _j_[187],
                _j_[188],
                _j_[189],
                _j_[190],
                _j_[191],
                _j_[192],
                _j_[193],
                _j_[194],
                _j_[195],
                _j_[100],
                _j_[101],
                _j_[102],
                _j_[103],
                _j_[104],
                _j_[105],
                _j_[106],
                _j_[107],
                _j_[108],
                _j_[109],
                _j_[110],
                _j_[111],
                _j_[112],
                _j_[113],
                _j_[114],
                _j_[291],
                _j_[128],
                _j_[132],
                _j_[202],
                _j_[131],
                _j_[119],
                _j_[120],
                _j_[121],
                _j_[122],
                _j_[135],
                _j_[136],
                _j_[129],
                _j_[130],
                _j_[201],
                _j_[137],
                _j_[203],
                _j_[123],
                _j_[196],
                _j_[117],
                _j_[197],
                _j_[124],
                _j_[125],
                _j_[126],
                _j_[127],
                _j_[133],
                _j_[134],
                _j_[200],
                _j_[199],
                _j_[198],
                _j_[296],
                _j_[205],
                _j_[206],
                _j_[207],
                _j_[208],
                _j_[209],
                _j_[210],
                _j_[204],
                _j_[211],
                _j_[212],
                _j_[213],
                _j_[115],
                _j_[116],
                _j_[118],
                _j_[292],
                _j_[293],
                _j_[294],
                _j_[214],
                _j_[215],
                _j_[216],
                _j_[217],
                _j_[218],
                _j_[219],
                _j_[220],
                _j_[221],
                _j_[222],
                _j_[295],
                _j_[223],
                _j_[25],
                _j_[26],
                _j_[224],
                _j_[225],
                _j_[239],
                _j_[234],
                _j_[232],
                _j_[353],
                _j_[233],
                _j_[231],
                _j_[318],
                _j_[235],
                _j_[236],
                _j_[237],
                _j_[238],
                _j_[246],
                _j_[247],
                _j_[248],
                _j_[249],
                _j_[250],
                _j_[251],
                _j_[252],
                _j_[253],
                _j_[304],
                _j_[305],
                _j_[306],
                _j_[256],
                _j_[257],
                _j_[254],
                _j_[255],
                _j_[272],
                _j_[273],
                _j_[274],
                _j_[275],
                _j_[276],
                _j_[277],
                _j_[333],
                _j_[334],
                _j_[278],
                _j_[279],
                _j_[280],
                _j_[281],
                _j_[282],
                _j_[283],
                _j_[284],
                _j_[285],
                _j_[289],
                _j_[290],
                _j_[258],
                _j_[259],
                _j_[260],
                _j_[261],
                _j_[262],
                _j_[263],
                _j_[264],
                _j_[265],
                _j_[266],
                _j_[267],
                _j_[268],
                _j_[269],
                _j_[270],
                _j_[271],
                _j_[299],
                _j_[300],
                _j_[349],
                _j_[346],
                _j_[347],
                _j_[348],
                _j_[313],
                _j_[308],
                _j_[309],
                _j_[310],
                _j_[314],
                _j_[297],
                _j_[298],
                _j_[335],
                _j_[337],
                _j_[336],
                _j_[341],
                _j_[342],
                _j_[343],
                _j_[344],
                _j_[345],
                _j_[338],
                _j_[339],
                _j_[340],
                _j_[317],
                _j_[331],
                _j_[328],
                _j_[321],
                _j_[319],
                _j_[325],
                _j_[323],
                _j_[326],
                _j_[332],
                _j_[322],
                _j_[324],
                _j_[320],
                _j_[327],
                _j_[315],
                _j_[316],
                _j_[241],
                _j_[242],
                _j_[243],
                _j_[244],
                _j_[245],
                _j_[329],
                _j_[330],
                _j_[311],
                _j_[312],
                _j_[301],
                _j_[302],
                _j_[303],
                _j_[350],
                _j_[351],
                _j_[352],
                _j_[287],
                _j_[286],
                _j_[288],
                _j_[240],
                _j_[360],
                _j_[354],
                _j_[355],
                _j_[356],
                _j_[357],
                _j_[358],
                _j_[5],
                _j_[6],
                [0,
                 _i_[1],
                 _i_[3],
                 _i_[2],
                 _i_[4],
                 _i_[7],
                 _i_[5],
                 _i_[6],
                 _i_[8],
                 _i_[9],
                 _i_[10]]];
       },
       _e_,
       _d_];
   runtime.caml_register_global(514, Html_f, "Html_f");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
