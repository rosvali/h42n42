// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Uri
//# unitInfo: Requires: Angstrom, CamlinternalLazy, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Format, Stdlib__Lazy, Stdlib__List, Stdlib__Option, Stdlib__Printf, Stdlib__Result, Stdlib__String, Stringext
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$34 = "",
    cst$37 = ",",
    cst$36 = ".",
    cst$39 = "..",
    cst$33 = "/",
    cst$38 = "//",
    cst$35 = ":",
    cst_http$0 = "http",
    cst_https$0 = "https",
    cst_int_of_hex_char$1 = "int_of_hex_char",
    cst_localhost$0 = "localhost",
    caml_check_bound = runtime.caml_check_bound,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$32 = cst$33,
    cst$31 = cst$34,
    cst$30 = cst$33,
    cst$28 = cst$34,
    cst$24 = cst$35,
    cst$25 = cst$35,
    cst$26 = "::",
    cst$23 = cst$34,
    cst$21 = cst$36,
    cst$22 = cst$36,
    cst$20 = cst$34,
    cst$19 = cst$34,
    cst$18 = cst$33,
    cst$17 = cst$37,
    cst$16 = cst$33,
    cst$15 = cst$34,
    cst$13 = cst$34,
    cst$14 = cst$34,
    cst$12 = cst$34,
    cst$9 = cst$38,
    cst$10 = cst$35,
    cst$11 = "./",
    cst$8 = cst$37,
    cst$7 = "&",
    cst$6 = cst$33,
    cst$5 = cst$33,
    cst$4 = cst$34,
    cst$2 = cst$33,
    cst$3 = cst$33,
    cst$0 = cst$33,
    cst$1 = cst$33,
    cst = cst$34,
    cst$27 = cst$34,
    cst$29 = cst$38,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Stdlib_Option = global_data.Stdlib__Option,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Angstrom = global_data.Angstrom,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Format = global_data.Stdlib__Format,
    Stringext = global_data.Stringext,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Result = global_data.Stdlib__Result,
    _aS_ = [0, 0],
    _aN_ = [0, 3854881, "host is required for HTTP(S) uris"],
    _aP_ = [0, -1042355253],
    _aQ_ = [0, 804243368],
    _aO_ =
      [0,
       [11,
        "Only http and https URIs are supported. ",
        [2, 0, [11, " is invalid.", 0]]],
       "Only http and https URIs are supported. %s is invalid."],
    _aR_ = [1, [0, 3854881, "No scheme present in URI"]],
    cst_http = cst_http$0,
    cst_https = cst_https$0,
    _aM_ = [0, cst$34],
    _aL_ = [0, 0],
    _C_ = [0, 0, 0],
    cst_too_many_parts_in_IPv6_add = "too many parts in IPv6 address",
    _B_ = [0, cst$34, 0],
    cst_invalid_octect = "invalid octect",
    _k_ = [0, [11, "/?", [2, 0, 0]], "/?%s"],
    _j_ = [0, [2, 0, [12, 63, [2, 0, 0]]], "%s?%s"],
    cst_localhost = cst_localhost$0,
    _f_ = [0, cst$34, 0],
    _g_ = [0, cst$34, 0],
    _h_ = [0, 2],
    _i_ = [0, [0, cst$34, 0], 0],
    _c_ = [0, 2],
    _d_ = [0, cst$34, 0],
    cst_int_of_hex_char = cst_int_of_hex_char$1,
    cst_int_of_hex_char$0 = cst_int_of_hex_char$1,
    _b_ = [0, [12, 37, [4, 8, [0, 2, 2], 0, 0]], "%%%02X"],
    _a_ = [0, cst$33, 0],
    _ak_ = [0, 0, 0, 0];
   function iter_concat(fn, sep, buf, param){
    var param$0 = param;
    for(;;){
     if(! param$0) return 0;
     var last = param$0[1];
     if(! param$0[2]) return caml_call2(fn, buf, last);
     var rest = param$0[2];
     caml_call2(fn, buf, last);
     caml_call2(Stdlib_Buffer[16], buf, sep);
     var param$0 = rest;
    }
   }
   function compare_opt(c, t$0, t){
    if(! t$0) return t ? -1 : 0;
    var a = t$0[1];
    if(! t) return 1;
    var b = t[1];
    return caml_call2(c, a, b);
   }
   function compare_list(f, t$0, t){
    var t$2 = t$0, t$1 = t;
    for(;;){
     if(! t$2) return t$1 ? -1 : 0;
     var xs = t$2[2], x = t$2[1];
     if(! t$1) return 1;
     var ys = t$1[2], y = t$1[1], c = caml_call2(f, x, y);
     if(0 !== c) return c;
     var t$2 = xs, t$1 = ys;
    }
   }
   function sub_delims(a){
    var i = 0;
    for(;;){
     var c = caml_string_get("!$&'()*+,;=", i);
     caml_check_bound(a, c)[1 + c] = 1;
     var _d3_ = i + 1 | 0;
     if(10 === i) return a;
     var i = _d3_;
    }
   }
   var safe_chars = caml_make_vect(256, 0), i = 0;
   for(;;){
    var
     c =
       caml_string_get
        ("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_.-~",
         i);
    caml_check_bound(safe_chars, c)[1 + c] = 1;
    var _aT_ = i + 1 | 0;
    if(65 === i) break;
    var i = _aT_;
   }
   var pchar = sub_delims(caml_call1(Stdlib_Array[8], safe_chars));
   caml_check_bound(pchar, 58)[59] = 1;
   caml_check_bound(pchar, 64)[65] = 1;
   var safe_chars_for_scheme = caml_call1(Stdlib_Array[8], safe_chars);
   caml_check_bound(safe_chars_for_scheme, 43)[44] = 1;
   var safe_chars_for_path = sub_delims(caml_call1(Stdlib_Array[8], pchar));
   caml_check_bound(safe_chars_for_path, 47)[48] = 0;
   var safe_chars_for_query = caml_call1(Stdlib_Array[8], pchar);
   caml_check_bound(safe_chars_for_query, 47)[48] = 1;
   caml_check_bound(safe_chars_for_query, 63)[64] = 1;
   caml_check_bound(safe_chars_for_query, 38)[39] = 0;
   caml_check_bound(safe_chars_for_query, 59)[60] = 0;
   caml_check_bound(safe_chars_for_query, 43)[44] = 0;
   var
    safe_chars_for_query_key =
      caml_call1(Stdlib_Array[8], safe_chars_for_query);
   caml_check_bound(safe_chars_for_query_key, 61)[62] = 0;
   var
    safe_chars_for_query_value =
      caml_call1(Stdlib_Array[8], safe_chars_for_query);
   caml_check_bound(safe_chars_for_query_value, 44)[45] = 0;
   var safe_chars_for_userinfo = caml_call1(Stdlib_Array[8], safe_chars);
   caml_check_bound(safe_chars_for_userinfo, 58)[59] = 0;
   function safe_chars_for_component(param){
    if(typeof param === "number")
     if(-145160102 <= param){
      if(127343601 <= param){
       if(795008922 === param) return safe_chars_for_query_value;
       if(892015045 === param) return safe_chars_for_path;
      }
      else if(61643255 !== param && 127343600 <= param)
       return safe_chars_for_query;
     }
     else if(-250086679 <= param){
      if(-178940859 === param) return safe_chars_for_scheme;
      if(-145160103 <= param) return safe_chars_for_userinfo;
     }
     else{
      if(-911188600 === param) return safe_chars_for_query_key;
      if(-250086680 <= param) return safe_chars_for_query;
     }
    else if(-198771759 === param[1]){
     var
      match = param[2],
      unsafe = match[3],
      safe = match[2],
      component = match[1],
      _dW_ = safe_chars_for_component(component),
      safe_chars$0 = caml_call1(Stdlib_Array[8], _dW_),
      _dY_ = caml_ml_string_length(safe) - 1 | 0,
      _dX_ = 0;
     if(_dY_ >= 0){
      var i$0 = _dX_;
      for(;;){
       var c$0 = caml_string_get(safe, i$0);
       caml_check_bound(safe_chars$0, c$0)[1 + c$0] = 1;
       var _d2_ = i$0 + 1 | 0;
       if(_dY_ === i$0) break;
       var i$0 = _d2_;
      }
     }
     var _d0_ = caml_ml_string_length(unsafe) - 1 | 0, _dZ_ = 0;
     if(_d0_ >= 0){
      var i = _dZ_;
      for(;;){
       var c = caml_string_get(unsafe, i);
       caml_check_bound(safe_chars$0, c)[1 + c] = 0;
       var _d1_ = i + 1 | 0;
       if(_d0_ === i) break;
       var i = _d1_;
      }
     }
     return safe_chars$0;
    }
    return safe_chars;
   }
   function normalize_host(hso){return hso;}
   function canonicalize_port(port){return port;}
   function canonicalize_path(path){return path;}
   var
    Generic =
      [0,
       safe_chars_for_component,
       normalize_host,
       canonicalize_port,
       canonicalize_path],
    safe_chars_for_component$0 = Generic[1];
   function normalize_host$0(hs){return caml_call1(Stdlib_String[26], hs);}
   function canonicalize_port$0(param){
    if(! param) return 0;
    var x = param[1];
    return 80 === x ? 0 : [0, x];
   }
   function canonicalize_path$0(x){return x ? x : _a_;}
   var
    Http =
      [0,
       safe_chars_for_component$0,
       normalize_host$0,
       canonicalize_port$0,
       canonicalize_path$0],
    safe_chars_for_component$1 = Http[1],
    normalize_host$1 = Http[2],
    canonicalize_path$1 = Http[4];
   function canonicalize_port$1(param){
    if(! param) return 0;
    var x = param[1];
    return 443 === x ? 0 : [0, x];
   }
   var
    Https =
      [0,
       safe_chars_for_component$1,
       normalize_host$1,
       canonicalize_port$1,
       canonicalize_path$1],
    safe_chars_for_component$2 = Generic[1],
    canonicalize_port$2 = Generic[3],
    canonicalize_path$2 = Generic[4];
   function normalize_host$2(hs){
    var hs$0 = caml_call1(Stdlib_String[26], hs);
    return caml_string_equal(hs$0, cst_localhost$0) ? cst : hs$0;
   }
   var
    File =
      [0,
       safe_chars_for_component$2,
       normalize_host$2,
       canonicalize_port$2,
       canonicalize_path$2],
    safe_chars_for_component$3 = Generic[1],
    normalize_host$3 = Generic[2],
    canonicalize_port$3 = Generic[3],
    canonicalize_path$3 = Generic[4],
    Urn =
      [0,
       safe_chars_for_component$3,
       normalize_host$3,
       canonicalize_port$3,
       canonicalize_path$3];
   function module_of_scheme(param){
    if(! param) return Generic;
    var s = param[1], match = caml_call1(Stdlib_String[26], s);
    return caml_string_notequal(match, "file")
            ? caml_string_notequal
               (match, cst_http$0)
              ? caml_string_notequal
                 (match, cst_https$0)
                ? caml_string_notequal(match, "urn") ? Generic : Urn
                : Https
              : Http
            : File;
   }
   function encode(scheme, opt, b){
    if(opt) var sth = opt[1], component = sth; else var component = 892015045;
    var
     Scheme = module_of_scheme(scheme),
     safe_chars = Scheme[1].call(null, component),
     len = caml_ml_string_length(b),
     buf = caml_call1(Stdlib_Buffer[1], len),
     start = 0,
     cur = 0;
    for(;;){
     if(len <= cur){
      caml_call4(Stdlib_Buffer[18], buf, b, start, cur - start | 0);
      return caml_call1(Stdlib_Buffer[2], buf);
     }
     var c = caml_string_get(b, cur);
     if(caml_check_bound(safe_chars, c)[1 + c])
      var cur$0 = cur + 1 | 0, cur = cur$0;
     else{
      if(start < cur)
       caml_call4(Stdlib_Buffer[18], buf, b, start, cur - start | 0);
      var _dV_ = caml_call2(Stdlib_Printf[4], _b_, c);
      caml_call2(Stdlib_Buffer[16], buf, _dV_);
      var
       cur$1 = cur + 1 | 0,
       start$0 = cur + 1 | 0,
       start = start$0,
       cur = cur$1;
     }
    }
   }
   function int_of_hex_char(c){
    var c$0 = caml_call1(Stdlib_Char[6], c) - 48 | 0;
    if(9 >= c$0)
     return 0 <= c$0 ? c$0 : caml_call1(Stdlib[2], cst_int_of_hex_char$0);
    if(16 < c$0 && 23 > c$0) return c$0 - 7 | 0;
    return caml_call1(Stdlib[2], cst_int_of_hex_char);
   }
   function decode(b){
    var
     len = caml_ml_string_length(b),
     buf = caml_call1(Stdlib_Buffer[1], len),
     start = 0,
     cur = 0;
    for(;;){
     if(len <= cur)
      caml_call4(Stdlib_Buffer[18], buf, b, start, cur - start | 0);
     else{
      if(37 !== caml_string_get(b, cur)){
       var cur$1 = cur + 1 | 0, cur = cur$1;
       continue;
      }
      caml_call4(Stdlib_Buffer[18], buf, b, start, cur - start | 0);
      var start$0 = cur + 1 | 0;
      if(len <= start$0)
       caml_call2(Stdlib_Buffer[12], buf, 37);
      else{
       try{var highbits = int_of_hex_char(caml_string_get(b, start$0));}
       catch(_dU_){
        caml_call2(Stdlib_Buffer[12], buf, 37);
        var start = start$0, cur = start$0;
        continue;
       }
       var cur$0 = start$0 + 1 | 0;
       if(len > cur$0){
        a:
        {
         try{var lowbits = int_of_hex_char(caml_string_get(b, cur$0));}
         catch(_dT_){
          caml_call2(Stdlib_Buffer[12], buf, 37);
          var _dR_ = caml_string_get(b, cur$0 - 1 | 0);
          caml_call2(Stdlib_Buffer[12], buf, _dR_);
          var start_at = cur$0;
          break a;
         }
         var _dS_ = caml_call1(Stdlib_Char[1], (highbits << 4) + lowbits | 0);
         caml_call2(Stdlib_Buffer[12], buf, _dS_);
         var start_at = cur$0 + 1 | 0;
        }
        var start = start_at, cur = start_at;
        continue;
       }
       caml_call2(Stdlib_Buffer[12], buf, 37);
       var _dQ_ = caml_string_get(b, cur$0 - 1 | 0);
       caml_call2(Stdlib_Buffer[12], buf, _dQ_);
      }
     }
     return caml_call1(Stdlib_Buffer[2], buf);
    }
   }
   function pct_encode(scheme, opt, s){
    if(opt) var sth = opt[1], component = sth; else var component = 892015045;
    return encode(scheme, [0, component], s);
   }
   function pct_encoder(opt, _dP_, _dO_, _dN_, _dM_, _dL_, _dK_, param){
    if(opt) var sth = opt[1], scheme = sth; else var scheme = -178940859;
    if(_dP_)
     var sth$0 = _dP_[1], userinfo = sth$0;
    else
     var userinfo = -145160103;
    if(_dO_) var sth$1 = _dO_[1], host = sth$1; else var host = 803994504;
    if(_dN_) var sth$2 = _dN_[1], path = sth$2; else var path = 892015045;
    if(_dM_)
     var sth$3 = _dM_[1], query_key = sth$3;
    else
     var query_key = -911188600;
    if(_dL_)
     var sth$4 = _dL_[1], query_value = sth$4;
    else
     var query_value = 795008922;
    if(_dK_)
     var sth$5 = _dK_[1], fragment = sth$5;
    else
     var fragment = 127343600;
    return [0, scheme, userinfo, host, path, query_key, query_value, fragment];
   }
   function pct_decode(s){return decode(s);}
   function compare(param, _dJ_){
    var
     p = _dJ_[2],
     u = _dJ_[1],
     p$0 = param[2],
     u$0 = param[1],
     c = caml_call2(Stdlib_String[9], u$0, u);
    return 0 === c ? compare_opt(Stdlib_String[9], p$0, p) : c;
   }
   function userinfo_of_encoded(us){
    var match = caml_call3(Stringext[3], _c_, us, 58);
    if(! match) return _d_;
    var match$0 = match[2], u = match[1];
    if(! match$0) return [0, pct_decode(u), 0];
    var p = match$0[1], _dI_ = [0, pct_decode(p)];
    return [0, pct_decode(u), _dI_];
   }
   function encoded_of_userinfo(scheme, component){
    return function(param){
     var po = param[2], u = param[1];
     if(po) var p = po[1], _dF_ = caml_ml_string_length(p); else var _dF_ = 0;
     var
      len = (1 + caml_ml_string_length(u) | 0) + _dF_ | 0,
      buf = caml_call1(Stdlib_Buffer[1], len),
      _dG_ = pct_encode(scheme, [0, component], u);
     caml_call2(Stdlib_Buffer[16], buf, _dG_);
     if(po){
      var p$0 = po[1];
      caml_call2(Stdlib_Buffer[12], buf, 58);
      var _dH_ = pct_encode(scheme, [0, component], p$0);
      caml_call2(Stdlib_Buffer[16], buf, _dH_);
     }
     return caml_call1(Stdlib_Buffer[2], buf);};
   }
   var _e_ = Stdlib_String[9];
   function path_of_encoded(ps){
    var tokl = caml_call2(Stringext[4], ps, 47);
    return caml_call2(Stdlib_List[19], pct_decode, tokl);
   }
   function remove_dot_segments(p){
    var
     revp = caml_call1(Stdlib_List[9], p),
     ascension = 0,
     outp = 0,
     param$0 = revp;
    for(;;){
     a:
     {
      b:
      if(param$0){
       var _dB_ = param$0[1];
       c:
       {
        if(caml_string_notequal(_dB_, cst$36)){
         if(caml_string_notequal(_dB_, cst$39)){
          if(caml_string_notequal(_dB_, cst$33)) break a;
          var _dD_ = param$0[2];
          if(! _dD_) break b;
          var _dE_ = _dD_[1];
          if(! caml_string_notequal(_dE_, cst$36)){var r$3 = _dD_[2]; break c;}
          if(caml_string_notequal(_dE_, cst$39)){
           if(! caml_string_notequal(_dE_, cst$33)){
            var r$1 = _dD_[2];
            if(0 < ascension){
             var
              ascension$1 = ascension - 1 | 0,
              ascension = ascension$1,
              param$0 = [0, cst$2, r$1];
             continue;
            }
           }
           var r$0 = _dD_[2];
           if(0 >= ascension) break a;
           var
            ascension$0 = ascension - 1 | 0,
            ascension = ascension$0,
            param$0 = r$0;
           continue;
          }
          var r$2 = _dD_[2];
         }
         else
          var r$2 = param$0[2];
         var
          ascension$2 = ascension + 1 | 0,
          ascension = ascension$2,
          param$0 = r$2;
         continue;
        }
        var r$3 = param$0[2];
       }
       var param$0 = r$3;
       continue;
      }
      if
       (0 < caml_call1(Stdlib_List[1], p)
        && caml_string_equal(caml_call1(Stdlib_List[5], p), cst$33))
       return [0, cst$3, outp];
     }
     if(! param$0) break;
     var
      r = param$0[2],
      s = param$0[1],
      outp$0 = [0, s, outp],
      ascension = 0,
      outp = outp$0,
      param$0 = r;
    }
    if(0 >= ascension){
     if
      (0 < caml_call1(Stdlib_List[1], outp)
       && caml_string_equal(caml_call1(Stdlib_List[5], outp), cst$33))
      return caml_call1(Stdlib_List[6], outp);
     return outp;
    }
    var lst = caml_call1(Stdlib_Array[11], caml_make_vect(ascension, cst$39));
    if(lst){
     var t = lst[2], h = lst[1], acc$1 = [0, h, 0], acc = acc$1, param = t;
     for(;;){
      if(! param){var _dC_ = acc; break;}
      var
       xs = param[2],
       x = param[1],
       acc$0 = [0, x, [0, cst$0, acc]],
       acc = acc$0,
       param = xs;
     }
    }
    else
     var _dC_ = 0;
    return caml_call2(Stdlib_List[12], [0, cst$1, _dC_], outp);
   }
   function encoded_of_path(scheme, component){
    return function(p){
     var _dy_ = 0;
     function _dz_(c, tok){return caml_ml_string_length(tok) + c | 0;}
     var
      len = caml_call3(Stdlib_List[25], _dz_, _dy_, p),
      buf = caml_call1(Stdlib_Buffer[1], len);
     iter_concat
      (function(buf, seg){
        if(! caml_string_notequal(seg, cst$33))
         return caml_call2(Stdlib_Buffer[12], buf, 47);
        var _dA_ = pct_encode(scheme, [0, component], seg);
        return caml_call2(Stdlib_Buffer[16], buf, _dA_);
       },
       cst$4,
       buf,
       p);
     return caml_call1(Stdlib_Buffer[2], buf);};
   }
   function query_of_encoded(qs){
    var els = caml_call3(Stringext[3], 0, qs, 38);
    function plus_to_space(s){
     var
      s$0 = caml_call1(Stdlib_Bytes[49], s),
      _dw_ = runtime.caml_ml_bytes_length(s$0) - 1 | 0,
      _dv_ = 0;
     if(_dw_ >= 0){
      var i = _dv_;
      for(;;){
       if(43 === runtime.caml_bytes_get(s$0, i))
        runtime.caml_bytes_set(s$0, i, 32);
       var _dx_ = i + 1 | 0;
       if(_dw_ === i) break;
       var i = _dx_;
      }
     }
     return caml_call1(Stdlib_Bytes[48], s$0);
    }
    if(els){
     var
      _dr_ = function(el){return caml_call3(Stringext[3], _h_, el, 61);},
      acc = 0,
      param = caml_call2(Stdlib_List[21], _dr_, els);
     for(;;){
      if(! param){var _ds_ = acc; break;}
      var _dp_ = param[1];
      if(_dp_){
       var match = _dp_[2], k = _dp_[1];
       if(match)
        var
         tl = param[2],
         v = match[1],
         _dq_ = plus_to_space(v),
         l = caml_call3(Stringext[3], 0, _dq_, 44),
         l$0 = l || _f_,
         n = [0, plus_to_space(k), l$0],
         acc$0 = [0, n, acc],
         acc = acc$0,
         param = tl;
       else
        var
         tl$0 = param[2],
         n$0 = [0, plus_to_space(k), 0],
         acc$1 = [0, n$0, acc],
         acc = acc$1,
         param = tl$0;
      }
      else
       var tl$1 = param[2], acc$2 = [0, _g_, acc], acc = acc$2, param = tl$1;
     }
    }
    else
     var _ds_ = _i_;
    function _dt_(param){
     var
      v = param[2],
      k = param[1],
      _du_ = caml_call2(Stdlib_List[19], pct_decode, v);
     return [0, pct_decode(k), _du_];
    }
    return caml_call2(Stdlib_List[19], _dt_, _ds_);
   }
   function encoded_of_query(scheme, opt, l){
    if(opt)
     var sth = opt[1], pct_encoder$0 = sth;
    else
     var pct_encoder$0 = pct_encoder(0, 0, 0, 0, 0, 0, 0, 0);
    var _di_ = -1;
    function _dj_(a, param){
     var v = param[2], k = param[1], _dn_ = 0;
     function _do_(a, s){return (a + caml_ml_string_length(s) | 0) + 1 | 0;}
     return ((a + caml_ml_string_length(k) | 0)
            + caml_call3(Stdlib_List[25], _do_, _dn_, v)
            | 0)
            + 2
            | 0;
    }
    var
     len = caml_call3(Stdlib_List[25], _dj_, _di_, l),
     buf = caml_call1(Stdlib_Buffer[1], len);
    iter_concat
     (function(buf, param){
       var
        v = param[2],
        k = param[1],
        _dk_ = pct_encode(scheme, [0, pct_encoder$0[5]], k);
       caml_call2(Stdlib_Buffer[16], buf, _dk_);
       var _dl_ = 0 !== v ? 1 : 0;
       return _dl_
               ? (caml_call2
                  (Stdlib_Buffer[12], buf, 61),
                 iter_concat
                  (function(buf, s){
                    var _dm_ = pct_encode(scheme, [0, pct_encoder$0[6]], s);
                    return caml_call2(Stdlib_Buffer[16], buf, _dm_);
                   },
                   cst$8,
                   buf,
                   v))
               : _dl_;
      },
      cst$7,
      buf,
      l);
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function of_raw(qs){
    function _dh_(param){return query_of_encoded(qs);}
    var lazy_query = caml_call1(Stdlib_Lazy[6], _dh_);
    return [1, [0, qs], lazy_query];
   }
   function kv(param){
    if(0 === param[0])
     var kv = param[1];
    else
     var
      _de_ = param[2],
      _df_ = caml_obj_tag(_de_),
      _dg_ =
        250 === _df_
         ? _de_[1]
         : 246 === _df_ ? caml_call1(CamlinternalLazy[2], _de_) : _de_,
      kv = _dg_;
    return kv;
   }
   function encoded_of_query$0(scheme){
    return function(_dc_, _dd_){return encoded_of_query(scheme, _dc_, _dd_);};
   }
   var
    empty = [0, 0, 0, 0, 0, 0, [1, 0, caml_call1(Stdlib_Lazy[4], 0)], 0],
    compare_decoded = Stdlib_String[9];
   function compare_decoded_opt(_da_, _db_){
    return compare_opt(compare_decoded, _da_, _db_);
   }
   function compare_host(h1, h2){
    if(typeof h1 !== "number"){
     var _c$_ = h1[1];
     if(-367671627 === _c$_){
      if(typeof h2 !== "number" && -367671627 === h2[1]){
       var ip2 = h2[2], ip1 = h1[2];
       return caml_call2(Stdlib_String[9], ip1, ip2);
      }
     }
     else
      if(267950263 === _c$_){
       if(typeof h2 !== "number" && 267950263 === h2[1]){
        var ip2$0 = h2[2], ip1$0 = h1[2];
        return caml_call2(Stdlib_String[9], ip1$0, ip2$0);
       }
      }
      else if
       (803994504 === _c$_ && typeof h2 !== "number" && 803994504 === h2[1]){
       var h2$0 = h2[2], h1$0 = h1[2];
       return caml_call2(compare_decoded, h1$0, h2$0);
      }
    }
    return -1;
   }
   function compare$0(t$0, t){
    var c$3 = compare_opt(compare_host, t$0[3], t[3]);
    if(0 !== c$3) return c$3;
    var c = compare_decoded_opt(t$0[1], t[1]);
    if(0 !== c) return c;
    var
     _c8_ = t[4],
     _c9_ = t$0[4],
     c$0 =
       compare_opt
        (function(p$0, p){return p$0 < p ? -1 : p < p$0 ? 1 : 0;}, _c9_, _c8_);
    if(0 !== c$0) return c$0;
    var c$1 = compare_opt(compare, t$0[2], t[2]);
    if(0 !== c$1) return c$1;
    var c$4 = compare_list(_e_, t$0[5], t[5]);
    if(0 !== c$4) return c$4;
    var y = t[6], x = t$0[6];
    a:
    {
     if(0 === x[0]){
      var _c1_ = x[1];
      if(0 === y[0])
       var kvl$0 = y[1], kvl = _c1_;
      else
       var
        _c2_ = y[2],
        _c3_ = caml_obj_tag(_c2_),
        _c4_ =
          250 === _c3_
           ? _c2_[1]
           : 246 === _c3_ ? caml_call1(CamlinternalLazy[2], _c2_) : _c2_,
        kvl$0 = _c4_,
        kvl = _c1_;
     }
     else{
      var _c5_ = x[2], raw = x[1];
      if(0 !== y[0]){
       var raw$0 = y[1], c$2 = compare_opt(Stdlib_String[9], raw, raw$0);
       break a;
      }
      var
       _c6_ = caml_obj_tag(_c5_),
       _c7_ =
         250 === _c6_
          ? _c5_[1]
          : 246 === _c6_ ? caml_call1(CamlinternalLazy[2], _c5_) : _c5_,
       kvl$0 = y[1],
       kvl = _c7_;
     }
     var
      c$2 =
        compare_list
         (function(param, _c__){
           var
            vl = _c__[2],
            k = _c__[1],
            vl$0 = param[2],
            k$0 = param[1],
            c = caml_call2(Stdlib_String[9], k$0, k);
           return 0 === c ? compare_list(Stdlib_String[9], vl$0, vl) : c;
          },
          kvl,
          kvl$0);
    }
    return 0 === c$2 ? compare_decoded_opt(t$0[7], t[7]) : c$2;
   }
   function equal(t$0, t){return 0 === compare$0(t$0, t) ? 1 : 0;}
   function uncast_opt(param){
    if(! param) return 0;
    var h = param[1];
    return [0, h];
   }
   function normalize(schem, init){
    var
     Scheme = module_of_scheme(uncast_opt(schem)),
     _cV_ = init[3],
     _cR_ = init[7],
     _cS_ = init[6],
     _cT_ = init[5],
     _cU_ = init[4];
    if(_cV_){
     var match = _cV_[1], _cW_ = match[1];
     if(267950263 === _cW_)
      var
       host = match[2],
       _cX_ = [0, [0, 267950263, Scheme[2].call(null, host)]];
     else if(803994504 <= _cW_)
      var
       host$0 = match[2],
       _cX_ = [0, [0, 803994504, Scheme[2].call(null, host$0)]];
     else
      var
       host$1 = match[2],
       _cX_ = [0, [0, -367671627, Scheme[2].call(null, host$1)]];
     var _cY_ = _cX_;
    }
    else
     var _cY_ = 0;
    var param = init[1], f = Stdlib_String[26], _cZ_ = init[2];
    if(param)
     var x = param[1], _c0_ = [0, caml_call1(f, x)];
    else
     var _c0_ = 0;
    return [0, _c0_, _cZ_, _cY_, _cU_, _cT_, _cS_, _cR_];
   }
   function to_string(opt, uri){
    if(opt)
     var sth = opt[1], pct_encoder$0 = sth;
    else
     var pct_encoder$0 = pct_encoder(0, 0, 0, 0, 0, 0, 0, 0);
    var match = uri[1];
    if(match) var s = match[1], scheme = [0, s]; else var scheme = 0;
    var buf = caml_call1(Stdlib_Buffer[1], 128);
    function add_pct_string(opt, x){
     if(opt)
      var sth = opt[1], component = sth;
     else
      var component = 892015045;
     var _cQ_ = encode(scheme, [0, component], x);
     return caml_call2(Stdlib_Buffer[16], buf, _cQ_);
    }
    var match$0 = uri[1];
    if(match$0){
     var x = match$0[1];
     add_pct_string([0, pct_encoder$0[1]], x);
     caml_call2(Stdlib_Buffer[12], buf, 58);
    }
    a:
    {
     var _cy_ = uri[3], _cz_ = uri[4];
     if(! uri[2] && ! _cy_ && ! _cz_){var _cA_ = 0; break a;}
     var _cA_ = 1;
    }
    if(_cA_) caml_call2(Stdlib_Buffer[16], buf, cst$9);
    var match$1 = uri[2];
    if(match$1){
     var
      userinfo = match$1[1],
      _cB_ = encoded_of_userinfo(scheme, pct_encoder$0[2])(userinfo);
     caml_call2(Stdlib_Buffer[16], buf, _cB_);
     caml_call2(Stdlib_Buffer[12], buf, 64);
    }
    var _cC_ = uri[3];
    if(_cC_){
     var match$2 = _cC_[1], _cD_ = match$2[1];
     if(267950263 === _cD_){
      var host = match$2[2];
      caml_call2(Stdlib_Buffer[12], buf, 91);
      caml_call2(Stdlib_Buffer[16], buf, host);
      caml_call2(Stdlib_Buffer[12], buf, 93);
     }
     else if(803994504 <= _cD_){
      var host$0 = match$2[2];
      add_pct_string([0, pct_encoder$0[3]], host$0);
     }
     else{var host$1 = match$2[2]; caml_call2(Stdlib_Buffer[16], buf, host$1);
     }
    }
    var match$3 = uri[4];
    if(match$3){
     var port = match$3[1];
     caml_call2(Stdlib_Buffer[12], buf, 58);
     var _cE_ = caml_call1(Stdlib[33], port);
     caml_call2(Stdlib_Buffer[16], buf, _cE_);
    }
    var _cF_ = uri[5];
    if(_cF_){
     var first_segment = _cF_[1];
     if(caml_string_notequal(first_segment, cst$33)){
      if(uri[3])
       caml_call2(Stdlib_Buffer[12], buf, 47);
      else if(caml_call3(Stringext[12], 0, first_segment, cst$10) && ! scheme)
       caml_call2(Stdlib_Buffer[16], buf, cst$11);
      var
       _cG_ = uri[5],
       _cH_ = encoded_of_path(scheme, pct_encoder$0[4])(_cG_);
      caml_call2(Stdlib_Buffer[16], buf, _cH_);
     }
     else{
      var
       _cO_ = uri[5],
       _cP_ = encoded_of_path(scheme, pct_encoder$0[4])(_cO_);
      caml_call2(Stdlib_Buffer[16], buf, _cP_);
     }
    }
    var _cI_ = uri[6];
    a:
    {
     b:
     {
      if(0 === _cI_[0]){
       var _cJ_ = _cI_[1];
       if(_cJ_){var q = _cJ_; break b;}
      }
      else if(_cI_[1]){
       var
        _cL_ = _cI_[2],
        _cM_ = caml_obj_tag(_cL_),
        _cN_ =
          250 === _cM_
           ? _cL_[1]
           : 246 === _cM_ ? caml_call1(CamlinternalLazy[2], _cL_) : _cL_,
        q = _cN_;
       break b;
      }
      break a;
     }
     caml_call2(Stdlib_Buffer[12], buf, 63);
     var _cK_ = encoded_of_query(scheme, [0, pct_encoder$0], q);
     caml_call2(Stdlib_Buffer[16], buf, _cK_);
    }
    var match$4 = uri[7];
    if(match$4){
     var f = match$4[1];
     caml_call2(Stdlib_Buffer[12], buf, 35);
     add_pct_string([0, pct_encoder$0[7]], f);
    }
    return caml_call1(Stdlib_Buffer[2], buf);
   }
   function get_decoded_opt(param){
    if(! param) return 0;
    var x = param[1];
    return [0, x];
   }
   function scheme(uri){return get_decoded_opt(uri[1]);}
   function with_scheme(uri, param){
    if(! param) return [0, 0, uri[2], uri[3], uri[4], uri[5], uri[6], uri[7]];
    var scheme = param[1];
    return [0, [0, scheme], uri[2], uri[3], uri[4], uri[5], uri[6], uri[7]];
   }
   function host(uri){
    var _cx_ = uri[3];
    if(! _cx_) return 0;
    var match = _cx_[1];
    if(803994504 <= match[1]){var h = match[2]; return [0, h];}
    var h$0 = match[2];
    return [0, h$0];
   }
   function host_with_default(opt, uri){
    if(opt)
     var sth = opt[1], default$0 = sth;
    else
     var default$0 = cst_localhost;
    var match = host(uri);
    if(! match) return default$0;
    var h = match[1];
    return h;
   }
   function userinfo(opt, uri){
    if(opt)
     var sth = opt[1], pct_encoder$0 = sth;
    else
     var pct_encoder$0 = pct_encoder(0, 0, 0, 0, 0, 0, 0, 0);
    var match = uri[2];
    if(! match) return 0;
    var userinfo = match[1], match$0 = uri[1];
    if(match$0)
     var
      s = match$0[1],
      _cw_ = encoded_of_userinfo([0, s], pct_encoder$0[2])(userinfo);
    else
     var _cw_ = encoded_of_userinfo(0, pct_encoder$0[2])(userinfo);
    return [0, _cw_];
   }
   function with_userinfo(uri, userinfo){
    if(userinfo)
     var u = userinfo[1], userinfo$0 = [0, userinfo_of_encoded(u)];
    else
     var userinfo$0 = 0;
    return host(uri)
            ? [0, uri[1], userinfo$0, uri[3], uri[4], uri[5], uri[6], uri[7]]
            : [0,
              uri[1],
              userinfo$0,
              [0, [0, 803994504, cst$12]],
              uri[4],
              uri[5],
              uri[6],
              uri[7]];
   }
   function user(uri){
    var _cv_ = uri[2];
    if(! _cv_) return 0;
    var user = _cv_[1][1];
    return [0, user];
   }
   function password(uri){
    var _cu_ = uri[2];
    if(_cu_){
     var match = _cu_[1][2];
     if(match){var pass = match[1]; return [0, pass];}
    }
    return 0;
   }
   function with_password(uri, password){
    function result(userinfo){
     return host(uri)
             ? [0, uri[1], userinfo, uri[3], uri[4], uri[5], uri[6], uri[7]]
             : [0,
               uri[1],
               userinfo,
               [0, [0, 803994504, cst$13]],
               uri[4],
               uri[5],
               uri[6],
               uri[7]];
    }
    var _ct_ = uri[2];
    if(! _ct_) return password ? result([0, [0, cst$14, password]]) : uri;
    var user = _ct_[1][1];
    return result([0, [0, user, password]]);
   }
   function port(uri){return uri[4];}
   function with_port(uri, port){
    return host(uri)
            ? [0, uri[1], uri[2], uri[3], port, uri[5], uri[6], uri[7]]
            : port
              ? [0,
                uri[1],
                uri[2],
                [0, [0, 803994504, cst$15]],
                port,
                uri[5],
                uri[6],
                uri[7]]
              : [0, uri[1], uri[2], 0, 0, uri[5], uri[6], uri[7]];
   }
   function path(opt, uri){
    if(opt)
     var sth = opt[1], pct_encoder$0 = sth;
    else
     var pct_encoder$0 = pct_encoder(0, 0, 0, 0, 0, 0, 0, 0);
    var match = uri[1];
    if(match)
     var
      s = match[1],
      _cq_ = uri[5],
      _cr_ = encoded_of_path([0, s], pct_encoder$0[4])(_cq_);
    else
     var _cs_ = uri[5], _cr_ = encoded_of_path(0, pct_encoder$0[4])(_cs_);
    return _cr_;
   }
   function with_path(uri, path){
    var path$0 = path_of_encoded(path);
    if(host(uri) && path$0 && caml_string_notequal(path$0[1], cst$33))
     return [0,
             uri[1],
             uri[2],
             uri[3],
             uri[4],
             [0, cst$16, path$0],
             uri[6],
             uri[7]];
    return [0, uri[1], uri[2], uri[3], uri[4], path$0, uri[6], uri[7]];
   }
   function fragment(uri){return get_decoded_opt(uri[7]);}
   function with_fragment(uri, param){
    if(! param) return [0, uri[1], uri[2], uri[3], uri[4], uri[5], uri[6], 0];
    var frag = param[1];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], uri[6], [0, frag]];
   }
   function query(uri){return kv(uri[6]);}
   function verbatim_query(opt, uri){
    if(opt)
     var sth = opt[1], pct_encoder$0 = sth;
    else
     var pct_encoder$0 = pct_encoder(0, 0, 0, 0, 0, 0, 0, 0);
    var match = uri[6];
    if(0 === match[0]){
     var kv = match[1];
     return kv
             ? [0, encoded_of_query(scheme(uri), [0, pct_encoder$0], kv)]
             : 0;
    }
    var qs = match[1];
    return qs;
   }
   function get_query_param(uri, k){
    var q = kv(uri[6]);
    try{var _co_ = [0, caml_call2(Stdlib_List[46], k, q)]; return _co_;}
    catch(_cp_){
     var _cn_ = caml_wrap_exception(_cp_);
     if(_cn_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_cn_, 0);
    }
   }
   function get_query_param$0(uri, k){
    var match = get_query_param(uri, k);
    if(! match) return 0;
    var v = match[1];
    return [0, caml_call2(Stdlib_String[6], cst$17, v)];
   }
   function with_query(uri, query){
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], [0, query], uri[7]];
   }
   function q_s(q){
    function _cm_(param){
     var v = param[2], k = param[1];
     return [0, k, [0, v, 0]];
    }
    return caml_call2(Stdlib_List[19], _cm_, q);
   }
   function with_query$0(uri, query){return with_query(uri, q_s(query));}
   function add_query_param(uri, p){
    var _ck_ = uri[7], _cl_ = [0, [0, p, kv(uri[6])]];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _cl_, _ck_];
   }
   function add_query_param$0(uri, param){
    var
     v = param[2],
     k = param[1],
     _ci_ = uri[7],
     _cj_ = [0, [0, [0, k, [0, v, 0]], kv(uri[6])]];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _cj_, _ci_];
   }
   function add_query_params(uri, ps){
    var
     _cf_ = uri[7],
     _cg_ = kv(uri[6]),
     _ch_ = [0, caml_call2(Stdlib[37], ps, _cg_)];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _ch_, _cf_];
   }
   function add_query_params$0(uri, ps){
    var
     _cb_ = uri[7],
     _cc_ = kv(uri[6]),
     _cd_ = q_s(ps),
     _ce_ = [0, caml_call2(Stdlib[37], _cd_, _cc_)];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _ce_, _cb_];
   }
   function remove_query_param(uri, k){
    var _b9_ = uri[7], _b__ = kv(uri[6]);
    function _b$_(param){
     var k$0 = param[1];
     return caml_string_notequal(k, k$0);
    }
    var _ca_ = [0, caml_call2(Stdlib_List[41], _b$_, _b__)];
    return [0, uri[1], uri[2], uri[3], uri[4], uri[5], _ca_, _b9_];
   }
   function path_and_query(uri){
    var p = path(0, uri), match = query(uri);
    if(caml_string_notequal(p, cst$34)){
     if(! match) return p;
     var
      scheme = uncast_opt(uri[1]),
      _b7_ = encoded_of_query$0(scheme)(0, match);
     return caml_call3(Stdlib_Printf[4], _j_, p, _b7_);
    }
    if(! match) return cst$18;
    var
     scheme$0 = uncast_opt(uri[1]),
     _b8_ = encoded_of_query$0(scheme$0)(0, match);
    return caml_call2(Stdlib_Printf[4], _k_, _b8_);
   }
   function resolve(schem, base, uri){
    var match$0 = scheme(base);
    if(match$0)
     var scheme$0 = match$0[1], scheme$1 = scheme$0;
    else
     var scheme$1 = schem;
    var
     schem$0 = [0, scheme$1],
     match$1 = scheme(uri),
     match$2 = userinfo(0, uri);
    a:
    {
     var match$3 = host(uri);
     if(match$1)
      var
       _bQ_ = uri[7],
       _bR_ = uri[6],
       _bS_ = remove_dot_segments(uri[5]),
       _bT_ = [0, uri[1], uri[2], uri[3], uri[4], _bS_, _bR_, _bQ_];
     else{
      if(! match$2 && ! match$3){
       var
        init = [0, base[1], base[2], base[3], base[4], uri[5], uri[6], uri[7]],
        path_str = path(0, init);
       if(caml_string_equal(path_str, cst$34))
        var
         _bX_ = init[7],
         _bY_ = init[6][1] ? init[6] : base[6],
         _bZ_ = [0, init[1], init[2], init[3], init[4], base[5], _bY_, _bX_];
       else if(47 === caml_string_get(path_str, 0))
        var
         _b0_ = init[7],
         _b1_ = init[6],
         _b2_ = remove_dot_segments(init[5]),
         _bZ_ = [0, init[1], init[2], init[3], init[4], _b2_, _b1_, _b0_];
       else{
        var
         relpath = init[5],
         bpath = base[5],
         bhost = base[3],
         _b3_ = init[7],
         _b4_ = init[6],
         match = caml_call1(Stdlib_List[9], bpath);
        b:
        {
         if(bhost && ! match){var _b5_ = [0, cst$6, relpath]; break b;}
         c:
         if(match){
          if(caml_string_notequal(match[1], cst$33)){
           var _bP_ = match[2];
           if(! _bP_) break c;
           if(caml_string_notequal(_bP_[1], cst$33)) break c;
           var rbpath = _bP_[2];
          }
          else
           var rbpath = match[2];
          var _b5_ = caml_call2(Stdlib_List[12], [0, cst$5, rbpath], relpath);
          break b;
         }
         var _b5_ = relpath;
        }
        var
         _b6_ = remove_dot_segments(_b5_),
         _bZ_ = [0, init[1], init[2], init[3], init[4], _b6_, _b4_, _b3_];
       }
       var _bT_ = _bZ_;
       break a;
      }
      var
       _bU_ = uri[7],
       _bV_ = uri[6],
       _bW_ = remove_dot_segments(uri[5]),
       _bT_ = [0, base[1], uri[2], uri[3], uri[4], _bW_, _bV_, _bU_];
     }
    }
    return normalize(schem$0, _bT_);
   }
   function canonicalize(uri){
    var
     uri$0 = resolve(cst$19, empty, uri),
     Scheme = module_of_scheme(uncast_opt(uri$0[1])),
     _bL_ = uri$0[7],
     _bM_ = uri$0[6],
     _bN_ = Scheme[4].call(null, uri$0[5]),
     _bO_ = Scheme[3].call(null, uri$0[4]);
    return [0, uri$0[1], uri$0[2], uri$0[3], _bO_, _bN_, _bM_, _bL_];
   }
   function pp(ppf, uri){
    var _bK_ = to_string(0, uri);
    return caml_call2(Stdlib_Format[13], ppf, _bK_);
   }
   function pp_hum(ppf, uri){
    var _bJ_ = to_string(0, uri);
    return caml_call2(Stdlib_Format[13], ppf, _bJ_);
   }
   var string_of_char = caml_call1(Stdlib_String[1], 1);
   function string_of_char_list(chars){
    var _bI_ = caml_call2(Stdlib_List[19], string_of_char, chars);
    return caml_call2(Stdlib_String[6], cst$20, _bI_);
   }
   var _l_ = caml_call1(Angstrom[51], 0), _m_ = caml_call1(Angstrom[4], 58);
   function _n_(c){
    var _bE_ = 58 !== c ? 1 : 0;
    if(_bE_){
     var _bF_ = 47 !== c ? 1 : 0;
     if(_bF_)
      var _bG_ = 63 !== c ? 1 : 0, _bH_ = _bG_ ? 35 !== c ? 1 : 0 : _bG_;
     else
      var _bH_ = _bF_;
    }
    else
     var _bH_ = _bE_;
    return _bH_;
   }
   var
    _o_ = caml_call1(Angstrom[13], _n_),
    _p_ = caml_call2(Angstrom[59], _o_, _m_);
   function _q_(s){return [0, decode(s)];}
   var
    _r_ = caml_call2(Angstrom[60], _q_, _p_),
    scheme$0 = caml_call2(Angstrom[47], _r_, _l_);
   function is_digit(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   function _s_(param){
    var _bD_ = param - 48 | 0;
    a:
    {
     if(22 < _bD_ >>> 0){
      if(5 < _bD_ - 49 >>> 0) break a;
     }
     else if(6 >= _bD_ - 10 >>> 0) break a;
     return 1;
    }
    return 0;
   }
   var
    hex_digit = caml_call1(Angstrom[7], _s_),
    _t_ = caml_call1(Angstrom[38], hex_digit),
    hexadecimal = caml_call2(Angstrom[60], string_of_char_list, _t_),
    c_dot = caml_call1(Angstrom[4], 46),
    c_at = caml_call1(Angstrom[4], 64),
    c_colon = caml_call1(Angstrom[4], 58);
   function _u_(num){
    return 256 <= caml_int_of_string(num)
            ? caml_call1(Angstrom[52], cst_invalid_octect)
            : caml_call1(Angstrom[51], num);
   }
   function _v_(param){return 9 < param - 48 >>> 0 ? 0 : 1;}
   var
    _w_ = caml_call1(Angstrom[14], _v_),
    dec_octet = caml_call2(Angstrom[53], _w_, _u_),
    _x_ = caml_call2(Angstrom[59], dec_octet, c_dot),
    _y_ = caml_call2(Angstrom[37], 3, _x_);
   function _z_(three, one){
    var
     _bB_ = caml_call2(Stdlib[28], cst$21, one),
     _bC_ = caml_call2(Stdlib_String[6], cst$22, three);
    return caml_call2(Stdlib[28], _bC_, _bB_);
   }
   var ipv4_address = caml_call3(Angstrom[61], _z_, _y_, dec_octet);
   function _A_(f){
    var
     _bv_ = caml_call1(Angstrom[51], 0),
     _bw_ = caml_call2(Angstrom[58], c_colon, f),
     _bx_ = caml_call2(Angstrom[47], _bw_, _bv_);
    function _by_(x, y){return [0, x, y];}
    var
     _bz_ = caml_call3(Angstrom[61], _by_, hexadecimal, _bx_),
     _bA_ = caml_call1(Angstrom[36], [0, ipv4_address, 0]);
    return caml_call2(Angstrom[47], _bA_, _bz_);
   }
   var after_double_colon = caml_call1(Angstrom[45], _A_);
   function double_colon(count){
    var _bs_ = caml_call1(Angstrom[51], _B_);
    function _bt_(rest){
     var
      filler_length = (8 - count | 0) - caml_call1(Stdlib_List[1], rest) | 0;
     return 0 < filler_length
             ? caml_call1(Angstrom[51], [0, cst$23, rest])
             : caml_call1(Angstrom[52], cst_too_many_parts_in_IPv6_add);
    }
    var _bu_ = caml_call2(Angstrom[53], after_double_colon, _bt_);
    return caml_call2(Angstrom[47], _bu_, _bs_);
   }
   function part(n){
    if(6 === n){
     var
      _bp_ = hex_part(6),
      _bq_ = caml_call1(Angstrom[36], [0, ipv4_address, 0]);
     return caml_call2(Angstrom[47], _bq_, _bp_);
    }
    if(7 !== n) return hex_part(n);
    function _br_(x){return [0, x, 0];}
    return caml_call2(Angstrom[60], _br_, hexadecimal);
   }
   function hex_part(n){
    var
     _bj_ = part(n + 1 | 0),
     _bk_ = double_colon(n + 1 | 0),
     _bl_ = caml_call2(Angstrom[58], c_colon, _bk_),
     _bm_ = caml_call2(Angstrom[47], _bl_, _bj_),
     _bn_ = caml_call2(Angstrom[58], c_colon, _bm_);
    function _bo_(x, y){return [0, x, y];}
    return caml_call3(Angstrom[61], _bo_, hexadecimal, _bn_);
   }
   function split_with(f, xs){
    if(! xs) return _C_;
    var ys = xs[2], y = xs[1];
    if(! caml_call1(f, y)) return [0, 0, xs];
    var match = split_with(f, ys), ts = match[2], zs = match[1];
    return [0, [0, y, zs], ts];
   }
   function format_addr(segments){
    var
     match =
       split_with
        (function(segment){return caml_string_notequal(segment, cst$34);},
         segments),
     after_double_colon = match[2],
     before_double_colon = match[1],
     before = caml_call2(Stdlib_String[6], cst$24, before_double_colon);
    a:
    {
     if
      (after_double_colon
       && ! caml_string_notequal(after_double_colon[1], cst$34)){
      var
       xs = after_double_colon[2],
       _bh_ = caml_call2(Stdlib_String[6], cst$25, xs),
       _bi_ = caml_call2(Stdlib[28], cst$26, _bh_),
       res = caml_call2(Stdlib[28], before, _bi_);
      break a;
     }
     var res = before;
    }
    return res;
   }
   var
    _D_ = part(0),
    _E_ = double_colon(0),
    _F_ = caml_call2(Angstrom[58], c_colon, c_colon),
    _G_ = caml_call2(Angstrom[58], _F_, _E_),
    _H_ = caml_call2(Angstrom[47], _G_, _D_),
    ipv6 = caml_call2(Angstrom[60], format_addr, _H_),
    _I_ = caml_call1(Angstrom[4], 93),
    _J_ = caml_call1(Angstrom[4], 91),
    _K_ = caml_call2(Angstrom[58], _J_, ipv6),
    ipv6_address = caml_call2(Angstrom[59], _K_, _I_),
    _L_ = caml_call2(Angstrom[37], 2, hex_digit),
    _M_ = caml_call1(Angstrom[4], 37);
   function _N_(pct, digits){return string_of_char_list([0, pct, digits]);}
   var pct_encoded = caml_call3(Angstrom[61], _N_, _M_, _L_);
   function _O_(param){
    var _bf_ = param - 59 | 0;
    a:
    {
     if(2 < _bf_ >>> 0){
      var _bg_ = _bf_ + 26 | 0;
      if(11 < _bg_ >>> 0) break a;
      switch(_bg_){case 1:case 2:case 4: break a;
      }
     }
     else if(1 === _bf_) break a;
     return 1;
    }
    return 0;
   }
   var sub_delims$0 = caml_call1(Angstrom[7], _O_);
   function _P_(param){
    a:
    {
     if(91 <= param){
      var _bd_ = param - 95 | 0;
      if(27 < _bd_ >>> 0){
       if(31 !== _bd_) break a;
      }
      else if(1 === _bd_) break a;
     }
     else{
      var _be_ = param - 45 | 0;
      if(12 < _be_ >>> 0){if(20 > _be_) break a;} else if(2 === _be_) break a;
     }
     return 1;
    }
    return 0;
   }
   var
    unreserved = caml_call1(Angstrom[7], _P_),
    _Q_ =
      [0,
       pct_encoded,
       [0, caml_call2(Angstrom[57], string_of_char, sub_delims$0), 0]],
    _R_ = [0, caml_call2(Angstrom[57], string_of_char, unreserved), _Q_],
    _S_ = caml_call2(Angstrom[48], 0, _R_),
    _T_ = caml_call1(Angstrom[38], _S_),
    _U_ = caml_call1(Stdlib_String[6], cst$27),
    reg_name = caml_call2(Angstrom[60], _U_, _T_),
    _V_ = 0;
   function _W_(s){return [0, 803994504, decode(s)];}
   var _X_ = [0, caml_call2(Angstrom[55], reg_name, _W_), _V_];
   function _Y_(h){return [0, 267950263, h];}
   var _Z_ = [0, caml_call2(Angstrom[55], ipv6_address, _Y_), _X_];
   function ___(h){return [0, -367671627, h];}
   var
    _$_ = [0, caml_call2(Angstrom[55], ipv4_address, ___), _Z_],
    host$0 = caml_call2(Angstrom[48], 0, _$_),
    _aa_ = caml_call1(Angstrom[51], 0),
    _ab_ = [0, caml_call2(Angstrom[57], string_of_char, c_colon), 0],
    _ac_ =
      [0,
       pct_encoded,
       [0, caml_call2(Angstrom[57], string_of_char, sub_delims$0), _ab_]],
    _ad_ = [0, caml_call2(Angstrom[57], string_of_char, unreserved), _ac_],
    _ae_ = caml_call2(Angstrom[48], 0, _ad_),
    _af_ = caml_call1(Angstrom[38], _ae_),
    _ag_ = caml_call2(Angstrom[59], _af_, c_at);
   function _ah_(x){
    var s = caml_call2(Stdlib_String[6], cst$28, x);
    return [0, userinfo_of_encoded(s)];
   }
   var
    _ai_ = caml_call2(Angstrom[60], _ah_, _ag_),
    userinfo$0 = caml_call2(Angstrom[47], _ai_, _aa_);
   function _aj_(param){
    if(param && 58 === param[1]){
     var
      _a__ =
        function(port){
         var decoded = decode(port);
         try{var _bb_ = [0, caml_int_of_string(decoded)]; return _bb_;}
         catch(_bc_){return 0;}
        },
      _a$_ = caml_call1(Angstrom[13], is_digit),
      _ba_ = caml_call2(Angstrom[58], c_colon, _a$_);
     return caml_call2(Angstrom[55], _ba_, _a__);
    }
    return caml_call1(Angstrom[51], 0);
   }
   var
    port$0 = caml_call2(Angstrom[53], Angstrom[1], _aj_),
    _al_ = caml_call1(Angstrom[51], _ak_);
   function _am_(userinfo, host, port){return [0, userinfo, [0, host], port];}
   var
    _an_ = caml_call4(Angstrom[62], _am_, userinfo$0, host$0, port$0),
    _ao_ = caml_call1(Angstrom[8], cst$29),
    _ap_ = caml_call2(Angstrom[58], _ao_, _an_),
    authority = caml_call2(Angstrom[47], _ap_, _al_);
   function _aq_(param){if(35 !== param && 63 !== param) return 1; return 0;}
   var
    _ar_ = caml_call1(Angstrom[13], _aq_),
    path$0 = caml_call2(Angstrom[60], path_of_encoded, _ar_),
    _as_ = [1, 0, caml_call1(Stdlib_Lazy[4], 0)],
    _at_ = caml_call1(Angstrom[51], _as_);
   function _au_(param){return 35 === param ? 1 : 0;}
   var
    _av_ = caml_call1(Angstrom[15], _au_),
    _aw_ = caml_call1(Angstrom[4], 63),
    _ax_ = caml_call2(Angstrom[58], _aw_, _av_),
    _ay_ = caml_call2(Angstrom[60], of_raw, _ax_),
    query$0 = caml_call2(Angstrom[47], _ay_, _at_),
    _az_ = caml_call1(Angstrom[51], 0);
   function _aA_(param){return 1;}
   var
    _aB_ = caml_call1(Angstrom[13], _aA_),
    _aC_ = caml_call1(Angstrom[4], 35),
    _aD_ = caml_call2(Angstrom[58], _aC_, _aB_);
   function _aE_(s){return [0, decode(s)];}
   var
    _aF_ = caml_call2(Angstrom[60], _aE_, _aD_),
    fragment$0 = caml_call2(Angstrom[47], _aF_, _az_);
   function _aG_(scheme, param, path, query, fragment){
    var port = param[3], host = param[2], userinfo = param[1];
    return normalize
            (scheme, [0, scheme, userinfo, host, port, path, query, fragment]);
   }
   var
    _aH_ =
      caml_call5(Angstrom[63], _aG_, scheme$0, authority, path$0, query$0),
    uri_reference = caml_call2(Angstrom[56], _aH_, fragment$0);
   function _aI_(s){
    var match = caml_call3(Angstrom[75], 1, uri_reference, s);
    if(0 !== match[0]) return empty;
    var t = match[1];
    return t;
   }
   function _aJ_(param){return 10 === param ? 0 : 1;}
   var
    _aK_ = caml_call1(Angstrom[13], _aJ_),
    uri_reference$0 = caml_call2(Angstrom[55], _aK_, _aI_);
   function decode_host(host){
    var match = caml_call3(Angstrom[75], 1, host$0, host);
    if(0 === match[0]){var parsed = match[1]; return parsed;}
    var match$0 = caml_call3(Angstrom[75], 1, ipv6, host);
    if(0 !== match$0[0]) return [0, 803994504, host];
    var parsed$0 = match$0[1];
    return [0, 267950263, parsed$0];
   }
   function make(scheme, userinfo, host, port, path, query, fragment, param){
    function decode(param){
     if(! param) return 0;
     var x = param[1];
     return [0, x];
    }
    a:
    {
     b:
     if(! host){if(! port && ! userinfo) break b; var host$0 = _aM_; break a;}
     var host$0 = host;
    }
    if(userinfo)
     var u = userinfo[1], userinfo$0 = [0, userinfo_of_encoded(u)];
    else
     var userinfo$0 = 0;
    if(path){
     var p = path[1], path$0 = path_of_encoded(p);
     a:
     {
      if(host$0 && path$0 && caml_string_notequal(path$0[1], cst$33)){var _a7_ = [0, cst$30, path$0]; break a;}
      var _a7_ = path$0;
     }
     var path$1 = _a7_;
    }
    else
     var path$1 = 0;
    if(query) var p$0 = query[1], query$0 = [0, p$0]; else var query$0 = _aL_;
    var scheme$0 = decode(scheme), _a8_ = decode(fragment);
    if(host$0)
     var host$1 = host$0[1], _a9_ = [0, decode_host(host$1)];
    else
     var _a9_ = 0;
    return normalize
            (scheme$0,
             [0, scheme$0, userinfo$0, _a9_, port, path$1, query$0, _a8_]);
   }
   function with_host(init, host){
    var _a2_ = init[7], _a3_ = init[6], _a4_ = init[5], _a5_ = init[4];
    if(host)
     var host$0 = host[1], _a6_ = [0, decode_host(host$0)];
    else
     var _a6_ = 0;
    return [0, init[1], init[2], _a6_, _a5_, _a4_, _a3_, _a2_];
   }
   function with_uri(scheme, userinfo, host, port, path, query, fragment, uri){
    function with_path_opt(u, o){
     if(! o) return with_path(u, cst$31);
     var p = o[1];
     return with_path(u, p);
    }
    function with_query_opt(u, o){
     if(! o) return with_query(u, 0);
     var q = o[1];
     return with_query(u, q);
    }
    function with$0(f, o, u){
     if(! o) return u;
     var x = o[1];
     return caml_call2(f, u, x);
    }
    return with$0
            (with_fragment,
             fragment,
             with$0
              (with_query_opt,
               query,
               with$0
                (with_path_opt,
                 path,
                 with$0
                  (with_port,
                   port,
                   with$0
                    (with_host,
                     host,
                     with$0
                      (with_userinfo, userinfo, with$0(with_scheme, scheme, uri)))))));
   }
   function of_string(s){
    var match = caml_call3(Angstrom[75], 0, uri_reference$0, s);
    if(0 !== match[0]) return empty;
    var t = match[1];
    return t;
   }
   var let$0 = Stdlib_Result[6];
   function to_uri(param){
    var
     fragment = param[7],
     query = param[6],
     path = param[5],
     port = param[4],
     host = param[3],
     userinfo = param[2],
     scheme = param[1],
     scheme$0 = 804243368 <= scheme ? cst_http : cst_https;
    return [0,
            [0, scheme$0],
            userinfo,
            [0, host],
            port,
            path,
            query,
            fragment];
   }
   function of_uri(param){
    var
     fragment = param[7],
     query = param[6],
     path = param[5],
     port = param[4],
     host = param[3],
     userinfo = param[2],
     scheme = param[1];
    function _aY_(scheme){
     function _a1_(host){
      return [0, [0, scheme, userinfo, host, port, path, query, fragment]];
     }
     return caml_call2(let$0, caml_call2(Stdlib_Option[14], _aN_, host), _a1_);
    }
    if(scheme)
     var
      unsupported_scheme = scheme[1],
      _aZ_ =
        caml_string_notequal(unsupported_scheme, cst_http$0)
         ? caml_string_notequal
            (unsupported_scheme, cst_https$0)
           ? [1,
             [0,
              3854881,
              caml_call2(Stdlib_Printf[4], _aO_, unsupported_scheme)]]
           : _aP_
         : _aQ_,
      _a0_ = _aZ_;
    else
     var _a0_ = _aR_;
    return caml_call2(let$0, _a0_, _aY_);
   }
   function of_string$0(s){
    var match = of_uri(of_string(s));
    if(0 === match[0]){var t = match[1]; return t;}
    var error = match[1][2];
    return caml_call1(Stdlib[2], error);
   }
   function to_string$0(pct_encoder, t){
    return to_string(pct_encoder, to_uri(t));
   }
   function make$0
   (scheme, host$2, userinfo, port, path, query, fragment, param){
    if(userinfo)
     var u = userinfo[1], userinfo$0 = [0, userinfo_of_encoded(u)];
    else
     var userinfo$0 = 0;
    if(path){
     var p = path[1], path$0 = path_of_encoded(p);
     a:
     {
      if(path$0 && caml_string_notequal(path$0[1], cst$33)){var _aW_ = [0, cst$32, path$0]; break a;}
      var _aW_ = path$0;
     }
     var path$1 = _aW_;
    }
    else
     var path$1 = 0;
    if(query) var p$0 = query[1], query$0 = [0, p$0]; else var query$0 = _aS_;
    if(fragment) var x = fragment[1], _aX_ = [0, x]; else var _aX_ = 0;
    var match = decode_host(host$2), _aU_ = match[1];
    if(267950263 === _aU_)
     var
      host = match[2],
      _aV_ = [0, 267950263, caml_call1(Stdlib_String[26], host)];
    else if(803994504 <= _aU_)
     var
      host$0 = match[2],
      _aV_ = [0, 803994504, caml_call1(Stdlib_String[26], host$0)];
    else
     var
      host$1 = match[2],
      _aV_ = [0, -367671627, caml_call1(Stdlib_String[26], host$1)];
    return [0, scheme, userinfo$0, _aV_, port, path$1, query$0, _aX_];
   }
   function host$1(t){
    var match = t[3];
    if(803994504 <= match[1]){var h = match[2]; return h;}
    var h$0 = match[2];
    return h$0;
   }
   function scheme$1(t){return t[1];}
   var
    Uri =
      [0,
       empty,
       compare$0,
       equal,
       pct_encode,
       pct_encoder,
       pct_decode,
       of_string,
       to_string,
       resolve,
       canonicalize,
       make,
       with_uri,
       query,
       verbatim_query,
       encoded_of_query$0,
       query_of_encoded,
       with_query,
       with_query$0,
       get_query_param,
       get_query_param$0,
       add_query_param,
       add_query_param$0,
       add_query_params,
       add_query_params$0,
       remove_query_param,
       path,
       path_and_query,
       with_path,
       scheme,
       with_scheme,
       userinfo,
       with_userinfo,
       user,
       password,
       with_password,
       host,
       with_host,
       host_with_default,
       port,
       with_port,
       fragment,
       with_fragment,
       pp,
       pp_hum,
       [0, ipv6, uri_reference$0],
       [0, of_uri, to_uri, of_string$0, to_string$0, make$0, host$1, scheme$1]];
   runtime.caml_register_global(107, Uri, "Uri");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
