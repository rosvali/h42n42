// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Lwt_log_js__
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Lwt_log_js = [0],
    Lwt_log_js$0 = [0, Lwt_log_js];
   runtime.caml_register_global(0, Lwt_log_js$0, "Lwt_log_js__");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_log_js__Import
//# unitInfo: Requires: Stdlib__Char, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    concat = Stdlib_String[6],
    cat = Stdlib_String[7],
    compare$0 = Stdlib_String[9],
    starts_with = Stdlib_String[10],
    ends_with = Stdlib_String[11],
    contains_from = Stdlib_String[12],
    rcontains_from = Stdlib_String[13],
    contains = Stdlib_String[14],
    sub = Stdlib_String[15],
    split_on_char = Stdlib_String[16],
    map = Stdlib_String[17],
    mapi = Stdlib_String[18],
    fold_left = Stdlib_String[19],
    fold_right = Stdlib_String[20],
    for_all = Stdlib_String[21],
    exists = Stdlib_String[22],
    trim = Stdlib_String[23],
    escaped = Stdlib_String[24],
    uppercase_ascii = Stdlib_String[25],
    lowercase_ascii = Stdlib_String[26],
    capitalize_ascii = Stdlib_String[27],
    uncapitalize_ascii = Stdlib_String[28],
    iter = Stdlib_String[29],
    iteri = Stdlib_String[30],
    index_from = Stdlib_String[31],
    index_from_opt = Stdlib_String[32],
    rindex_from = Stdlib_String[33],
    rindex_from_opt = Stdlib_String[34],
    index = Stdlib_String[35],
    index_opt = Stdlib_String[36],
    rindex = Stdlib_String[37],
    rindex_opt = Stdlib_String[38],
    to_seq = Stdlib_String[39],
    to_seqi = Stdlib_String[40],
    of_seq = Stdlib_String[41],
    get_utf_8_uchar = Stdlib_String[42],
    is_valid_utf_8 = Stdlib_String[43],
    get_utf_16be_uchar = Stdlib_String[44],
    is_valid_utf_16be = Stdlib_String[45],
    get_utf_16le_uchar = Stdlib_String[46],
    is_valid_utf_16le = Stdlib_String[47],
    blit = Stdlib_String[48],
    copy = Stdlib_String[49],
    fill = Stdlib_String[50],
    uppercase = Stdlib_String[51],
    lowercase = Stdlib_String[52],
    capitalize = Stdlib_String[53],
    uncapitalize = Stdlib_String[54],
    get_uint8 = Stdlib_String[55],
    get_int8 = Stdlib_String[56],
    get_uint16_ne = Stdlib_String[57],
    get_uint16_be = Stdlib_String[58],
    get_uint16_le = Stdlib_String[59],
    get_int16_ne = Stdlib_String[60],
    get_int16_be = Stdlib_String[61],
    get_int16_le = Stdlib_String[62],
    get_int32_ne = Stdlib_String[63],
    get_int32_be = Stdlib_String[64],
    get_int32_le = Stdlib_String[65],
    get_int64_ne = Stdlib_String[66],
    get_int64_be = Stdlib_String[67],
    get_int64_le = Stdlib_String[68],
    equal$0 = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       concat,
       cat,
       compare$0,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       blit,
       copy,
       fill,
       uppercase,
       lowercase,
       capitalize,
       uncapitalize,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal$0],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase$0 = Stdlib_Char[3],
    uppercase$0 = Stdlib_Char[4],
    lowercase_ascii$0 = Stdlib_Char[5],
    uppercase_ascii$0 = Stdlib_Char[6],
    compare$1 = Stdlib_Char[7];
   function equal$1(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase$0,
       uppercase$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       equal$1],
    symbol$5 = Int_replace_polymorphic_compar[1],
    symbol$6 = Int_replace_polymorphic_compar[2],
    symbol$7 = Int_replace_polymorphic_compar[3],
    symbol$8 = Int_replace_polymorphic_compar[4],
    symbol$9 = Int_replace_polymorphic_compar[5],
    symbol$10 = Int_replace_polymorphic_compar[6],
    compare$2 = Int_replace_polymorphic_compar[7],
    equal$2 = Int_replace_polymorphic_compar[8],
    max$0 = Int_replace_polymorphic_compar[9],
    min$0 = Int_replace_polymorphic_compar[10],
    Lwt_log_js_Import =
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       symbol$9,
       symbol$10,
       compare$2,
       equal$2,
       max$0,
       min$0];
   runtime.caml_register_global(2, Lwt_log_js_Import, "Lwt_log_js__Import");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_log_js
//# unitInfo: Requires: Js_of_ocaml__Firebug, Js_of_ocaml__Js, Lwt, Lwt_log_core, Lwt_log_js__Import, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\n",
    Stdlib_Printf = global_data.Stdlib__Printf,
    Lwt = global_data.Lwt,
    Lwt_log_js_Import = global_data.Lwt_log_js__Import,
    Js_of_ocaml_Firebug = global_data.Js_of_ocaml__Firebug,
    Lwt_log_core = global_data.Lwt_log_core,
    string_of_level = Lwt_log_core[1],
    level_of_string = Lwt_log_core[2],
    load_rules = Lwt_log_core[3],
    add_rule = Lwt_log_core[4],
    append_rule = Lwt_log_core[5],
    reset_rules = Lwt_log_core[6],
    log = Lwt_log_core[7],
    Section = Lwt_log_core[35],
    render = Lwt_log_core[36],
    location_key = Lwt_log_core[37],
    Logger_closed = Lwt_log_core[38],
    make = Lwt_log_core[39],
    close = Lwt_log_core[40],
    default$0 = Lwt_log_core[41],
    broadcast = Lwt_log_core[42],
    dispatch = Lwt_log_core[43],
    null$0 = Lwt_log_core[44],
    js_val = caml_call1(Lwt[49], 0),
    _b_ = [0, [12, 91, [2, 0, [11, "] ", [2, 0, 0]]]], "[%s] %s"];
   function _a_(param){return Lwt[36];}
   var
    console =
      caml_call2
       (make,
        function(section, level, logs){
         var
          _H_ = caml_call2(Lwt_log_js_Import[3][6], cst, logs),
          _I_ = caml_call1(Section[2], section),
          str =
            runtime.caml_jsstring_of_string
             (caml_call3(Stdlib_Printf[4], _b_, _I_, _H_)),
          match = caml_call1(Lwt[50], js_val);
         switch(level){
           case 0:
            if(match){
             var v = match[1];
             Js_of_ocaml_Firebug[1].debug(str, v);
            }
            else
             Js_of_ocaml_Firebug[1].debug(str);
            break;
           case 3:
            if(match){
             var v$1 = match[1];
             Js_of_ocaml_Firebug[1].warn(str, v$1);
            }
            else
             Js_of_ocaml_Firebug[1].warn(str);
            break;
           case 1:
           case 2:
            if(match){
             var v$0 = match[1];
             Js_of_ocaml_Firebug[1].info(str, v$0);
            }
            else
             Js_of_ocaml_Firebug[1].info(str);
            break;
           default:
            if(match){
             var v$2 = match[1];
             Js_of_ocaml_Firebug[1].error(str, v$2);
            }
            else
             Js_of_ocaml_Firebug[1].error(str);
         }
         return Lwt[36];
        },
        _a_);
   function log$0(inspect, exn, section, location, logger, level, message){
    if(inspect)
     var v = inspect[1], inspect$0 = [0, v];
    else
     var inspect$0 = 0;
    function _G_(param){
     return caml_call6(log, exn, section, location, logger, level, message);
    }
    return caml_call3(Lwt[51], js_val, inspect$0, _G_);
   }
   function log_f(inspect, exn, section, location, logger, level, format){
    function _E_(_F_){
     return log$0(inspect, exn, section, location, logger, level, _F_);
    }
    return caml_call2(Stdlib_Printf[10], _E_, format);
   }
   function ign_log(inspect, exn, section, location, logger, level, message){
    try{
     log$0(inspect, exn, section, location, logger, level, message);
     var _C_ = 0;
     return _C_;
    }
    catch(_D_){return 0;}
   }
   function ign_log_f(inspect, exn, section, location, logger, level, format){
    function _A_(_B_){
     return ign_log(inspect, exn, section, location, logger, level, _B_);
    }
    return caml_call2(Stdlib_Printf[10], _A_, format);
   }
   function debug(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 0, msg);
   }
   function debug_f(inspect, exn, section, location, logger, fmt){
    function _y_(_z_){
     return debug(inspect, exn, section, location, logger, _z_);
    }
    return caml_call2(Stdlib_Printf[10], _y_, fmt);
   }
   function info(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 1, msg);
   }
   function info_f(inspect, exn, section, location, logger, fmt){
    function _w_(_x_){
     return info(inspect, exn, section, location, logger, _x_);
    }
    return caml_call2(Stdlib_Printf[10], _w_, fmt);
   }
   function notice(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 2, msg);
   }
   function notice_f(inspect, exn, section, location, logger, fmt){
    function _u_(_v_){
     return notice(inspect, exn, section, location, logger, _v_);
    }
    return caml_call2(Stdlib_Printf[10], _u_, fmt);
   }
   function warning(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 3, msg);
   }
   function warning_f(inspect, exn, section, location, logger, fmt){
    function _s_(_t_){
     return warning(inspect, exn, section, location, logger, _t_);
    }
    return caml_call2(Stdlib_Printf[10], _s_, fmt);
   }
   function error(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 4, msg);
   }
   function error_f(inspect, exn, section, location, logger, fmt){
    function _q_(_r_){
     return error(inspect, exn, section, location, logger, _r_);
    }
    return caml_call2(Stdlib_Printf[10], _q_, fmt);
   }
   function fatal(inspect, exn, section, location, logger, msg){
    return log$0(inspect, exn, section, location, logger, 5, msg);
   }
   function fatal_f(inspect, exn, section, location, logger, fmt){
    function _o_(_p_){
     return fatal(inspect, exn, section, location, logger, _p_);
    }
    return caml_call2(Stdlib_Printf[10], _o_, fmt);
   }
   function ign_debug(inspect, exn, section, location, logger, msg){
    return ign_log(inspect, exn, section, location, logger, 0, msg);
   }
   function ign_debug_f(inspect, exn, section, location, logger, fmt){
    function _m_(_n_){
     return ign_debug(inspect, exn, section, location, logger, _n_);
    }
    return caml_call2(Stdlib_Printf[10], _m_, fmt);
   }
   function ign_info(inspect, exn, section, location, logger, msg){
    return ign_log(inspect, exn, section, location, logger, 1, msg);
   }
   function ign_info_f(inspect, exn, section, location, logger, fmt){
    function _k_(_l_){
     return ign_info(inspect, exn, section, location, logger, _l_);
    }
    return caml_call2(Stdlib_Printf[10], _k_, fmt);
   }
   function ign_notice(inspect, exn, section, location, logger, msg){return ign_log(inspect, exn, section, location, logger, 2, msg);
   }
   function ign_notice_f(inspect, exn, section, location, logger, fmt){
    function _i_(_j_){
     return ign_notice(inspect, exn, section, location, logger, _j_);
    }
    return caml_call2(Stdlib_Printf[10], _i_, fmt);
   }
   function ign_warning(inspect, exn, section, location, logger, msg){return ign_log(inspect, exn, section, location, logger, 3, msg);
   }
   function ign_warning_f(inspect, exn, section, location, logger, fmt){
    function _g_(_h_){
     return ign_warning(inspect, exn, section, location, logger, _h_);
    }
    return caml_call2(Stdlib_Printf[10], _g_, fmt);
   }
   function ign_error(inspect, exn, section, location, logger, msg){
    return ign_log(inspect, exn, section, location, logger, 4, msg);
   }
   function ign_error_f(inspect, exn, section, location, logger, fmt){
    function _e_(_f_){
     return ign_error(inspect, exn, section, location, logger, _f_);
    }
    return caml_call2(Stdlib_Printf[10], _e_, fmt);
   }
   function ign_fatal(inspect, exn, section, location, logger, msg){
    return ign_log(inspect, exn, section, location, logger, 5, msg);
   }
   function ign_fatal_f(inspect, exn, section, location, logger, fmt){
    function _c_(_d_){
     return ign_fatal(inspect, exn, section, location, logger, _d_);
    }
    return caml_call2(Stdlib_Printf[10], _c_, fmt);
   }
   var
    Lwt_log_js =
      [0,
       string_of_level,
       level_of_string,
       load_rules,
       add_rule,
       append_rule,
       reset_rules,
       Section,
       render,
       location_key,
       Logger_closed,
       make,
       close,
       default$0,
       broadcast,
       dispatch,
       null$0,
       console,
       log$0,
       log_f,
       ign_log,
       ign_log_f,
       debug,
       debug_f,
       ign_debug,
       ign_debug_f,
       info,
       info_f,
       ign_info,
       ign_info_f,
       notice,
       notice_f,
       ign_notice,
       ign_notice_f,
       warning,
       warning_f,
       ign_warning,
       ign_warning_f,
       error,
       error_f,
       ign_error,
       ign_error_f,
       fatal,
       fatal_f,
       ign_fatal,
       ign_fatal_f];
   runtime.caml_register_global(15, Lwt_log_js, "Lwt_log_js");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLjAsImZpbGUiOiJsd3RfbG9nX2pzLmNtYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJuYW1lcyI6WyJzeW1ib2wiLCJ4IiwieSIsInN5bWJvbCQwIiwic3ltYm9sJDEiLCJzeW1ib2wkMiIsInN5bWJvbCQzIiwic3ltYm9sJDQiLCJjb21wYXJlIiwiZXF1YWwiLCJtYXgiLCJtaW4iLCJlcXVhbCQwIiwiZXF1YWwkMSIsInN5bWJvbCQ1Iiwic3ltYm9sJDYiLCJzeW1ib2wkNyIsInN5bWJvbCQ4Iiwic3ltYm9sJDkiLCJzeW1ib2wkMTAiLCJjb21wYXJlJDIiLCJlcXVhbCQyIiwibWF4JDAiLCJtaW4kMCIsImpzX3ZhbCIsImNvbnNvbGUiLCJzZWN0aW9uIiwibGV2ZWwiLCJsb2dzIiwic3RyIiwidiIsInYkMSIsInYkMCIsInYkMiIsImxvZyQwIiwiaW5zcGVjdCIsImV4biIsImxvY2F0aW9uIiwibG9nZ2VyIiwibWVzc2FnZSIsImluc3BlY3QkMCIsImxvZ19mIiwiZm9ybWF0IiwiaWduX2xvZyIsImlnbl9sb2dfZiIsImRlYnVnIiwibXNnIiwiZGVidWdfZiIsImZtdCIsImluZm8iLCJpbmZvX2YiLCJub3RpY2UiLCJub3RpY2VfZiIsIndhcm5pbmciLCJ3YXJuaW5nX2YiLCJlcnJvciIsImVycm9yX2YiLCJmYXRhbCIsImZhdGFsX2YiLCJpZ25fZGVidWciLCJpZ25fZGVidWdfZiIsImlnbl9pbmZvIiwiaWduX2luZm9fZiIsImlnbl9ub3RpY2UiLCJpZ25fbm90aWNlX2YiLCJpZ25fd2FybmluZyIsImlnbl93YXJuaW5nX2YiLCJpZ25fZXJyb3IiLCJpZ25fZXJyb3JfZiIsImlnbl9mYXRhbCIsImlnbl9mYXRhbF9mIl0sInNvdXJjZXMiOlsiL1VzZXJzL3Jvc3ZhbGkvLm9wYW0vNC4xNC4xL2xpYi9qc19vZl9vY2FtbC1sd3QvbG9nZ2VyL2x3dF9sb2dfanNfXy5tbCIsIi9Vc2Vycy9yb3N2YWxpLy5vcGFtLzQuMTQuMS9saWIvanNfb2Zfb2NhbWwtbHd0L2xvZ2dlci9pbXBvcnQubWwiLCIvVXNlcnMvcm9zdmFsaS8ub3BhbS80LjE0LjEvbGliL2pzX29mX29jYW1sLWx3dC9sb2dnZXIvbHd0X2xvZ19qcy5tbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztHQUtzQjs7SUFBQTs7OztFOzs7Ozs7OztHQ2FSOzs7OztJQUFBO1lBbUJSQSxPQUFPQyxHQUFTQyxHQUFJLE9BQWJELElBQVNDLFVBQVM7WUFFekJDLFNBQVFGLEdBQVNDLEdBQUksT0FBYkQsS0FBU0MsVUFBVTtZQUUzQkUsU0FBUUgsR0FBU0MsR0FBSSxPQUFiRCxNQUFTQyxVQUFVO1lBRTNCRyxTQUFPSixHQUFTQyxHQUFJLE9BQWJELE1BQVNDLFVBQVM7WUFFekJJLFNBQU9MLEdBQVNDLEdBQUksT0FBSkEsSUFBVEQsVUFBa0I7WUFFekJNLFNBQVFOLEdBQVNDLEdBQUksT0FBSkEsS0FBVEQsVUFBbUI7T0FFM0JPO1lBRUFDLE1BQU9SLEdBQVNDLEdBQUksT0FBYkQsTUFBU0MsVUFBUztZQUV6QlEsSUFBS1QsR0FBU0MsR0FBSSxPQUFKQSxLQUFURCxJQUFBQSxJQUFTQyxFQUEyQjtZQUV6Q1MsSUFBS1YsR0FBU0MsR0FBSSxPQUFiRCxLQUFTQyxJQUFURCxJQUFTQyxFQUEyQjtHQW5CTjtJQUFBOztPQUNuQ0Y7T0FFQUc7T0FFQUM7T0FFQUM7T0FFQUM7T0FFQUM7T0FFQUM7T0FFQUM7T0FFQUM7T0FFQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lBTUFDO0lBSFU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQUdWQTs7Ozs7Ozs7WUFNQUMsUUFBT1osR0FBV0MsR0FBWSxPQUF2QkQsTUFBV0MsVUFBMEI7R0FIcEM7SUFBQTs7Ozs7Ozs7O09BR1JXO0lBOUJBQztJQUVBQztJQUVBQztJQUVBQztJQUVBQztJQUVBQztJQUVBQztJQUVBQztJQUVBQztJQUVBQzs7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Ozs7Ozs7Ozs7Ozs7Ozs7T0EzR3RFdkI7T0FtQkFTO09BU0FPO09BR0FFO09BR0FDO09BR0FDO09BR0FFO09BaUNBWTtPQUdBQztPQWpDQVg7T0FHQUM7T0FpQ0FXO09BR0FDO09BakNBWDtPQUdBQztPQWlDQVc7T0FHQUM7T0FqQ0FYO09BR0FDO09BaUNBVztPQUdBQztPQWpDQVg7T0FHQUM7T0FpQ0FXO09BR0FDO09BakNBWDtPQUdBQztPQWlDQVc7T0FHQUM7OztFIiwic291cmNlc0NvbnRlbnQiOlsiKCogZ2VuZXJhdGVkIGJ5IGR1bmUgKilcblxuKCoqIEBjYW5vbmljYWwgTHd0X2xvZ19qcy5JbXBvcnQgKilcbm1vZHVsZSBJbXBvcnQgPSBMd3RfbG9nX2pzX19JbXBvcnRcblxubW9kdWxlIEx3dF9sb2dfanNfXyA9IHN0cnVjdCBlbmRcbltAQGRlcHJlY2F0ZWQgXCJ0aGlzIG1vZHVsZSBpcyBzaGFkb3dlZFwiXVxuIiwiKCogSnNfb2Zfb2NhbWxcbiAqIGh0dHA6Ly93d3cub2NzaWdlbi5vcmcvanNfb2Zfb2NhbWwvXG4gKlxuICogVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgd2l0aCBsaW5raW5nIGV4Y2VwdGlvbjtcbiAqIGVpdGhlciB2ZXJzaW9uIDIuMSBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtOyBpZiBub3QsIHdyaXRlIHRvIHRoZSBGcmVlIFNvZnR3YXJlXG4gKiBGb3VuZGF0aW9uLCBJbmMuLCA1OSBUZW1wbGUgUGxhY2UgLSBTdWl0ZSAzMzAsIEJvc3RvbiwgTUEgMDIxMTEtMTMwNywgVVNBLlxuICopXG5cbm1vZHVsZSBQb2x5ID0gc3RydWN0XG4gIGV4dGVybmFsICggPCApIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWxlc3N0aGFuXCJcblxuICBleHRlcm5hbCAoIDw9ICkgOiAnYSAtPiAnYSAtPiBib29sID0gXCIlbGVzc2VxdWFsXCJcblxuICBleHRlcm5hbCAoIDw+ICkgOiAnYSAtPiAnYSAtPiBib29sID0gXCIlbm90ZXF1YWxcIlxuXG4gIGV4dGVybmFsICggPSApIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWVxdWFsXCJcblxuICBleHRlcm5hbCAoID4gKSA6ICdhIC0+ICdhIC0+IGJvb2wgPSBcIiVncmVhdGVydGhhblwiXG5cbiAgZXh0ZXJuYWwgKCA+PSApIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWdyZWF0ZXJlcXVhbFwiXG5cbiAgZXh0ZXJuYWwgY29tcGFyZSA6ICdhIC0+ICdhIC0+IGludCA9IFwiJWNvbXBhcmVcIlxuXG4gIGV4dGVybmFsIGVxdWFsIDogJ2EgLT4gJ2EgLT4gYm9vbCA9IFwiJWVxdWFsXCJcbmVuZFxuXG5tb2R1bGUgSW50X3JlcGxhY2VfcG9seW1vcnBoaWNfY29tcGFyZSA9IHN0cnVjdFxuICBsZXQgKCA8ICkgKHggOiBpbnQpIHkgPSB4IDwgeVxuXG4gIGxldCAoIDw9ICkgKHggOiBpbnQpIHkgPSB4IDw9IHlcblxuICBsZXQgKCA8PiApICh4IDogaW50KSB5ID0geCA8PiB5XG5cbiAgbGV0ICggPSApICh4IDogaW50KSB5ID0geCA9IHlcblxuICBsZXQgKCA+ICkgKHggOiBpbnQpIHkgPSB4ID4geVxuXG4gIGxldCAoID49ICkgKHggOiBpbnQpIHkgPSB4ID49IHlcblxuICBsZXQgY29tcGFyZSAoeCA6IGludCkgeSA9IGNvbXBhcmUgeCB5XG5cbiAgbGV0IGVxdWFsICh4IDogaW50KSB5ID0geCA9IHlcblxuICBsZXQgbWF4ICh4IDogaW50KSB5ID0gaWYgeCA+PSB5IHRoZW4geCBlbHNlIHlcblxuICBsZXQgbWluICh4IDogaW50KSB5ID0gaWYgeCA8PSB5IHRoZW4geCBlbHNlIHlcbmVuZFxuXG5tb2R1bGUgU3RyaW5nID0gc3RydWN0XG4gIGluY2x1ZGUgU3RyaW5nXG5cbiAgbGV0IGVxdWFsICh4IDogc3RyaW5nKSAoeSA6IHN0cmluZykgPSBQb2x5LmVxdWFsIHggeVxuZW5kXG5cbm1vZHVsZSBDaGFyID0gc3RydWN0XG4gIGluY2x1ZGUgQ2hhclxuXG4gIGxldCBlcXVhbCAoeCA6IGNoYXIpICh5IDogY2hhcikgPSBQb2x5LmVxdWFsIHggeVxuZW5kXG5cbmluY2x1ZGUgSW50X3JlcGxhY2VfcG9seW1vcnBoaWNfY29tcGFyZVxuIiwiKCogSnNfb2Zfb2NhbWwgbGlicmFyeVxuICogaHR0cDovL3d3dy5vY3NpZ2VuLm9yZy9qc19vZl9vY2FtbC9cbiAqIENvcHlyaWdodCAoQykgMjAxNCBIdWdvIEhldXphcmRcbiAqXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgTGVzc2VyIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCB3aXRoIGxpbmtpbmcgZXhjZXB0aW9uO1xuICogZWl0aGVyIHZlcnNpb24gMi4xIG9mIHRoZSBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmVcbiAqIEZvdW5kYXRpb24sIEluYy4sIDU5IFRlbXBsZSBQbGFjZSAtIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAwMjExMS0xMzA3LCBVU0EuXG4gKilcblxuaW5jbHVkZSBMd3RfbG9nX2NvcmVcbm9wZW4gSnNfb2Zfb2NhbWxcbm9wZW4hIEltcG9ydFxuXG5sZXQganNfdmFsID0gTHd0Lm5ld19rZXkgKClcblxubGV0IGNvbnNvbGUgPVxuICBtYWtlXG4gICAgfmNsb3NlOihmdW4gXyAtPiBMd3QucmV0dXJuX3VuaXQpXG4gICAgfm91dHB1dDooZnVuIHNlY3Rpb24gbGV2ZWwgbG9ncyAtPlxuICAgICAgbGV0IHN0ciA9XG4gICAgICAgIEpzLnN0cmluZ1xuICAgICAgICAgIChQcmludGYuc3ByaW50ZiBcIlslc10gJXNcIiAoU2VjdGlvbi5uYW1lIHNlY3Rpb24pIChTdHJpbmcuY29uY2F0IFwiXFxuXCIgbG9ncykpXG4gICAgICBpblxuICAgICAgKG1hdGNoIGxldmVsLCBMd3QuZ2V0IGpzX3ZhbCB3aXRoXG4gICAgICB8IERlYnVnLCBOb25lIC0+IEZpcmVidWcuY29uc29sZSMjZGVidWcgc3RyXG4gICAgICB8IERlYnVnLCBTb21lIHYgLT4gRmlyZWJ1Zy5jb25zb2xlIyNkZWJ1Z18yIHN0ciB2XG4gICAgICB8IEluZm8sIE5vbmUgfCBOb3RpY2UsIE5vbmUgLT4gRmlyZWJ1Zy5jb25zb2xlIyNpbmZvIHN0clxuICAgICAgfCBJbmZvLCBTb21lIHYgfCBOb3RpY2UsIFNvbWUgdiAtPiBGaXJlYnVnLmNvbnNvbGUjI2luZm9fMiBzdHIgdlxuICAgICAgfCBXYXJuaW5nLCBOb25lIC0+IEZpcmVidWcuY29uc29sZSMjd2FybiBzdHJcbiAgICAgIHwgV2FybmluZywgU29tZSB2IC0+IEZpcmVidWcuY29uc29sZSMjd2Fybl8yIHN0ciB2XG4gICAgICB8IEVycm9yLCBOb25lIHwgRmF0YWwsIE5vbmUgLT4gRmlyZWJ1Zy5jb25zb2xlIyNlcnJvciBzdHJcbiAgICAgIHwgRXJyb3IsIFNvbWUgdiB8IEZhdGFsLCBTb21lIHYgLT4gRmlyZWJ1Zy5jb25zb2xlIyNlcnJvcl8yIHN0ciB2KTtcbiAgICAgIEx3dC5yZXR1cm5fdW5pdClcblxubGV0IGxvZyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIH5sZXZlbCBtZXNzYWdlID1cbiAgbGV0IGluc3BlY3QgPVxuICAgIG1hdGNoIGluc3BlY3Qgd2l0aFxuICAgIHwgTm9uZSAtPiBOb25lXG4gICAgfCBTb21lIHYgLT4gU29tZSAoT2JqLnJlcHIgdilcbiAgaW5cbiAgTHd0LndpdGhfdmFsdWUganNfdmFsIGluc3BlY3QgKGZ1biAoKSAtPlxuICAgICAgbG9nID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgfmxldmVsIG1lc3NhZ2UpXG5cbmxldCBsb2dfZiA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIH5sZXZlbCBmb3JtYXQgPVxuICBQcmludGYua3NwcmludGYgKGxvZyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIH5sZXZlbCkgZm9ybWF0XG5cbmxldCBpZ25fbG9nID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgfmxldmVsIG1lc3NhZ2UgPVxuICB0cnkgaWdub3JlIChsb2cgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciB+bGV2ZWwgbWVzc2FnZSkgd2l0aCBfIC0+ICgpXG5cbmxldCBpZ25fbG9nX2YgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciB+bGV2ZWwgZm9ybWF0ID1cbiAgUHJpbnRmLmtzcHJpbnRmIChpZ25fbG9nID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgfmxldmVsKSBmb3JtYXRcblxubGV0IGRlYnVnID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgbXNnID1cbiAgbG9nID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgfmxldmVsOkRlYnVnIG1zZ1xuXG5sZXQgZGVidWdfZiA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIGZtdCA9XG4gIFByaW50Zi5rc3ByaW50ZiAoZGVidWcgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlcikgZm10XG5cbmxldCBpbmZvID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgbXNnID1cbiAgbG9nID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgfmxldmVsOkluZm8gbXNnXG5cbmxldCBpbmZvX2YgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciBmbXQgPVxuICBQcmludGYua3NwcmludGYgKGluZm8gP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlcikgZm10XG5cbmxldCBub3RpY2UgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciBtc2cgPVxuICBsb2cgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciB+bGV2ZWw6Tm90aWNlIG1zZ1xuXG5sZXQgbm90aWNlX2YgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciBmbXQgPVxuICBQcmludGYua3NwcmludGYgKG5vdGljZSA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyKSBmbXRcblxubGV0IHdhcm5pbmcgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciBtc2cgPVxuICBsb2cgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciB+bGV2ZWw6V2FybmluZyBtc2dcblxubGV0IHdhcm5pbmdfZiA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIGZtdCA9XG4gIFByaW50Zi5rc3ByaW50ZiAod2FybmluZyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyKSBmbXRcblxubGV0IGVycm9yID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgbXNnID1cbiAgbG9nID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgfmxldmVsOkVycm9yIG1zZ1xuXG5sZXQgZXJyb3JfZiA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIGZtdCA9XG4gIFByaW50Zi5rc3ByaW50ZiAoZXJyb3IgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlcikgZm10XG5cbmxldCBmYXRhbCA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIG1zZyA9XG4gIGxvZyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIH5sZXZlbDpGYXRhbCBtc2dcblxubGV0IGZhdGFsX2YgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciBmbXQgPVxuICBQcmludGYua3NwcmludGYgKGZhdGFsID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIpIGZtdFxuXG5sZXQgaWduX2RlYnVnID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgbXNnID1cbiAgaWduX2xvZyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIH5sZXZlbDpEZWJ1ZyBtc2dcblxubGV0IGlnbl9kZWJ1Z19mID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgZm10ID1cbiAgUHJpbnRmLmtzcHJpbnRmIChpZ25fZGVidWcgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlcikgZm10XG5cbmxldCBpZ25faW5mbyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIG1zZyA9XG4gIGlnbl9sb2cgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciB+bGV2ZWw6SW5mbyBtc2dcblxubGV0IGlnbl9pbmZvX2YgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciBmbXQgPVxuICBQcmludGYua3NwcmludGYgKGlnbl9pbmZvID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIpIGZtdFxuXG5sZXQgaWduX25vdGljZSA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIG1zZyA9XG4gIGlnbl9sb2cgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciB+bGV2ZWw6Tm90aWNlIG1zZ1xuXG5sZXQgaWduX25vdGljZV9mID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgZm10ID1cbiAgUHJpbnRmLmtzcHJpbnRmIChpZ25fbm90aWNlID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIpIGZtdFxuXG5sZXQgaWduX3dhcm5pbmcgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciBtc2cgPVxuICBpZ25fbG9nID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgfmxldmVsOldhcm5pbmcgbXNnXG5cbmxldCBpZ25fd2FybmluZ19mID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgZm10ID1cbiAgUHJpbnRmLmtzcHJpbnRmIChpZ25fd2FybmluZyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyKSBmbXRcblxubGV0IGlnbl9lcnJvciA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIG1zZyA9XG4gIGlnbl9sb2cgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciB+bGV2ZWw6RXJyb3IgbXNnXG5cbmxldCBpZ25fZXJyb3JfZiA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIGZtdCA9XG4gIFByaW50Zi5rc3ByaW50ZiAoaWduX2Vycm9yID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIpIGZtdFxuXG5sZXQgaWduX2ZhdGFsID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgbXNnID1cbiAgaWduX2xvZyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIH5sZXZlbDpGYXRhbCBtc2dcblxubGV0IGlnbl9mYXRhbF9mID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgZm10ID1cbiAgUHJpbnRmLmtzcHJpbnRmIChpZ25fZmF0YWwgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlcikgZm10XG5cbigqbGV0IHJhaXNlX2Vycm9yID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIgbXNnID1cbiAgTHd0Lmlnbm9yZV9yZXN1bHQgKGxvZyA/aW5zcGVjdCA/ZXhuID9zZWN0aW9uID9sb2NhdGlvbiA/bG9nZ2VyIH5sZXZlbDpFcnJvciBtc2cpO1xuICBmYWlsd2l0aCBtc2cgKilcbigqbGV0IHJhaXNlX2Vycm9yX2YgP2luc3BlY3QgP2V4biA/c2VjdGlvbiA/bG9jYXRpb24gP2xvZ2dlciBmbXQgPVxuICBQcmludGYua3NwcmludGYgKHJhaXNlX2Vycm9yID9pbnNwZWN0ID9leG4gP3NlY3Rpb24gP2xvY2F0aW9uID9sb2dnZXIpIGZtdCAqKVxuIl19
