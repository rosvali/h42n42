// Generated by js_of_ocaml
//# buildInfo:effects=false, kind=cma, use-js-string=true, version=5.6.0

//# unitInfo: Provides: Lwt_sequence
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Empty = [248, "Lwt_sequence.Empty", runtime.caml_fresh_oo_id(0)];
   function get(node){return node[3];}
   function set(node, data){node[3] = data; return 0;}
   function remove(node){
    var
     _k_ = node[4],
     _l_ =
       _k_
        ? (node[4] = 0, node[1][2] = node[2], node[2][1] = node[1], 0)
        : _k_;
    return _l_;
   }
   function create(param){
    var seq = [];
    runtime.caml_update_dummy(seq, [0, seq, seq]);
    return seq;
   }
   function clear(seq){seq[1] = seq; seq[2] = seq; return 0;}
   function is_empty(seq){return seq[2] === seq ? 1 : 0;}
   function length(seq){
    var curr$1 = seq[2], curr = curr$1, len = 0;
    for(;;){
     if(curr === seq) return len;
     var len$0 = len + 1 | 0, curr$0 = curr[2], curr = curr$0, len = len$0;
    }
   }
   function add_l(data, seq){
    var node = [0, seq, seq[2], data, 1];
    seq[2][1] = node;
    seq[2] = node;
    return node;
   }
   function add_r(data, seq){
    var node = [0, seq[1], seq, data, 1];
    seq[1][2] = node;
    seq[1] = node;
    return node;
   }
   function take_l(seq){
    if(is_empty(seq)) throw caml_maybe_attach_backtrace(Empty, 1);
    var node = seq[2];
    remove(node);
    return node[3];
   }
   function take_r(seq){
    if(is_empty(seq)) throw caml_maybe_attach_backtrace(Empty, 1);
    var node = seq[1];
    remove(node);
    return node[3];
   }
   function take_opt_l(seq){
    if(is_empty(seq)) return 0;
    var node = seq[2];
    remove(node);
    return [0, node[3]];
   }
   function take_opt_r(seq){
    if(is_empty(seq)) return 0;
    var node = seq[1];
    remove(node);
    return [0, node[3]];
   }
   function transfer_l(s1, s2){
    s2[2][1] = s1[1];
    s1[1][2] = s2[2];
    s2[2] = s1[2];
    s1[2][1] = s2;
    s1[1] = s1;
    s1[2] = s1;
    return 0;
   }
   function transfer_r(s1, s2){
    s2[1][2] = s1[2];
    s1[2][1] = s2[1];
    s2[1] = s1[1];
    s1[1][2] = s2;
    s1[1] = s1;
    s1[2] = s1;
    return 0;
   }
   function iter_l(f, seq){
    var curr$1 = seq[2], curr = curr$1;
    for(;;){
     var _j_ = curr !== seq ? 1 : 0;
     if(! _j_) return _j_;
     if(curr[4]) caml_call1(f, curr[3]);
     var curr$0 = curr[2], curr = curr$0;
    }
   }
   function iter_r(f, seq){
    var curr$1 = seq[1], curr = curr$1;
    for(;;){
     var _i_ = curr !== seq ? 1 : 0;
     if(! _i_) return _i_;
     if(curr[4]) caml_call1(f, curr[3]);
     var curr$0 = curr[1], curr = curr$0;
    }
   }
   function iter_node_l(f, seq){
    var curr$1 = seq[2], curr = curr$1;
    for(;;){
     var _h_ = curr !== seq ? 1 : 0;
     if(! _h_) return _h_;
     if(curr[4]) caml_call1(f, curr);
     var curr$0 = curr[2], curr = curr$0;
    }
   }
   function iter_node_r(f, seq){
    var curr$1 = seq[1], curr = curr$1;
    for(;;){
     var _g_ = curr !== seq ? 1 : 0;
     if(! _g_) return _g_;
     if(curr[4]) caml_call1(f, curr);
     var curr$0 = curr[1], curr = curr$0;
    }
   }
   function fold_l(f, seq, acc){
    var curr$2 = seq[2], curr = curr$2, acc$0 = acc;
    for(;;){
     if(curr === seq) return acc$0;
     if(curr[4])
      var
       acc$1 = caml_call2(f, curr[3], acc$0),
       curr$0 = curr[2],
       curr = curr$0,
       acc$0 = acc$1;
     else
      var curr$1 = curr[2], curr = curr$1;
    }
   }
   function fold_r(f, seq, acc){
    var curr$2 = seq[1], curr = curr$2, acc$0 = acc;
    for(;;){
     if(curr === seq) return acc$0;
     if(curr[4])
      var
       acc$1 = caml_call2(f, curr[3], acc$0),
       curr$0 = curr[1],
       curr = curr$0,
       acc$0 = acc$1;
     else
      var curr$1 = curr[1], curr = curr$1;
    }
   }
   function find_node_l(f, seq){
    var curr$2 = seq[2], curr = curr$2;
    for(;;){
     if(curr === seq) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(curr[4]){
      if(caml_call1(f, curr[3])) return curr;
      var curr$0 = curr[2], curr = curr$0;
     }
     else
      var curr$1 = curr[2], curr = curr$1;
    }
   }
   function find_node_r(f, seq){
    var curr$2 = seq[1], curr = curr$2;
    for(;;){
     if(curr === seq) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(curr[4]){
      if(caml_call1(f, curr[3])) return curr;
      var curr$0 = curr[1], curr = curr$0;
     }
     else
      var curr$1 = curr[1], curr = curr$1;
    }
   }
   function find_node_opt_l(f, seq){
    try{var _e_ = [0, find_node_l(f, seq)]; return _e_;}
    catch(_f_){
     var _d_ = caml_wrap_exception(_f_);
     if(_d_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_d_, 0);
    }
   }
   function find_node_opt_r(f, seq){
    try{var _b_ = [0, find_node_r(f, seq)]; return _b_;}
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_ === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
   }
   var
    Lwt_sequence =
      [0,
       get,
       set,
       remove,
       create,
       clear,
       is_empty,
       length,
       add_l,
       add_r,
       Empty,
       take_l,
       take_r,
       take_opt_l,
       take_opt_r,
       transfer_l,
       transfer_r,
       iter_l,
       iter_r,
       iter_node_l,
       iter_node_r,
       fold_l,
       fold_r,
       find_node_opt_l,
       find_node_opt_r,
       find_node_l,
       find_node_r];
   runtime.caml_register_global(2, Lwt_sequence, "Lwt_sequence");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt
//# unitInfo: Requires: Assert_failure, CamlinternalLazy, Lwt_sequence, Stdlib, Stdlib__Array, Stdlib__List, Stdlib__Map, Stdlib__Printexc, Stdlib__Printf, Stdlib__Queue, Stdlib__Random
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Lwt = "Lwt.",
    cst_Lwt_s = "Lwt.%s",
    cst_src_core_lwt_ml = "src/core/lwt.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_update_dummy = runtime.caml_update_dummy,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) == 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    Lwt_sequence = global_data.Lwt_sequence,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Map = global_data.Stdlib__Map,
    compare = runtime.caml_compare,
    Storage_map = caml_call1(Stdlib_Map[1], [0, compare]),
    _O_ = [0, cst_src_core_lwt_ml, 2709, 6],
    _P_ = [0, cst_src_core_lwt_ml, 2729, 6],
    _U_ = [0, 0],
    _V_ = [0, 0],
    cst_Lwt_nchoose_split_would_re =
      "Lwt.nchoose_split [] would return a promise that is pending forever",
    _T_ = [0, 0],
    cst_Lwt_npick_would_return_a_p =
      "Lwt.npick [] would return a promise that is pending forever",
    _S_ = [0, 0],
    cst_Lwt_nchoose_would_return_a =
      "Lwt.nchoose [] would return a promise that is pending forever",
    _R_ = [0, 0],
    cst_Lwt_pick_would_return_a_pr =
      "Lwt.pick [] would return a promise that is pending forever",
    _Q_ = [0, 0],
    cst_Lwt_choose_would_return_a_ =
      "Lwt.choose [] would return a promise that is pending forever",
    _N_ = [0, cst_src_core_lwt_ml, 2670, 24],
    _M_ = [0, cst_src_core_lwt_ml, 2651, 13],
    _L_ = [0, 0],
    _K_ = [0, 0],
    _I_ = [0, 1],
    _J_ = [0, 1],
    _G_ = [0, 1],
    _H_ = [0, 1],
    _F_ = [0, 1],
    _E_ = [0, 1],
    _C_ = [0, 0],
    _D_ = [0, 1],
    _A_ = [0, 1],
    _B_ = [0, 1],
    _y_ = [0, 1],
    _z_ = [0, 1],
    _w_ = [0, 0],
    _x_ = [0, 1],
    _u_ = [0, 0],
    _v_ = [0, 1],
    _r_ = [0, 0],
    _s_ = [0, 0],
    _t_ = [0, 1],
    _p_ = [0, 0],
    _q_ = [0, 1],
    _n_ = [0, 0],
    _o_ = [0, 1],
    _l_ = [0, 0],
    _m_ = [0, 0],
    _k_ = [0, 0],
    _j_ = [0, 0],
    _i_ = [0, 0],
    cst_wakeup_later_exn = "wakeup_later_exn",
    cst_wakeup_later = "wakeup_later",
    cst_wakeup_later_result = "wakeup_later_result",
    _f_ = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    _g_ = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    _h_ = [0, 1],
    cst_wakeup_exn = "wakeup_exn",
    cst_wakeup = "wakeup",
    cst_wakeup_result = "wakeup_result",
    _c_ = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    _d_ = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    _e_ = [0, 0],
    cst_Fatal_error_exception = "Fatal error: exception ",
    _a_ = [0, cst_src_core_lwt_ml, 980, 23],
    _b_ = [0, cst_src_core_lwt_ml, 981, 22],
    cst_Lwt_Resolution_loop_Cancel = "Lwt.Resolution_loop.Canceled";
   function state_of_result(param){
    if(0 === param[0]){var x = param[1]; return [0, x];}
    var exn = param[1];
    return [1, exn];
   }
   function underlying(p){
    var match = p[1];
    switch(match[0]){
      case 0:
       return p;
      case 1:
       return p;
      case 2:
       return p;
      default:
       var p$0 = match[1], p$1 = underlying(p$0);
       if(1 - (p$1 === p$0 ? 1 : 0)) p[1] = [3, p$1];
       return p$1;
    }
   }
   function set_promise_state(p, state){p[1] = state; return p;}
   function handle_all(param){return 1;}
   function handle_all_except_runtime(param){
    return param === Stdlib[9] ? 0 : param === Stdlib[10] ? 0 : 1;
   }
   var v = [0, handle_all];
   function set(f){v[1] = f; return 0;}
   function run(e){return caml_call1(v[1], e);}
   var next_key_id = [0, 0];
   function new_key(param){
    var id = next_key_id[1];
    next_key_id[1] = id + 1 | 0;
    return [0, id, 0];
   }
   var current_storage = [0, Storage_map[1]];
   function get(key){
    if(! caml_call2(Storage_map[3], key[1], current_storage[1])) return 0;
    var refresh = caml_call2(Storage_map[28], key[1], current_storage[1]);
    caml_call1(refresh, 0);
    var value = key[2];
    key[2] = 0;
    return value;
   }
   function with_value(key, value, f){
    if(value)
     var
      refresh = function(param){key[2] = value; return 0;},
      new_storage =
        caml_call3(Storage_map[4], key[1], refresh, current_storage[1]);
    else
     var new_storage = caml_call2(Storage_map[7], key[1], current_storage[1]);
    var saved_storage = current_storage[1];
    current_storage[1] = new_storage;
    try{
     var result = caml_call1(f, 0);
     current_storage[1] = saved_storage;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     current_storage[1] = saved_storage;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function concat_regular_callbacks(l1, l2){
    return typeof l1 === "number"
            ? l2
            : typeof l2 === "number" ? l1 : [0, l1, l2];
   }
   function clean_up_callback_cells(callbacks){
    if(typeof callbacks !== "number")
     switch(callbacks[0]){
       case 0:
        var
         l2 = callbacks[2],
         l1 = callbacks[1],
         l1$0 = clean_up_callback_cells(l1),
         l2$0 = clean_up_callback_cells(l2);
        return concat_regular_callbacks(l1$0, l2$0);
       case 2:
        if(! callbacks[1][1]) return 0; break;
     }
    return callbacks;
   }
   function clear_explicitly_removable_cal(cell, ps){
    cell[1] = 0;
    function _bo_(p){
     var match = underlying(p)[1];
     switch(match[0]){
       case 1:
        return 0;
       case 2:
        var callbacks = match[1], _bp_ = callbacks[1];
        if(typeof _bp_ !== "number" && 2 === _bp_[0]){callbacks[1] = 0; return 0;}
        var cleanups_deferred = callbacks[4] + 1 | 0;
        return 42 < cleanups_deferred
                ? (callbacks
                   [4]
                  = 0,
                  callbacks[1] = clean_up_callback_cells(callbacks[1]),
                  0)
                : (callbacks[4] = cleanups_deferred, 0);
       default: return 0;
     }
    }
    return caml_call1(caml_call1(Stdlib_List[17], _bo_), ps);
   }
   function add_regular_callback_list_node(callbacks, node){
    var
     existing = callbacks[1],
     node$0 = typeof existing === "number" ? node : [0, node, existing];
    callbacks[1] = node$0;
    return 0;
   }
   function add_implicitly_removed_callbac(callbacks, f){
    return add_regular_callback_list_node(callbacks, [1, f]);
   }
   function add_explicitly_removable_callb(ps, f){
    var
     cell = [],
     self_removing_callback_wrapper =
       function _bn_(_bm_){return _bn_.fun(_bm_);};
    caml_update_dummy(cell, [0, [0, self_removing_callback_wrapper]]);
    caml_update_dummy
     (self_removing_callback_wrapper,
      function(result){
       clear_explicitly_removable_cal(cell, ps);
       return caml_call1(f, result);
      });
    var node = [2, cell];
    function _bl_(p){
     var match = underlying(p)[1];
     switch(match[0]){
       case 1:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
       case 2:
        var callbacks = match[1];
        return add_regular_callback_list_node(callbacks, node);
       default:
        throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     }
    }
    caml_call1(caml_call1(Stdlib_List[17], _bl_), ps);
    return cell;
   }
   function add_explicitly_removable_callb$0(ps, f){add_explicitly_removable_callb(ps, f); return;
   }
   function add_cancel_callback(callbacks, f){
    var
     node = [1, current_storage[1], f],
     node$0 =
       typeof callbacks[2] === "number" ? node : [0, node, callbacks[2]];
    callbacks[2] = node$0;
    return 0;
   }
   var
    async_exception_hook =
      [0,
       function(exn){
        caml_call1(Stdlib[49], cst_Fatal_error_exception);
        var _bk_ = caml_call1(Stdlib_Printexc[1], exn);
        caml_call1(Stdlib[49], _bk_);
        caml_call1(Stdlib[48], 10);
        caml_call1(Stdlib_Printexc[5], Stdlib[40]);
        caml_call1(Stdlib[63], Stdlib[40]);
        return caml_call1(Stdlib[99], 2);
       }];
   function handle_with_async_exception_ho(f, v){
    try{var _bj_ = caml_call1(f, v); return _bj_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return caml_call1(async_exception_hook[1], exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    Canceled =
      [248, cst_Lwt_Resolution_loop_Cancel, runtime.caml_fresh_oo_id(0)];
   function run_callbacks(callbacks, result){
    if(1 === result[0])
     var _bi_ = result[1] === Canceled ? 1 : 0, is_canceled = _bi_;
    else
     var is_canceled = 0;
    if(is_canceled){
     var
      fs = callbacks[2],
      iter_callback_list$2 =
        function(counter, fs, rest){
         var fs$0 = fs, rest$0 = rest;
         for(;;){
          if(typeof fs$0 === "number"){
           if(counter >= 50)
            return caml_trampoline_return(iter_list$0, [0, rest$0]);
           var counter$0 = counter + 1 | 0;
           return iter_list$0(counter$0, rest$0);
          }
          switch(fs$0[0]){
            case 0:
             var
              fs$1 = fs$0[2],
              fs$2 = fs$0[1],
              rest$1 = [0, fs$1, rest$0],
              fs$0 = fs$2,
              rest$0 = rest$1;
             break;
            case 1:
             var f = fs$0[2], storage = fs$0[1];
             current_storage[1] = storage;
             handle_with_async_exception_ho(f, 0);
             if(counter >= 50)
              return caml_trampoline_return(iter_list$0, [0, rest$0]);
             var counter$1 = counter + 1 | 0;
             return iter_list$0(counter$1, rest$0);
            default:
             var node = fs$0[1];
             caml_call1(Lwt_sequence[3], node);
             if(counter >= 50)
              return caml_trampoline_return(iter_list$0, [0, rest$0]);
             var counter$2 = counter + 1 | 0;
             return iter_list$0(counter$2, rest$0);
          }
         }
        },
      iter_list$0 =
        function(counter, rest){
         if(! rest) return;
         var rest$0 = rest[2], fs = rest[1];
         if(counter >= 50)
          return caml_trampoline_return(iter_callback_list$2, [0, fs, rest$0]);
         var counter$0 = counter + 1 | 0;
         return iter_callback_list$2(counter$0, fs, rest$0);
        },
      iter_callback_list =
        function(fs, rest){
         return caml_trampoline(iter_callback_list$2(0, fs, rest));
        };
     iter_callback_list(fs, 0);
    }
    var fs$0 = callbacks[1];
    function iter_callback_list$1(counter, fs, rest){
     var fs$0 = fs, rest$0 = rest;
     for(;;){
      if(typeof fs$0 === "number"){
       if(counter >= 50)
        return caml_trampoline_return(iter_list, [0, rest$0]);
       var counter$0 = counter + 1 | 0;
       return iter_list(counter$0, rest$0);
      }
      switch(fs$0[0]){
        case 0:
         var
          fs$1 = fs$0[2],
          fs$2 = fs$0[1],
          rest$1 = [0, fs$1, rest$0],
          fs$0 = fs$2,
          rest$0 = rest$1;
         break;
        case 1:
         var f = fs$0[1];
         caml_call1(f, result);
         if(counter >= 50)
          return caml_trampoline_return(iter_list, [0, rest$0]);
         var counter$1 = counter + 1 | 0;
         return iter_list(counter$1, rest$0);
        default:
         var match = fs$0[1][1];
         if(match){
          var f$0 = match[1];
          caml_call1(f$0, result);
          if(counter >= 50)
           return caml_trampoline_return(iter_list, [0, rest$0]);
          var counter$2 = counter + 1 | 0;
          return iter_list(counter$2, rest$0);
         }
         if(counter >= 50)
          return caml_trampoline_return(iter_list, [0, rest$0]);
         var counter$3 = counter + 1 | 0;
         return iter_list(counter$3, rest$0);
      }
     }
    }
    function iter_list(counter, rest){
     if(! rest) return 0;
     var rest$0 = rest[2], fs = rest[1];
     if(counter >= 50)
      return caml_trampoline_return(iter_callback_list$1, [0, fs, rest$0]);
     var counter$0 = counter + 1 | 0;
     return iter_callback_list$1(counter$0, fs, rest$0);
    }
    function iter_callback_list$0(fs, rest){
     return caml_trampoline(iter_callback_list$1(0, fs, rest));
    }
    return iter_callback_list$0(fs$0, 0);
   }
   var
    current_callback_nesting_depth = [0, 0],
    deferred_callbacks = caml_call1(Stdlib_Queue[2], 0),
    default_maximum_callback_nesti = 42;
   function leave_resolution_loop(storage_snapshot){
    if(1 === current_callback_nesting_depth[1])
     for(;;){
      if(caml_call1(Stdlib_Queue[13], deferred_callbacks)) break;
      var
       match = caml_call1(Stdlib_Queue[7], deferred_callbacks),
       result = match[2],
       callbacks = match[1];
      run_callbacks(callbacks, result);
     }
    current_callback_nesting_depth[1] =
     current_callback_nesting_depth[1] - 1 | 0;
    current_storage[1] = storage_snapshot;
    return 0;
   }
   function run_in_resolution_loop(f){
    current_callback_nesting_depth[1] =
     current_callback_nesting_depth[1] + 1 | 0;
    var storage_snapshot = current_storage[1], result = caml_call1(f, 0);
    leave_resolution_loop(storage_snapshot);
    return result;
   }
   function abandon_wakeups(param){
    var _bh_ = 0 !== current_callback_nesting_depth[1] ? 1 : 0;
    return _bh_ ? leave_resolution_loop(Storage_map[1]) : _bh_;
   }
   function run_callbacks_or_defer_them(opt, _bg_, callbacks, result){
    if(opt)
     var sth = opt[1], allow_deferring = sth;
    else
     var allow_deferring = 1;
    if(_bg_)
     var sth$0 = _bg_[1], maximum_callback_nesting_depth = sth$0;
    else
     var maximum_callback_nesting_depth = default_maximum_callback_nesti;
    var
     should_defer =
       allow_deferring
        ? maximum_callback_nesting_depth
          <= current_callback_nesting_depth[1]
          ? 1
          : 0
        : allow_deferring;
    return should_defer
            ? caml_call2
              (Stdlib_Queue[4], [0, callbacks, result], deferred_callbacks)
            : run_in_resolution_loop
              (function(param){return run_callbacks(callbacks, result);});
   }
   function resolve
   (allow_deferring, maximum_callback_nesting_depth, p, result){
    var callbacks = p[1][1];
    set_promise_state(p, result);
    run_callbacks_or_defer_them
     (allow_deferring, maximum_callback_nesting_depth, callbacks, result);
    return;
   }
   function run_callback_or_defer_it(opt, f, if_deferred){
    if(opt)
     var sth = opt[1], run_immediately_and_ensure_tai = sth;
    else
     var run_immediately_and_ensure_tai = 0;
    if(run_immediately_and_ensure_tai) return caml_call1(f, 0);
    var should_defer = 42 <= current_callback_nesting_depth[1] ? 1 : 0;
    if(! should_defer)
     return run_in_resolution_loop(function(param){return caml_call1(f, 0);});
    var
     match = caml_call1(if_deferred, 0),
     deferred_result = match[3],
     deferred_callback = match[2],
     immediate_result = match[1],
     deferred_record = [0, [1, deferred_callback], 0, 0, 0];
    caml_call2
     (Stdlib_Queue[4],
      [0, deferred_record, deferred_result],
      deferred_callbacks);
    return immediate_result;
   }
   function wakeup_general(api_function_name, r, result){
    var p = underlying(r), _bf_ = p[1];
    switch(_bf_[0]){
      case 1:
       return _bf_[1] === Canceled
               ? 0
               : caml_call3
                 (Stdlib_Printf[10], Stdlib[1], _d_, api_function_name);
      case 2:
       var result$0 = state_of_result(result);
       resolve(_e_, 0, p, result$0);
       return 0;
      default:
       return caml_call3(Stdlib_Printf[10], Stdlib[1], _c_, api_function_name);
    }
   }
   function wakeup_result(r, result){
    return wakeup_general(cst_wakeup_result, r, result);
   }
   function wakeup(r, v){return wakeup_general(cst_wakeup, r, [0, v]);}
   function wakeup_exn(r, exn){
    return wakeup_general(cst_wakeup_exn, r, [1, exn]);
   }
   function wakeup_later_general(api_function_name, r, result){
    var p = underlying(r), _be_ = p[1];
    switch(_be_[0]){
      case 1:
       return _be_[1] === Canceled
               ? 0
               : caml_call3
                 (Stdlib_Printf[10], Stdlib[1], _g_, api_function_name);
      case 2:
       var result$0 = state_of_result(result);
       resolve(0, _h_, p, result$0);
       return 0;
      default:
       return caml_call3(Stdlib_Printf[10], Stdlib[1], _f_, api_function_name);
    }
   }
   function wakeup_later_result(r, result){
    return wakeup_later_general(cst_wakeup_later_result, r, result);
   }
   function wakeup_later(r, v){
    return wakeup_later_general(cst_wakeup_later, r, [0, v]);
   }
   function wakeup_later_exn(r, exn){
    return wakeup_later_general(cst_wakeup_later_exn, r, [1, exn]);
   }
   function cancel(p){
    var canceled_result = [1, Canceled];
    function cancel_and_collect_callbacks(callbacks_accumulator, p){
     var p$0 = p;
     for(;;){
      var p$1 = underlying(p$0), match = p$1[1];
      switch(match[0]){
        case 1:
         return callbacks_accumulator;
        case 2:
         var callbacks = match[1], match$0 = callbacks[3];
         if(typeof match$0 === "number")
          return 0 === match$0
                  ? callbacks_accumulator
                  : (set_promise_state
                     (p$1, canceled_result),
                    [0, callbacks, callbacks_accumulator]);
         if(0 !== match$0[0]){
          var ps = match$0[1];
          return caml_call3
                  (Stdlib_List[25],
                   cancel_and_collect_callbacks,
                   callbacks_accumulator,
                   ps);
         }
         var p$2 = match$0[1], p$0 = p$2;
         break;
        default: return callbacks_accumulator;
      }
     }
    }
    var callbacks = cancel_and_collect_callbacks(0, p);
    function _bd_(param){
     return run_callbacks_or_defer_them(_i_, 0, param, canceled_result);
    }
    return caml_call1(caml_call1(Stdlib_List[17], _bd_), callbacks);
   }
   function return$0(v){return [0, [0, v]];}
   function of_result(result){return [0, state_of_result(result)];}
   function fail(exn){return [0, [1, exn]];}
   var return_unit = return$0(0), return_none = return$0(0);
   function return_some(x){return return$0([0, x]);}
   var
    return_nil = return$0(0),
    return_true = return$0(1),
    return_false = return$0(0);
   function return_ok(x){return return$0([0, x]);}
   function return_error(x){return return$0([1, x]);}
   function fail_with(msg){return [0, [1, [0, Stdlib[7], msg]]];}
   function fail_invalid_arg(msg){return [0, [1, [0, Stdlib[6], msg]]];}
   function new_pending(how_to_cancel){
    var state = [2, [0, 0, 0, how_to_cancel, 0]];
    return [0, state];
   }
   function wait(param){var p = new_pending(0); return [0, p, p];}
   function task(param){var p = new_pending(1); return [0, p, p];}
   function add_task_r(sequence){
    var
     p = new_pending(1),
     node = caml_call2(Lwt_sequence[9], p, sequence),
     callbacks = p[1][1];
    callbacks[2] = [2, node];
    return p;
   }
   function add_task_l(sequence){
    var
     p = new_pending(1),
     node = caml_call2(Lwt_sequence[8], p, sequence),
     callbacks = p[1][1];
    callbacks[2] = [2, node];
    return p;
   }
   function protected$0(p_internal){
    switch(underlying(p_internal)[1][0]){
      case 1:
       return p_internal;
      case 2:
       var
        p = new_pending(1),
        callback =
          function(p_result){
           var p$0 = underlying(p);
           resolve(_j_, 0, p$0, p_result);
           return 0;
          },
        ps = [0, p_internal, 0],
        cell = add_explicitly_removable_callb(ps, callback),
        remove_the_callback =
          function(param){return clear_explicitly_removable_cal(cell, ps);},
        p_callbacks = p[1][1];
       add_cancel_callback(p_callbacks, remove_the_callback);
       return p;
      default: return p_internal;
    }
   }
   function no_cancel(p_internal){
    var match = underlying(p_internal)[1];
    switch(match[0]){
      case 1:
       return p_internal;
      case 2:
       var
        p_callbacks = match[1],
        p = new_pending(0),
        callback =
          function(p_result){
           var p$0 = underlying(p);
           resolve(_k_, 0, p$0, p_result);
           return 0;
          };
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p;
      default: return p_internal;
    }
   }
   function make_into_proxy(outer_promise, user_provided_promise){
    var p = underlying(user_provided_promise);
    if(p === outer_promise) return p;
    var match = p[1];
    switch(match[0]){
      case 1:
       return resolve(_m_, 0, outer_promise, p[1]);
      case 2:
       var
        p_callbacks = match[1],
        outer_callbacks = outer_promise[1][1],
        regular_callbacks =
          concat_regular_callbacks(outer_callbacks[1], p_callbacks[1]),
        cleanups_deferred = outer_callbacks[4] + p_callbacks[4] | 0;
       if(42 < cleanups_deferred)
        var
         cleanups_deferred$0 = 0,
         regular_callbacks$0 = clean_up_callback_cells(regular_callbacks);
       else
        var
         cleanups_deferred$0 = cleanups_deferred,
         regular_callbacks$0 = regular_callbacks;
       var
        l2 = p_callbacks[2],
        l1 = outer_callbacks[2],
        cancel_callbacks =
          typeof l1 === "number"
           ? l2
           : typeof l2 === "number" ? l1 : [0, l1, l2];
       outer_callbacks[1] = regular_callbacks$0;
       outer_callbacks[2] = cancel_callbacks;
       outer_callbacks[4] = cleanups_deferred$0;
       outer_callbacks[3] = p_callbacks[3];
       set_promise_state(p, [3, outer_promise]);
       return outer_promise;
      default: return resolve(_l_, 0, outer_promise, p[1]);
    }
   }
   function symbol_bind(p, f){
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var p$2 = underlying(p);
       resolve(_n_, 0, p$2, p_result);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var _bc_ = caml_call1(f, v), p$0 = _bc_;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p$0 = fail(exn);
      }
      var p$1 = underlying(p);
      make_into_proxy(p$1, p$0);
      return 0;
     }
     return [0, p, callback];
    }
    var result = p$0[1];
    switch(result[0]){
      case 1:
       return [0, result];
      case 2:
       var
        p_callbacks = result[1],
        match = create_result_promise_and_call(0),
        callback = match[2],
        p$1 = match[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var
        v = result[1],
        _bb_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_o_, function(param){return caml_call1(f, v);}, _bb_);
    }
   }
   function backtrace_bind(add_loc, p, f){
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var exn$0 = p_result[1], p$2 = underlying(p);
       resolve(_p_, 0, p$2, [1, caml_call1(add_loc, exn$0)]);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var _ba_ = caml_call1(f, v), p$0 = _ba_;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p$0 = fail(caml_call1(add_loc, exn));
      }
      var p$1 = underlying(p);
      make_into_proxy(p$1, p$0);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var exn = match[1]; return [0, [1, caml_call1(add_loc, exn)]];
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var
        v = match[1],
        _a$_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_q_, function(param){return caml_call1(f, v);}, _a$_);
    }
   }
   function symbol(f, p){
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var p$1 = underlying(p);
       resolve(_s_, 0, p$1, p_result);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var _a__ = [0, caml_call1(f, v)], p_result$0 = _a__;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p_result$0 = [1, exn];
      }
      var p$0 = underlying(p);
      resolve(_r_, 0, p$0, p_result$0);
      return 0;
     }
     return [0, p, callback];
    }
    var result = p$0[1];
    switch(result[0]){
      case 1:
       return [0, result];
      case 2:
       var
        p_callbacks = result[1],
        match = create_result_promise_and_call(0),
        callback = match[2],
        p$1 = match[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var
        v = result[1],
        _a7_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_t_,
                function(param){
                 try{var _a9_ = [0, caml_call1(f, v)], _a8_ = _a9_;}
                 catch(exn$0){
                  var exn = caml_wrap_exception(exn$0);
                  if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
                  var _a8_ = [1, exn];
                 }
                 return [0, _a8_];
                },
                _a7_);
    }
   }
   function catch$0(f, h){
    try{var _a5_ = caml_call1(f, 0), p = _a5_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 !== p_result[0]){
       var p$0 = underlying(p);
       resolve(_u_, 0, p$0, p_result);
       return 0;
      }
      var exn = p_result[1];
      current_storage[1] = saved_storage;
      try{var _a6_ = caml_call1(h, exn), p$1 = _a6_;}
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(! run(exn$0)) throw caml_maybe_attach_backtrace(exn$0, 0);
       var p$1 = fail(exn$0);
      }
      var p$2 = underlying(p);
      make_into_proxy(p$2, p$1);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var
        exn$0 = match[1],
        _a4_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_v_, function(param){return caml_call1(h, exn$0);}, _a4_);
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default: return p$0;
    }
   }
   function backtrace_catch(add_loc, f, h){
    try{var _a2_ = caml_call1(f, 0), p = _a2_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 !== p_result[0]){
       var p$0 = underlying(p);
       resolve(_w_, 0, p$0, p_result);
       return 0;
      }
      var exn = p_result[1];
      current_storage[1] = saved_storage;
      try{var _a3_ = caml_call1(h, exn), p$1 = _a3_;}
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(! run(exn$0)) throw caml_maybe_attach_backtrace(exn$0, 0);
       var p$1 = fail(caml_call1(add_loc, exn$0));
      }
      var p$2 = underlying(p);
      make_into_proxy(p$2, p$1);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var
        exn$0 = match[1],
        _a1_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_x_,
                function(param){
                 return caml_call1(h, caml_call1(add_loc, exn$0));
                },
                _a1_);
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default: return p$0;
    }
   }
   function try_bind(f$0, f, h){
    try{var _aY_ = caml_call1(f$0, 0), p = _aY_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var exn$0 = p_result[1];
       current_storage[1] = saved_storage;
       try{var _a0_ = caml_call1(h, exn$0), p$2 = _a0_;}
       catch(exn){
        var exn$1 = caml_wrap_exception(exn);
        if(! run(exn$1)) throw caml_maybe_attach_backtrace(exn$1, 0);
        var p$2 = fail(exn$1);
       }
       var p$3 = underlying(p);
       make_into_proxy(p$3, p$2);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var _aZ_ = caml_call1(f, v), p$0 = _aZ_;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p$0 = fail(exn);
      }
      var p$1 = underlying(p);
      make_into_proxy(p$1, p$0);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var
        exn$0 = match[1],
        _aX_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_z_, function(param){return caml_call1(h, exn$0);}, _aX_);
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var
        v = match[1],
        _aW_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_y_, function(param){return caml_call1(f, v);}, _aW_);
    }
   }
   function backtrace_try_bind(add_loc, f$0, f, h){
    try{var _aT_ = caml_call1(f$0, 0), p = _aT_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var exn$0 = p_result[1];
       current_storage[1] = saved_storage;
       try{var _aV_ = caml_call1(h, exn$0), p$2 = _aV_;}
       catch(exn){
        var exn$1 = caml_wrap_exception(exn);
        if(! run(exn$1)) throw caml_maybe_attach_backtrace(exn$1, 0);
        var p$2 = fail(caml_call1(add_loc, exn$1));
       }
       var p$3 = underlying(p);
       make_into_proxy(p$3, p$2);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var _aU_ = caml_call1(f, v), p$0 = _aU_;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p$0 = fail(caml_call1(add_loc, exn));
      }
      var p$1 = underlying(p);
      make_into_proxy(p$1, p$0);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var
        exn$0 = match[1],
        _aS_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_B_,
                function(param){
                 return caml_call1(h, caml_call1(add_loc, exn$0));
                },
                _aS_);
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var
        v = match[1],
        _aR_ =
          function(param){
           var
            match = create_result_promise_and_call(0),
            callback = match[2],
            p = match[1];
           return [0, p, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_A_, function(param){return caml_call1(f, v);}, _aR_);
    }
   }
   function finalize(f$0, f){
    function _aO_(e){
     function _aQ_(param){return fail(e);}
     return symbol_bind(caml_call1(f, 0), _aQ_);
    }
    return try_bind
            (f$0,
             function(x){
              function _aP_(param){return return$0(x);}
              return symbol_bind(caml_call1(f, 0), _aP_);
             },
             _aO_);
   }
   function backtrace_finalize(add_loc, f$0, f){
    function _aL_(e){
     function _aN_(param){return fail(caml_call1(add_loc, e));}
     return symbol_bind(caml_call1(f, 0), _aN_);
    }
    return backtrace_try_bind
            (add_loc,
             f$0,
             function(x){
              function _aM_(param){return return$0(x);}
              return symbol_bind(caml_call1(f, 0), _aM_);
             },
             _aL_);
   }
   function on_cancel(p, f){
    var p$0 = underlying(p), match = p$0[1];
    switch(match[0]){
      case 1:
       if(match[1] !== Canceled) return 0;
       var
        _aK_ =
          function(param){
           return [0,
                   0,
                   function(param){
                    return handle_with_async_exception_ho(f, 0);
                   },
                   _C_];
          };
       return run_callback_or_defer_it
               (_D_,
                function(param){return handle_with_async_exception_ho(f, 0);},
                _aK_);
      case 2:
       var callbacks = match[1]; return add_cancel_callback(callbacks, f);
      default: return 0;
    }
   }
   function on_success(p, f){
    var p$0 = underlying(p);
    function callback_if_deferred(param){
     var saved_storage = current_storage[1];
     return function(result){
      if(1 === result[0]) return 0;
      var v = result[1];
      current_storage[1] = saved_storage;
      return handle_with_async_exception_ho(f, v);};
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       return 0;
      case 2:
       var p_callbacks = match[1], callback = callback_if_deferred(0);
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default:
       var
        v = match[1],
        _aJ_ =
          function(param){
           var callback = callback_if_deferred(0);
           return [0, 0, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_E_,
                function(param){return handle_with_async_exception_ho(f, v);},
                _aJ_);
    }
   }
   function on_failure(p, f){
    var p$0 = underlying(p);
    function callback_if_deferred(param){
     var saved_storage = current_storage[1];
     return function(result){
      if(1 !== result[0]) return 0;
      var exn = result[1];
      current_storage[1] = saved_storage;
      return handle_with_async_exception_ho(f, exn);};
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var
        exn = match[1],
        _aI_ =
          function(param){
           var callback = callback_if_deferred(0);
           return [0, 0, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_F_,
                function(param){
                 return handle_with_async_exception_ho(f, exn);
                },
                _aI_);
      case 2:
       var p_callbacks = match[1], callback = callback_if_deferred(0);
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default: return 0;
    }
   }
   function on_termination(p, f){
    var p$0 = underlying(p);
    function callback_if_deferred(param){
     var saved_storage = current_storage[1];
     return function(result){
      current_storage[1] = saved_storage;
      return handle_with_async_exception_ho(f, 0);};
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var
        _aH_ =
          function(param){
           var callback = callback_if_deferred(0);
           return [0, 0, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_H_,
                function(param){return handle_with_async_exception_ho(f, 0);},
                _aH_);
      case 2:
       var p_callbacks = match[1], callback = callback_if_deferred(0);
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default:
       var
        _aG_ =
          function(param){
           var callback = callback_if_deferred(0);
           return [0, 0, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_G_,
                function(param){return handle_with_async_exception_ho(f, 0);},
                _aG_);
    }
   }
   function on_any(p, f, g){
    var p$0 = underlying(p);
    function callback_if_deferred(param){
     var saved_storage = current_storage[1];
     return function(result){
      if(1 === result[0]){
       var exn = result[1];
       current_storage[1] = saved_storage;
       return handle_with_async_exception_ho(g, exn);
      }
      var v = result[1];
      current_storage[1] = saved_storage;
      return handle_with_async_exception_ho(f, v);};
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var
        exn = match[1],
        _aF_ =
          function(param){
           var callback = callback_if_deferred(0);
           return [0, 0, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_J_,
                function(param){
                 return handle_with_async_exception_ho(g, exn);
                },
                _aF_);
      case 2:
       var p_callbacks = match[1], callback = callback_if_deferred(0);
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default:
       var
        v = match[1],
        _aE_ =
          function(param){
           var callback = callback_if_deferred(0);
           return [0, 0, callback, p$0[1]];
          };
       return run_callback_or_defer_it
               (_I_,
                function(param){return handle_with_async_exception_ho(f, v);},
                _aE_);
    }
   }
   function wrap_in_cancelable(p_internal){
    var p_underlying = underlying(p_internal);
    switch(p_underlying[1][0]){
      case 1:
       return p_internal;
      case 2:
       var match = task(0), r = match[2], p = match[1];
       on_cancel(p, function(param){return cancel(p_internal);});
       var _aB_ = function(_aD_){return wakeup_exn(r, _aD_);};
       on_any(p_internal, function(_aC_){return wakeup(r, _aC_);}, _aB_);
       return p;
      default: return p_internal;
    }
   }
   function dont_wait(f, h){
    try{var _aA_ = caml_call1(f, 0), p = _aA_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var exn$0 = match[1]; return caml_call1(h, exn$0);
      case 2:
       var
        p_callbacks = match[1],
        callback =
          function(result){
           if(1 !== result[0]) return 0;
           var exn = result[1];
           return caml_call1(h, exn);
          };
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default: return 0;
    }
   }
   function async(f){
    try{var _az_ = caml_call1(f, 0), p = _az_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var exn$0 = match[1];
       return caml_call1(async_exception_hook[1], exn$0);
      case 2:
       var
        p_callbacks = match[1],
        callback =
          function(result){
           if(1 !== result[0]) return 0;
           var exn = result[1];
           return caml_call1(async_exception_hook[1], exn);
          };
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default: return 0;
    }
   }
   function ignore_result(p){
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var exn = match[1]; throw caml_maybe_attach_backtrace(exn, 0);
      case 2:
       var
        p_callbacks = match[1],
        callback =
          function(result){
           if(1 !== result[0]) return 0;
           var exn = result[1];
           return caml_call1(async_exception_hook[1], exn);
          };
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default: return 0;
    }
   }
   function join(ps){
    var
     p = new_pending([1, ps]),
     number_pending_in_ps = [0, 0],
     join_result = [0, _K_];
    function callback(new_result){
     if(1 === new_result[0] && 1 !== join_result[1][0])
      join_result[1] = new_result;
     number_pending_in_ps[1] = number_pending_in_ps[1] - 1 | 0;
     var _aw_ = 0 === number_pending_in_ps[1] ? 1 : 0;
     if(_aw_){
      var p$0 = underlying(p), _ax_ = join_result[1];
      resolve(_L_, 0, underlying(p$0), _ax_);
      var _ay_ = 0;
     }
     else
      var _ay_ = _aw_;
     return _ay_;
    }
    var ps$0 = ps;
    for(;;){
     if(! ps$0)
      return 0 === number_pending_in_ps[1] ? [0, join_result[1]] : p;
     var ps$1 = ps$0[2], p$0 = ps$0[1], p_result = underlying(p$0)[1];
     switch(p_result[0]){
       case 1:
        if(1 !== join_result[1][0]) join_result[1] = p_result;
        var ps$0 = ps$1;
        break;
       case 2:
        var p_callbacks = p_result[1];
        number_pending_in_ps[1] = number_pending_in_ps[1] + 1 | 0;
        add_implicitly_removed_callbac(p_callbacks, callback);
        var ps$0 = ps$1;
        break;
       default: var ps$0 = ps$1;
     }
    }
   }
   function both(p1, p2){
    var
     pair = [0, 0, 0],
     p1$0 =
       symbol_bind(p1, function(v){pair[1] = [0, v]; return return_unit;}),
     p2$0 =
       symbol_bind(p2, function(v){pair[2] = [0, v]; return return_unit;}),
     _au_ = join([0, p1$0, [0, p2$0, 0]]);
    return symbol
            (function(param){
              var _av_ = pair[1], match = pair[2];
              if(_av_ && match){
               var v2 = match[1], v1 = _av_[1];
               return [0, v1, v2];
              }
              throw caml_maybe_attach_backtrace([0, Assert_failure, _M_], 1);
             },
             _au_);
   }
   function all(ps){
    if(! ps) return return_nil;
    var _aq_ = ps[2], x = ps[1];
    if(! _aq_) return symbol(function(y){return [0, y, 0];}, x);
    if(_aq_[2]){
     var
      vs = runtime.caml_make_vect(caml_call1(Stdlib_List[1], ps), 0),
      _ar_ =
        function(index, p){
         return symbol_bind
                 (p,
                  function(v){
                   runtime.caml_check_bound(vs, index)[1 + index] = [0, v];
                   return return_unit;
                  });
        },
      _as_ = join(caml_call1(caml_call1(Stdlib_List[20], _ar_), ps));
     return symbol
             (function(param){
               var i$1 = vs.length - 1 - 1 | 0, i = i$1, acc = 0;
               for(;;){
                if(0 > i) return acc;
                var match = vs[1 + i];
                if(! match)
                 throw caml_maybe_attach_backtrace
                        ([0, Assert_failure, _N_], 1);
                var
                 x = match[1],
                 acc$0 = [0, x, acc],
                 i$0 = i - 1 | 0,
                 i = i$0,
                 acc = acc$0;
               }
              },
              _as_);
    }
    var y = _aq_[1], _at_ = both(x, y);
    return symbol
            (function(param){
              var y = param[2], x = param[1];
              return [0, x, [0, y, 0]];
             },
             _at_);
   }
   function count_resolved_promises_in(ps){
    var total$1 = 0, ps$2 = ps;
    a:
    for(;;){
     if(! ps$2) return [0, total$1];
     var ps$3 = ps$2[2], p$0 = ps$2[1];
     switch(underlying(p$0)[1][0]){
       case 1:
        break a;
       case 2:
        var ps$2 = ps$3; break;
       default: var total$2 = total$1 + 1 | 0, total$1 = total$2, ps$2 = ps$3;
     }
    }
    var
     rejected$1 = [0, p$0, 0],
     total = 1,
     rejected = rejected$1,
     ps$0 = ps$3;
    for(;;){
     if(! ps$0) return [1, [0, total, rejected]];
     var ps$1 = ps$0[2], p = ps$0[1];
     switch(underlying(p)[1][0]){
       case 1:
        var
         rejected$0 = [0, p, rejected],
         total$0 = total + 1 | 0,
         total = total$0,
         rejected = rejected$0,
         ps$0 = ps$1;
        break;
       case 2:
        var ps$0 = ps$1; break;
       default: var ps$0 = ps$1;
     }
    }
   }
   function nth_resolved(ps, n){
    var ps$0 = ps, n$0 = n;
    for(;;){
     if(! ps$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _O_], 1);
     var ps$1 = ps$0[2], p = ps$0[1];
     switch(underlying(p)[1][0]){
       case 1:
        if(0 >= n$0) return p;
        var n$2 = n$0 - 1 | 0, ps$0 = ps$1, n$0 = n$2;
        break;
       case 2:
        var ps$0 = ps$1; break;
       default:
        if(0 >= n$0) return p; var n$1 = n$0 - 1 | 0, ps$0 = ps$1, n$0 = n$1;
     }
    }
   }
   function nth_resolved_and_cancel_pendin(ps, n){
    var ps$0 = ps, n$0 = n;
    for(;;){
     if(! ps$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _P_], 1);
     var ps$1 = ps$0[2], p = ps$0[1];
     switch(underlying(p)[1][0]){
       case 1:
        if(0 >= n$0){caml_call2(Stdlib_List[17], cancel, ps$1); return p;}
        var n$2 = n$0 - 1 | 0, ps$0 = ps$1, n$0 = n$2;
        break;
       case 2:
        cancel(p); var ps$0 = ps$1; break;
       default:
        if(0 >= n$0){caml_call2(Stdlib_List[17], cancel, ps$1); return p;}
        var n$1 = n$0 - 1 | 0, ps$0 = ps$1, n$0 = n$1;
     }
    }
   }
   var
    prng =
      [246, function(_ap_){return caml_call1(Stdlib_Random[15][1], [0]);}];
   function choose(ps){
    if(0 === ps) caml_call1(Stdlib[1], cst_Lwt_choose_would_return_a_);
    var match = count_resolved_promises_in(ps);
    if(0 !== match[0]){
     var
      match$0 = match[1],
      ps$0 = match$0[2],
      n$0 = match$0[1],
      _an_ = caml_obj_tag(prng),
      _ao_ =
        250 === _an_
         ? prng[1]
         : 246 === _an_ ? caml_call1(CamlinternalLazy[2], prng) : prng;
     return nth_resolved(ps$0, caml_call2(Stdlib_Random[15][5], _ao_, n$0));
    }
    var n = match[1];
    if(0 === n){
     var
      p = new_pending([1, ps]),
      callback =
        function(result){
         var p$0 = underlying(p);
         resolve(_Q_, 0, p$0, result);
         return 0;
        };
     add_explicitly_removable_callb$0(ps, callback);
     return p;
    }
    if(1 === n) return nth_resolved(ps, 0);
    var
     _al_ = caml_obj_tag(prng),
     _am_ =
       250 === _al_
        ? prng[1]
        : 246 === _al_ ? caml_call1(CamlinternalLazy[2], prng) : prng;
    return nth_resolved(ps, caml_call2(Stdlib_Random[15][5], _am_, n));
   }
   function pick(ps){
    if(0 === ps) caml_call1(Stdlib[1], cst_Lwt_pick_would_return_a_pr);
    var match = count_resolved_promises_in(ps);
    if(0 !== match[0]){
     var match$0 = match[1], qs = match$0[2], n$0 = match$0[1];
     caml_call2(Stdlib_List[17], cancel, ps);
     var
      _aj_ = caml_obj_tag(prng),
      _ak_ =
        250 === _aj_
         ? prng[1]
         : 246 === _aj_ ? caml_call1(CamlinternalLazy[2], prng) : prng;
     return nth_resolved(qs, caml_call2(Stdlib_Random[15][5], _ak_, n$0));
    }
    var n = match[1];
    if(0 === n){
     var
      p = new_pending([1, ps]),
      callback =
        function(result){
         caml_call2(Stdlib_List[17], cancel, ps);
         var p$0 = underlying(p);
         resolve(_R_, 0, p$0, result);
         return 0;
        };
     add_explicitly_removable_callb$0(ps, callback);
     return p;
    }
    if(1 === n) return nth_resolved_and_cancel_pendin(ps, 0);
    var
     _ah_ = caml_obj_tag(prng),
     _ai_ =
       250 === _ah_
        ? prng[1]
        : 246 === _ah_ ? caml_call1(CamlinternalLazy[2], prng) : prng;
    return nth_resolved_and_cancel_pendin
            (ps, caml_call2(Stdlib_Random[15][5], _ai_, n));
   }
   function collect_fulfilled_promises_aft(results, ps){
    var results$0 = results, ps$0 = ps;
    for(;;){
     if(! ps$0) return [0, caml_call1(Stdlib_List[9], results$0)];
     var ps$1 = ps$0[2], p = ps$0[1], result = underlying(p)[1];
     switch(result[0]){
       case 1:
        return result;
       case 2:
        var ps$0 = ps$1; break;
       default:
        var
         v = result[1],
         results$1 = [0, v, results$0],
         results$0 = results$1,
         ps$0 = ps$1;
     }
    }
   }
   function nchoose(ps){
    if(0 === ps) caml_call1(Stdlib[1], cst_Lwt_nchoose_would_return_a);
    var ps$2 = ps;
    a:
    for(;;){
     if(! ps$2){
      var
       p$1 = new_pending([1, ps]),
       callback =
         function(result){
          var
           p = underlying(p$1),
           result$0 = collect_fulfilled_promises_aft(0, ps);
          resolve(_S_, 0, p, result$0);
          return 0;
         };
      add_explicitly_removable_callb$0(ps, callback);
      return p$1;
     }
     var ps$3 = ps$2[2], p$0 = ps$2[1], result$0 = underlying(p$0)[1];
     switch(result$0[0]){
       case 1:
        return [0, result$0];
       case 2:
        var ps$2 = ps$3; break;
       default: break a;
     }
    }
    var v$0 = result$0[1], acc$1 = [0, v$0, 0], acc = acc$1, ps$0 = ps$3;
    for(;;){
     if(! ps$0) return return$0(caml_call1(Stdlib_List[9], acc));
     var ps$1 = ps$0[2], p = ps$0[1], result = underlying(p)[1];
     switch(result[0]){
       case 1:
        return [0, result];
       case 2:
        var ps$0 = ps$1; break;
       default:
        var v = result[1], acc$0 = [0, v, acc], acc = acc$0, ps$0 = ps$1;
     }
    }
   }
   function npick(ps){
    if(0 === ps) caml_call1(Stdlib[1], cst_Lwt_npick_would_return_a_p);
    var ps$2 = ps;
    a:
    for(;;){
     if(! ps$2){
      var
       p$1 = new_pending([1, ps]),
       callback =
         function(result){
          var
           p = underlying(p$1),
           result$0 = collect_fulfilled_promises_aft(0, ps);
          caml_call2(Stdlib_List[17], cancel, ps);
          resolve(_T_, 0, p, result$0);
          return 0;
         };
      add_explicitly_removable_callb$0(ps, callback);
      return p$1;
     }
     var ps$3 = ps$2[2], p$0 = ps$2[1], result$0 = underlying(p$0)[1];
     switch(result$0[0]){
       case 1:
        caml_call2(Stdlib_List[17], cancel, ps); return [0, result$0];
       case 2:
        var ps$2 = ps$3; break;
       default: break a;
     }
    }
    var v$0 = result$0[1], acc$1 = [0, v$0, 0], acc = acc$1, ps$0 = ps$3;
    for(;;){
     if(! ps$0){
      caml_call2(Stdlib_List[17], cancel, ps);
      return return$0(caml_call1(Stdlib_List[9], acc));
     }
     var ps$1 = ps$0[2], p = ps$0[1], result = underlying(p)[1];
     switch(result[0]){
       case 1:
        caml_call2(Stdlib_List[17], cancel, ps); return [0, result];
       case 2:
        var ps$0 = ps$1; break;
       default:
        var v = result[1], acc$0 = [0, v, acc], acc = acc$0, ps$0 = ps$1;
     }
    }
   }
   function nchoose_split(ps){
    if(0 === ps) caml_call1(Stdlib[1], cst_Lwt_nchoose_split_would_re);
    var pending_acc = 0, ps$2 = ps;
    a:
    for(;;){
     if(! ps$2){
      var
       p = new_pending([1, ps]),
       callback =
         function(result$0){
          var
           to_resolve = underlying(p),
           fulfilled = 0,
           pending = 0,
           ps$0 = ps;
          for(;;){
           if(ps$0){
            var
             ps$1 = ps$0[2],
             p_internal = ps$0[1],
             result = underlying(p_internal)[1];
            switch(result[0]){
              case 1:
               resolve(_U_, 0, to_resolve, result); break;
              case 2:
               var
                pending$0 = [0, p_internal, pending],
                pending = pending$0,
                ps$0 = ps$1;
               continue;
              default:
               var
                v = result[1],
                fulfilled$0 = [0, v, fulfilled],
                fulfilled = fulfilled$0,
                ps$0 = ps$1;
               continue;
            }
           }
           else{
            var _ag_ = caml_call1(Stdlib_List[9], pending);
            resolve
             (_V_,
              0,
              to_resolve,
              [0, [0, caml_call1(Stdlib_List[9], fulfilled), _ag_]]);
           }
           return 0;
          }
         };
      add_explicitly_removable_callb$0(ps, callback);
      return p;
     }
     var
      ps$3 = ps$2[2],
      p_internal$0 = ps$2[1],
      result$0 = underlying(p_internal$0)[1];
     switch(result$0[0]){
       case 1:
        return [0, result$0];
       case 2:
        var
         pending_acc$0 = [0, p_internal$0, pending_acc],
         pending_acc = pending_acc$0,
         ps$2 = ps$3;
        break;
       default: break a;
     }
    }
    var
     v$0 = result$0[1],
     results$1 = [0, v$0, 0],
     results = results$1,
     pending = pending_acc,
     ps$0 = ps$3;
    for(;;){
     if(! ps$0)
      return return$0([0, caml_call1(Stdlib_List[9], results), pending]);
     var
      ps$1 = ps$0[2],
      p_internal = ps$0[1],
      result = underlying(p_internal)[1];
     switch(result[0]){
       case 1:
        return [0, result];
       case 2:
        var
         pending$0 = [0, p_internal, pending],
         pending = pending$0,
         ps$0 = ps$1;
        break;
       default:
        var
         v = result[1],
         results$0 = [0, v, results],
         results = results$0,
         ps$0 = ps$1;
     }
    }
   }
   function state(p){
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var exn = match[1]; return [1, exn];
      case 2:
       return 0;
      default: var v = match[1]; return [0, v];
    }
   }
   function debug_state_is(expected_state, p){
    return return$0(runtime.caml_equal(state(p), expected_state));
   }
   function is_sleeping(p){
    switch(underlying(p)[1][0]){
      case 1:
       return 0;
      case 2:
       return 1;
      default: return 0;
    }
   }
   function poll(p){
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var e = match[1]; throw caml_maybe_attach_backtrace(e, 0);
      case 2:
       return 0;
      default: var v = match[1]; return [0, v];
    }
   }
   function apply(f, x){
    try{var _af_ = caml_call1(f, x); return _af_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap(f){
    try{var _ae_ = return$0(caml_call1(f, 0)); return _ae_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap1(f, x1){
    try{var _ad_ = return$0(caml_call1(f, x1)); return _ad_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap2(f, x1, x2){
    try{var _ac_ = return$0(caml_call2(f, x1, x2)); return _ac_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap3(f, x1, x2, x3){
    try{var _ab_ = return$0(caml_call3(f, x1, x2, x3)); return _ab_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap4(f, x1, x2, x3, x4){
    try{var _aa_ = return$0(caml_call4(f, x1, x2, x3, x4)); return _aa_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap5(f, x1, x2, x3, x4, x5){
    try{var _$_ = return$0(caml_call5(f, x1, x2, x3, x4, x5)); return _$_;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap6(f, x1, x2, x3, x4, x5, x6){
    try{var ___ = return$0(caml_call6(f, x1, x2, x3, x4, x5, x6)); return ___;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap7(f, x1, x2, x3, x4, x5, x6, x7){
    try{
     var _Z_ = return$0(caml_call7(f, x1, x2, x3, x4, x5, x6, x7));
     return _Z_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    pause_hook = [0, function(_Y_){return;}],
    paused = caml_call1(Lwt_sequence[4], 0),
    _W_ = [0, 0];
   function pause(param){
    var p = add_task_r(paused);
    _W_[1]++;
    caml_call1(pause_hook[1], _W_[1]);
    return p;
   }
   function wakeup_paused(param){
    if(caml_call1(Lwt_sequence[6], paused)){_W_[1] = 0; return 0;}
    var tmp = caml_call1(Lwt_sequence[4], 0);
    caml_call2(Lwt_sequence[16], paused, tmp);
    _W_[1] = 0;
    function _X_(r){return wakeup(r, 0);}
    return caml_call2(Lwt_sequence[17], _X_, tmp);
   }
   function register_pause_notifier(f){pause_hook[1] = f; return 0;}
   function abandon_paused(param){
    caml_call1(Lwt_sequence[5], paused);
    _W_[1] = 0;
    return 0;
   }
   function paused_count(param){return _W_[1];}
   function map(t, f){return symbol(f, t);}
   function bind(t, f){return symbol_bind(t, f);}
   var
    Open_on_rhs = [0],
    Let_syntax = [0, return$0, map, bind, both, Open_on_rhs],
    Let_syntax$0 = [0, Let_syntax];
   function symbol$0(f, p){return symbol_bind(p, f);}
   function symbol$1(p, f){return symbol(f, p);}
   function symbol$2(p$0, p){return join([0, p$0, [0, p, 0]]);}
   function symbol$3(p$0, p){return choose([0, p$0, [0, p, 0]]);}
   var Let_syntax$1 = Let_syntax$0[1];
   function let$0(x, f){return symbol(f, x);}
   var
    Syntax = [0, symbol_bind, both, let$0, both],
    Lwt =
      [0,
       wait,
       wakeup_later,
       wakeup_later_exn,
       return$0,
       fail,
       symbol_bind,
       catch$0,
       finalize,
       try_bind,
       dont_wait,
       async,
       async_exception_hook,
       both,
       join,
       all,
       pick,
       choose,
       npick,
       nchoose,
       nchoose_split,
       Canceled,
       task,
       cancel,
       on_cancel,
       protected$0,
       no_cancel,
       wrap_in_cancelable,
       symbol,
       on_success,
       on_failure,
       on_termination,
       on_any,
       [0,
        symbol_bind,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$0,
        symbol,
        Let_syntax$1],
       Let_syntax$0,
       Syntax,
       return_unit,
       return_none,
       return_nil,
       return_true,
       return_false,
       return_some,
       return_ok,
       return_error,
       fail_with,
       fail_invalid_arg,
       of_result,
       wakeup_later_result,
       state,
       new_key,
       get,
       with_value,
       wakeup,
       wakeup_exn,
       wakeup_result,
       add_task_r,
       add_task_l,
       pause,
       wakeup_paused,
       paused_count,
       register_pause_notifier,
       abandon_paused,
       wrap,
       wrap1,
       wrap2,
       wrap3,
       wrap4,
       wrap5,
       wrap6,
       wrap7,
       symbol_bind,
       symbol$1,
       symbol$3,
       symbol$2,
       symbol$0,
       symbol,
       is_sleeping,
       ignore_result,
       [0, handle_all, handle_all_except_runtime, set, run],
       poll,
       apply,
       backtrace_bind,
       backtrace_catch,
       backtrace_finalize,
       backtrace_try_bind,
       abandon_wakeups,
       debug_state_is];
   runtime.caml_register_global(71, Lwt, "Lwt");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_switch
//# unitInfo: Requires: Lwt, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Stdlib_List = global_data.Stdlib__List,
    Off = [248, "Lwt_switch.Off", runtime.caml_fresh_oo_id(0)];
   function create(param){return [0, [0, [0, 0]]];}
   function is_on(switch$0){return switch$0[1] ? 1 : 0;}
   function check(param){
    if(param && ! param[1][1]) throw caml_maybe_attach_backtrace(Off, 1);
    return 0;
   }
   function add_hook(switch$0, hook){
    if(! switch$0) return 0;
    var match = switch$0[1][1];
    if(! match) throw caml_maybe_attach_backtrace(Off, 1);
    var os = match[1];
    os[1] = [0, hook, os[1]];
    return 0;
   }
   function add_hook_or_exec(switch$0, hook){
    if(! switch$0) return Lwt[36];
    var match = switch$0[1][1];
    if(! match) return caml_call1(hook, 0);
    var os = match[1];
    os[1] = [0, hook, os[1]];
    return Lwt[36];
   }
   function turn_off(switch$0){
    var _c_ = switch$0[1];
    if(! _c_) return Lwt[36];
    var hooks = _c_[1][1];
    switch$0[1] = 0;
    function _d_(hook){return caml_call2(Lwt[80], hook, 0);}
    var _e_ = caml_call2(Stdlib_List[19], _d_, hooks);
    return caml_call1(Lwt[14], _e_);
   }
   function with_switch(fn){
    var switch$0 = create(0);
    function _a_(param){return turn_off(switch$0);}
    function _b_(param){return caml_call1(fn, switch$0);}
    return caml_call2(Lwt[8], _b_, _a_);
   }
   var
    Lwt_switch =
      [0,
       create,
       with_switch,
       is_on,
       turn_off,
       Off,
       check,
       add_hook,
       add_hook_or_exec];
   runtime.caml_register_global(3, Lwt_switch, "Lwt_switch");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_seq
//# unitInfo: Requires: Lwt, Stdlib, Stdlib__List, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    return_nil = caml_call1(Lwt[4], 0),
    _h_ =
      [0,
       [11,
        "Lwt_seq.iter_n: max_concurrency must be > 0, ",
        [4, 0, 0, 0, [11, " given", 0]]],
       "Lwt_seq.iter_n: max_concurrency must be > 0, %d given"];
   function empty(param){return return_nil;}
   function return$0(x, param){return caml_call1(Lwt[4], [0, x, empty]);}
   function return_lwt(x, param){
    function _bA_(x){return [0, x, empty];}
    return caml_call2(Lwt[35][3], x, _bA_);
   }
   function cons(x, t, param){return caml_call1(Lwt[4], [0, x, t]);}
   function cons_lwt(x, t, param){
    function _bz_(x){return [0, x, t];}
    return caml_call2(Lwt[35][3], x, _bz_);
   }
   function _a_(seq1, seq2, param){
    function _bv_(param){
     if(! param) return caml_call1(seq2, 0);
     var
      next = param[2],
      x = param[1],
      _bx_ = [0, x, function(_by_){return _a_(next, seq2, _by_);}];
     return caml_call1(Lwt[4], _bx_);
    }
    var _bw_ = caml_call1(seq1, 0);
    return caml_call2(Lwt[33][1], _bw_, _bv_);
   }
   function append(seq1, seq2, param){
    function _br_(param){
     if(! param) return caml_call1(seq2, 0);
     var
      next = param[2],
      x = param[1],
      _bt_ = [0, x, function(_bu_){return _a_(next, seq2, _bu_);}];
     return caml_call1(Lwt[4], _bt_);
    }
    var _bs_ = caml_call2(Lwt[80], seq1, 0);
    return caml_call2(Lwt[33][1], _bs_, _br_);
   }
   function _b_(f, seq, param){
    function _bo_(param){
     if(! param) return 0;
     var next = param[2], x = param[1], x$0 = caml_call1(f, x);
     return [0, x$0, function(_bq_){return _b_(f, next, _bq_);}];
    }
    var _bp_ = caml_call1(seq, 0);
    return caml_call2(Lwt[33][2], _bp_, _bo_);
   }
   function map(f, seq, param){
    function _bl_(param){
     if(! param) return 0;
     var next = param[2], x = param[1], x$0 = caml_call1(f, x);
     return [0, x$0, function(_bn_){return _b_(f, next, _bn_);}];
    }
    var _bm_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][2], _bm_, _bl_);
   }
   function _c_(f, seq, param){
    function _bg_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1];
     function _bi_(x){
      return [0, x, function(_bk_){return _c_(f, next, _bk_);}];
     }
     var _bj_ = caml_call1(f, x);
     return caml_call2(Lwt[35][3], _bj_, _bi_);
    }
    var _bh_ = caml_call1(seq, 0);
    return caml_call2(Lwt[33][1], _bh_, _bg_);
   }
   function map_s(f, seq, param){
    function _bb_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1];
     function _bd_(x){
      return [0, x, function(_bf_){return _c_(f, next, _bf_);}];
     }
     var _be_ = caml_call1(f, x);
     return caml_call2(Lwt[35][3], _be_, _bd_);
    }
    var _bc_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _bc_, _bb_);
   }
   function _d_(f, seq, param){
    function _a9_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1], x$0 = caml_call1(f, x);
     if(! x$0) return _d_(f, next, 0);
     var
      y = x$0[1],
      _a$_ = [0, y, function(_ba_){return _d_(f, next, _ba_);}];
     return caml_call1(Lwt[4], _a$_);
    }
    var _a__ = caml_call1(seq, 0);
    return caml_call2(Lwt[33][1], _a__, _a9_);
   }
   function filter_map(f, seq, param){
    function _a5_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1], x$0 = caml_call1(f, x);
     if(! x$0) return _d_(f, next, 0);
     var
      y = x$0[1],
      _a7_ = [0, y, function(_a8_){return _d_(f, next, _a8_);}];
     return caml_call1(Lwt[4], _a7_);
    }
    var _a6_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _a6_, _a5_);
   }
   function _e_(f, seq, param){
    function _aZ_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1];
     function _a1_(x){
      if(! x) return _e_(f, next, 0);
      var y = x[1], _a3_ = [0, y, function(_a4_){return _e_(f, next, _a4_);}];
      return caml_call1(Lwt[4], _a3_);
     }
     var _a2_ = caml_call1(f, x);
     return caml_call2(Lwt[35][1], _a2_, _a1_);
    }
    var _a0_ = caml_call1(seq, 0);
    return caml_call2(Lwt[33][1], _a0_, _aZ_);
   }
   function filter_map_s(f, seq, param){
    function _aT_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1];
     function _aV_(x){
      if(! x) return _e_(f, next, 0);
      var y = x[1], _aX_ = [0, y, function(_aY_){return _e_(f, next, _aY_);}];
      return caml_call1(Lwt[4], _aX_);
     }
     var _aW_ = caml_call1(f, x);
     return caml_call2(Lwt[35][1], _aW_, _aV_);
    }
    var _aU_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _aU_, _aT_);
   }
   function _f_(f, seq, param){
    function _aP_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1], ok = caml_call1(f, x);
     if(! ok) return _f_(f, next, 0);
     var _aR_ = [0, x, function(_aS_){return _f_(f, next, _aS_);}];
     return caml_call1(Lwt[4], _aR_);
    }
    var _aQ_ = caml_call1(seq, 0);
    return caml_call2(Lwt[33][1], _aQ_, _aP_);
   }
   function filter(f, seq, param){
    function _aL_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1], ok = caml_call1(f, x);
     if(! ok) return _f_(f, next, 0);
     var _aN_ = [0, x, function(_aO_){return _f_(f, next, _aO_);}];
     return caml_call1(Lwt[4], _aN_);
    }
    var _aM_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _aM_, _aL_);
   }
   function _g_(f, seq, param){
    function _aF_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1];
     function _aH_(ok){
      if(! ok) return _g_(f, next, 0);
      var _aJ_ = [0, x, function(_aK_){return _g_(f, next, _aK_);}];
      return caml_call1(Lwt[4], _aJ_);
     }
     var _aI_ = caml_call1(f, x);
     return caml_call2(Lwt[35][1], _aI_, _aH_);
    }
    var _aG_ = caml_call1(seq, 0);
    return caml_call2(Lwt[33][1], _aG_, _aF_);
   }
   function filter_s(f, seq, param){
    function _az_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1];
     function _aB_(ok){
      if(! ok) return _g_(f, next, 0);
      var _aD_ = [0, x, function(_aE_){return _g_(f, next, _aE_);}];
      return caml_call1(Lwt[4], _aD_);
     }
     var _aC_ = caml_call1(f, x);
     return caml_call2(Lwt[35][1], _aC_, _aB_);
    }
    var _aA_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _aA_, _az_);
   }
   function flat_map_app(f, seq, tail, param){
    function _at_(param){
     if(param){
      var
       next = param[2],
       x = param[1],
       _ax_ =
         [0, x, function(_ay_){return flat_map_app(f, next, tail, _ay_);}];
      return caml_call1(Lwt[4], _ax_);
     }
     function _av_(param){
      if(! param) return return_nil;
      var next = param[2], x = param[1];
      return flat_map_app(f, caml_call1(f, x), next, 0);
     }
     var _aw_ = caml_call1(tail, 0);
     return caml_call2(Lwt[33][1], _aw_, _av_);
    }
    var _au_ = caml_call1(seq, 0);
    return caml_call2(Lwt[33][1], _au_, _at_);
   }
   function flat_map(f, seq, param){
    function _ar_(param){
     if(! param) return return_nil;
     var next = param[2], x = param[1];
     return flat_map_app(f, caml_call1(f, x), next, 0);
    }
    var _as_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _as_, _ar_);
   }
   function fold_left(f, acc, seq){
    function aux(f, acc, seq){
     function _ap_(param){
      if(! param) return caml_call1(Lwt[4], acc);
      var next = param[2], x = param[1], acc$0 = caml_call2(f, acc, x);
      return aux(f, acc$0, next);
     }
     var _aq_ = caml_call1(seq, 0);
     return caml_call2(Lwt[33][1], _aq_, _ap_);
    }
    function _an_(param){
     if(! param) return caml_call1(Lwt[4], acc);
     var next = param[2], x = param[1], acc$0 = caml_call2(f, acc, x);
     return aux(f, acc$0, next);
    }
    var _ao_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _ao_, _an_);
   }
   function fold_left_s(f, acc, seq){
    function aux(f, acc, seq){
     function _aj_(param){
      if(! param) return caml_call1(Lwt[4], acc);
      var next = param[2], x = param[1];
      function _al_(acc){return aux(f, acc, next);}
      var _am_ = caml_call2(f, acc, x);
      return caml_call2(Lwt[35][1], _am_, _al_);
     }
     var _ak_ = caml_call1(seq, 0);
     return caml_call2(Lwt[33][1], _ak_, _aj_);
    }
    function _af_(param){
     if(! param) return caml_call1(Lwt[4], acc);
     var next = param[2], x = param[1];
     function _ah_(acc){return aux(f, acc, next);}
     var _ai_ = caml_call2(f, acc, x);
     return caml_call2(Lwt[35][1], _ai_, _ah_);
    }
    var _ag_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _ag_, _af_);
   }
   function iter(f, seq){
    function aux(seq){
     function _ad_(param){
      if(! param) return Lwt[36];
      var next = param[2], x = param[1];
      caml_call1(f, x);
      return aux(next);
     }
     var _ae_ = caml_call1(seq, 0);
     return caml_call2(Lwt[33][1], _ae_, _ad_);
    }
    function _ab_(param){
     if(! param) return Lwt[36];
     var next = param[2], x = param[1];
     caml_call1(f, x);
     return aux(next);
    }
    var _ac_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _ac_, _ab_);
   }
   function iter_s(f, seq){
    function aux(seq){
     function _Z_(param){
      if(! param) return Lwt[36];
      var next = param[2], x = param[1];
      function _$_(param){return aux(next);}
      var _aa_ = caml_call1(f, x);
      return caml_call2(Lwt[35][1], _aa_, _$_);
     }
     var ___ = caml_call1(seq, 0);
     return caml_call2(Lwt[33][1], ___, _Z_);
    }
    function _V_(param){
     if(! param) return Lwt[36];
     var next = param[2], x = param[1];
     function _X_(param){return aux(next);}
     var _Y_ = caml_call1(f, x);
     return caml_call2(Lwt[35][1], _Y_, _X_);
    }
    var _W_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _W_, _V_);
   }
   function iter_p(f, seq){
    function aux(acc, seq){
     function _T_(param){
      if(! param) return caml_call1(Lwt[14], acc);
      var next = param[2], x = param[1], p = caml_call1(f, x);
      return aux([0, p, acc], next);
     }
     var _U_ = caml_call1(seq, 0);
     return caml_call2(Lwt[33][1], _U_, _T_);
    }
    var acc = 0;
    function _R_(param){
     if(! param) return caml_call1(Lwt[14], acc);
     var next = param[2], x = param[1], p = caml_call1(f, x);
     return aux([0, p, acc], next);
    }
    var _S_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _S_, _R_);
   }
   function iter_n(opt, f, seq){
    if(opt)
     var sth = opt[1], max_concurrency = sth;
    else
     var max_concurrency = 1;
    if(max_concurrency <= 0){
     var message = caml_call2(Stdlib_Printf[4], _h_, max_concurrency);
     caml_call1(Stdlib[1], message);
    }
    function loop(running, available, seq){
     function _K_(param){
      var available = param[2], running = param[1];
      function _P_(param){
       if(! param) return caml_call1(Lwt[14], running);
       var seq = param[2], elt = param[1];
       return loop([0, caml_call1(f, elt), running], available - 1 | 0, seq);
      }
      var _Q_ = caml_call1(seq, 0);
      return caml_call2(Lwt[33][1], _Q_, _P_);
     }
     if(0 < available)
      var _L_ = caml_call1(Lwt[4], [0, running, available]);
     else
      var
       _M_ =
         function(param){
          var
           running = param[2],
           complete = param[1],
           _O_ =
             [0,
              running,
              available + caml_call1(Stdlib_List[1], complete) | 0];
          return caml_call1(Lwt[4], _O_);
         },
       _N_ = caml_call1(Lwt[20], running),
       _L_ = caml_call2(Lwt[33][1], _N_, _M_);
     return caml_call2(Lwt[33][1], _L_, _K_);
    }
    return loop
            (0,
             max_concurrency,
             function(param){return caml_call2(Lwt[80], seq, 0);});
   }
   function unfold(f, u, param){
    try{var val = caml_call1(f, u);}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     if(caml_call1(Lwt[78][4], exc)) return caml_call1(Lwt[5], exc);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
    if(! val) return return_nil;
    var
     match = val[1],
     u$0 = match[2],
     x = match[1],
     _I_ = [0, x, function(_J_){return unfold(f, u$0, _J_);}];
    return caml_call1(Lwt[4], _I_);
   }
   function _i_(f, u, param){
    function _E_(x){
     if(! x) return return_nil;
     var
      match = x[1],
      u = match[2],
      x$0 = match[1],
      _G_ = [0, x$0, function(_H_){return _i_(f, u, _H_);}];
     return caml_call1(Lwt[4], _G_);
    }
    var _F_ = caml_call1(f, u);
    return caml_call2(Lwt[35][1], _F_, _E_);
   }
   function unfold_lwt(f, u, param){
    function _A_(x){
     if(! x) return return_nil;
     var
      match = x[1],
      u = match[2],
      x$0 = match[1],
      _C_ = [0, x$0, function(_D_){return _i_(f, u, _D_);}];
     return caml_call1(Lwt[4], _C_);
    }
    var _B_ = caml_call2(Lwt[80], f, u);
    return caml_call2(Lwt[35][1], _B_, _A_);
   }
   function of_list(param){
    if(! param) return empty;
    var t = param[2], h = param[1], _y_ = of_list(t);
    return function(_z_){return cons(h, _y_, _z_);};
   }
   function to_list(seq){
    function _u_(param){
     if(! param) return Lwt[38];
     var next = param[2], x = param[1];
     function _w_(l){return [0, x, l];}
     var _x_ = to_list(next);
     return caml_call2(Lwt[35][3], _x_, _w_);
    }
    var _v_ = caml_call1(seq, 0);
    return caml_call2(Lwt[33][1], _v_, _u_);
   }
   function to_list$0(seq){
    function _q_(param){
     if(! param) return Lwt[38];
     var next = param[2], x = param[1];
     function _s_(l){return [0, x, l];}
     var _t_ = to_list(next);
     return caml_call2(Lwt[35][3], _t_, _s_);
    }
    var _r_ = caml_call2(Lwt[80], seq, 0);
    return caml_call2(Lwt[33][1], _r_, _q_);
   }
   function of_seq(seq, param){
    try{var val = caml_call1(seq, 0);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(caml_call1(Lwt[78][4], exn)) return caml_call1(Lwt[5], exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    if(! val) return return_nil;
    var
     next = val[2],
     x = val[1],
     _o_ = [0, x, function(_p_){return of_seq(next, _p_);}];
    return caml_call1(Lwt[4], _o_);
   }
   function _j_(seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return return_nil;
    var next = match[2], x = match[1];
    function _m_(x){
     function next$0(_n_){return _j_(next, _n_);}
     return [0, x, next$0];
    }
    return caml_call2(Lwt[35][3], x, _m_);
   }
   function of_seq_lwt(seq, param){
    try{var val = caml_call1(seq, 0);}
    catch(exc$0){
     var exc = caml_wrap_exception(exc$0);
     if(caml_call1(Lwt[78][4], exc)) return caml_call1(Lwt[5], exc);
     throw caml_maybe_attach_backtrace(exc, 0);
    }
    if(! val) return return_nil;
    var next = val[2], x = val[1];
    function _k_(x){
     function next$0(_l_){return _j_(next, _l_);}
     return [0, x, next$0];
    }
    return caml_call2(Lwt[35][3], x, _k_);
   }
   var
    Lwt_seq =
      [0,
       empty,
       return$0,
       return_lwt,
       cons,
       cons_lwt,
       append,
       map,
       map_s,
       filter,
       filter_s,
       filter_map,
       filter_map_s,
       flat_map,
       fold_left,
       fold_left_s,
       iter,
       iter_s,
       iter_p,
       iter_n,
       unfold,
       unfold_lwt,
       to_list$0,
       of_list,
       of_seq,
       of_seq_lwt];
   runtime.caml_register_global(5, Lwt_seq, "Lwt_seq");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_stream
//# unitInfo: Requires: CamlinternalOO, Lwt, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__List, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst_blocked = "blocked",
    cst_close = "close",
    cst_closed = "closed",
    cst_count = "count",
    cst_push = "push",
    cst_resize = "resize",
    cst_set_reference = "set_reference",
    cst_size = "size",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    undef = undefined,
    global_data = runtime.caml_get_global_data(),
    cst$3 = "    ",
    cst$4 = "   ",
    cst$5 = " |",
    cst = cst$6,
    cst$0 = cst$6,
    cst$1 = cst$6,
    cst$2 = cst$6,
    shared =
      [0,
       cst_size,
       cst_set_reference,
       cst_resize,
       cst_push,
       cst_count,
       cst_closed,
       cst_close,
       cst_blocked],
    Lwt = global_data.Lwt,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib = global_data.Stdlib,
    CamlinternalOO = global_data.CamlinternalOO,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Array = global_data.Stdlib__Array,
    Closed = [248, "Lwt_stream.Closed", caml_fresh_oo_id(0)],
    Full = [248, "Lwt_stream.Full", caml_fresh_oo_id(0)],
    Empty = [248, "Lwt_stream.Empty", caml_fresh_oo_id(0)],
    _f_ = [0, [4, 6, [0, 2, 2], 0, [12, 32, 0]], "%02x "],
    _e_ = [0, [4, 6, [0, 2, 8], 0, [11, "|  ", 0]], "%08x|  "],
    cst_Lwt_stream_parse = "Lwt_stream.parse",
    _d_ =
      [0,
       [11,
        "Lwt_stream.iter_n: max_concurrency must be > 0, ",
        [4, 0, 0, 0, [11, " given", 0]]],
       "Lwt_stream.iter_n: max_concurrency must be > 0, %d given"],
    cst_Lwt_stream_create_bounded = "Lwt_stream.create_bounded",
    cst_Lwt_stream_bounded_push_re = "Lwt_stream.bounded_push#resize",
    cst_Lwt_stream_clone = "Lwt_stream.clone",
    _a_ =
      [0,
       cst_blocked,
       cst_close,
       cst_push,
       cst_count,
       cst_size,
       cst_set_reference,
       cst_resize,
       cst_closed],
    _b_ = [0, cst_closed];
   function new_node(param){
    var node = [];
    runtime.caml_update_dummy(node, [0, node, 0]);
    return node;
   }
   function clone(s){
    if(3 === s[1][0]) caml_call1(Stdlib[1], cst_Lwt_stream_clone);
    return [0, s[1], s[2], s[3], s[4], s[5]];
   }
   function from_source(source){
    var
     node = new_node(0),
     match = caml_call1(Lwt[1], 0),
     close = match[2],
     closed = match[1];
    return [0, source, close, closed, node, [0, node]];
   }
   function from(f){return from_source([0, [0, f, Lwt[36]]]);}
   function from_direct(f){return from_source([1, f]);}
   function closed(s){return s[3];}
   function is_closed(s){return 1 - caml_call1(Lwt[76], s[3]);}
   function enqueue(e, last){
    var node = last[1], new_last = new_node(0);
    node[2] = e;
    node[1] = new_last;
    last[1] = new_last;
    return;
   }
   function enqueue$0(e, s){return enqueue(e, s[5]);}
   function create_with_reference(param){
    var
     match = caml_call1(Lwt[1], 0),
     push_signal_resolver = match[2],
     push_signal = match[1],
     push_signal_resolver$0 = [0, push_signal_resolver],
     source = [0, push_signal, 0, 0],
     t = from_source([2, source]),
     close = t[2],
     closed = t[3],
     last = t[5];
    function push(x){
     if(1 - caml_call1(Lwt[76], closed))
      throw caml_maybe_attach_backtrace(Closed, 1);
     enqueue(x, last);
     if(source[2]){
      source[2] = 0;
      var
       old_push_signal_resolver = push_signal_resolver$0[1],
       match = caml_call1(Lwt[1], 0),
       new_push_signal_resolver = match[2],
       new_waiter = match[1];
      source[1] = new_waiter;
      push_signal_resolver$0[1] = new_push_signal_resolver;
      caml_call2(Lwt[2], old_push_signal_resolver, 0);
     }
     var _bZ_ = 0 === x ? 1 : 0;
     return _bZ_ ? caml_call2(Lwt[52], close, 0) : _bZ_;
    }
    return [0, t, push, function(x){source[3] = x; return 0;}];
   }
   function return$0(a){
    var match = create_with_reference(0), push = match[2], stream = match[1];
    caml_call1(push, [0, a]);
    caml_call1(push, 0);
    return stream;
   }
   function return_lwt(a){
    var match = create_with_reference(0), push = match[2], source = match[1];
    function _bW_(exc){return caml_call1(push, 0);}
    function _bX_(param){
     function _bY_(x){
      caml_call1(push, [0, x]);
      caml_call1(push, 0);
      return Lwt[36];
     }
     return caml_call2(Lwt[6], a, _bY_);
    }
    caml_call2(Lwt[10], _bX_, _bW_);
    return source;
   }
   function of_seq(s){
    var s$0 = [0, s];
    function get(param){
     var match = caml_call1(s$0[1], 0);
     if(! match) return 0;
     var s = match[2], elt = match[1];
     s$0[1] = s;
     return [0, elt];
    }
    return from_direct(get);
   }
   function of_lwt_seq(s){
    var s$0 = [0, s];
    function get(param){
     function _bU_(param){
      if(! param) return 0;
      var s = param[2], elt = param[1];
      s$0[1] = s;
      return [0, elt];
     }
     var _bV_ = caml_call1(s$0[1], 0);
     return caml_call2(Lwt[33][2], _bV_, _bU_);
    }
    return from(get);
   }
   function create(param){
    var match = create_with_reference(0), push = match[2], source = match[1];
    return [0, source, push];
   }
   function of_iter(iter, i){
    var match = create(0), push = match[2], stream = match[1];
    caml_call2(iter, function(x){return caml_call1(push, [0, x]);}, i);
    caml_call1(push, 0);
    return stream;
   }
   function of_list(l){return of_iter(Stdlib_List[17], l);}
   function of_array(a){return of_iter(Stdlib_Array[13], a);}
   function of_string(s){return of_iter(Stdlib_String[29], s);}
   function notify_pusher(info, last){
    enqueue(info[5], last);
    info[5] = 0;
    var
     old_wakener = info[7],
     match = caml_call1(Lwt[22], 0),
     wakener = match[2],
     waiter = match[1];
    info[6] = waiter;
    info[7] = wakener;
    return caml_call2(Lwt[2], old_wakener, 0);
   }
   function _c_(_bl_){
    var
     _bm_ = caml_call2(CamlinternalOO[3], _bl_, cst),
     _bn_ = caml_call2(CamlinternalOO[3], _bl_, cst$0),
     _bo_ = caml_call2(CamlinternalOO[3], _bl_, cst$1),
     _bp_ = caml_call2(CamlinternalOO[3], _bl_, cst$2),
     _bq_ = caml_call3(CamlinternalOO[4], _bl_, shared, _b_),
     _bz_ = _bq_[9],
     _br_ = _bq_[1],
     _bs_ = _bq_[2],
     _bt_ = _bq_[3],
     _bu_ = _bq_[4],
     _bv_ = _bq_[5],
     _bw_ = _bq_[6],
     _bx_ = _bq_[7],
     _by_ = _bq_[8];
    function _bA_(self_1, x){self_1[1 + _bm_][8] = x; return 0;}
    function _bB_(self_1){return self_1[1 + _bz_];}
    function _bC_(self_1){return 0 !== self_1[1 + _bm_][5] ? 1 : 0;}
    function _bD_(self_1){return self_1[1 + _bm_][4];}
    function _bE_(self_1){
     var _bT_ = 1 - self_1[1 + _bz_];
     if(! _bT_) return _bT_;
     self_1[1 + _bz_] = 1;
     var node = self_1[1 + _bo_][1], new_last = new_node(0);
     node[2] = 0;
     node[1] = new_last;
     self_1[1 + _bo_][1] = new_last;
     if(0 !== self_1[1 + _bm_][5]){
      self_1[1 + _bm_][5] = 0;
      caml_call2(Lwt[3], self_1[1 + _bm_][7], Closed);
     }
     if(self_1[1 + _bm_][2]){
      self_1[1 + _bm_][2] = 0;
      var old_wakener = self_1[1 + _bn_][1];
      caml_call2(Lwt[2], old_wakener, 0);
     }
     return caml_call2(Lwt[52], self_1[1 + _bp_], 0);
    }
    function _bF_(self_1, x){
     if(self_1[1 + _bz_]) return caml_call1(Lwt[5], Closed);
     if(0 !== self_1[1 + _bm_][5]) return caml_call1(Lwt[5], Full);
     if(self_1[1 + _bm_][3] <= self_1[1 + _bm_][4]){
      self_1[1 + _bm_][5] = [0, x];
      var
       _bR_ =
         function(exn){
          if(exn !== Lwt[21]) return caml_call1(Lwt[5], exn);
          self_1[1 + _bm_][5] = 0;
          var
           match = caml_call1(Lwt[22], 0),
           wakener = match[2],
           waiter = match[1];
          self_1[1 + _bm_][6] = waiter;
          self_1[1 + _bm_][7] = wakener;
          return caml_call1(Lwt[5], exn);
         },
       _bS_ = function(param){return self_1[1 + _bm_][6];};
      return caml_call2(Lwt[7], _bS_, _bR_);
     }
     enqueue([0, x], self_1[1 + _bo_]);
     self_1[1 + _bm_][4] = self_1[1 + _bm_][4] + 1 | 0;
     if(self_1[1 + _bm_][2]){
      self_1[1 + _bm_][2] = 0;
      var
       old_wakener = self_1[1 + _bn_][1],
       match = caml_call1(Lwt[1], 0),
       new_wakener = match[2],
       new_waiter = match[1];
      self_1[1 + _bm_][1] = new_waiter;
      self_1[1 + _bn_][1] = new_wakener;
      caml_call2(Lwt[2], old_wakener, 0);
     }
     return Lwt[36];
    }
    function _bG_(self_1, size){
     if(size < 0) caml_call1(Stdlib[1], cst_Lwt_stream_bounded_push_re);
     self_1[1 + _bm_][3] = size;
     var
      _bP_ = self_1[1 + _bm_][4] < self_1[1 + _bm_][3] ? 1 : 0,
      _bQ_ = _bP_ ? 0 !== self_1[1 + _bm_][5] ? 1 : 0 : _bP_;
     return _bQ_
             ? (self_1
                 [1 + _bm_]
                [4]
               = self_1[1 + _bm_][4] + 1 | 0,
               notify_pusher(self_1[1 + _bm_], self_1[1 + _bo_]))
             : _bQ_;
    }
    var
     _bH_ =
       [0,
        _br_,
        function(self_1){return self_1[1 + _bm_][3];},
        _bt_,
        _bG_,
        _bu_,
        _bF_,
        _bx_,
        _bE_,
        _bv_,
        _bD_,
        _by_,
        _bC_,
        _bw_,
        _bB_,
        _bs_,
        _bA_];
    caml_call2(CamlinternalOO[11], _bl_, _bH_);
    return function(_bN_, _bM_, _bL_, _bK_, _bJ_, _bI_){
     var _bO_ = caml_call2(CamlinternalOO[24], _bM_, _bl_);
     _bO_[1 + _bp_] = _bI_;
     _bO_[1 + _bo_] = _bJ_;
     _bO_[1 + _bn_] = _bK_;
     _bO_[1 + _bm_] = _bL_;
     _bO_[1 + _bz_] = 0;
     return _bO_;};
   }
   var bounded_push_impl = caml_call2(CamlinternalOO[19], _a_, _c_);
   function create_bounded(size){
    if(size < 0) caml_call1(Stdlib[1], cst_Lwt_stream_create_bounded);
    var
     match = caml_call1(Lwt[1], 0),
     wakener = match[2],
     waiter = match[1],
     match$0 = caml_call1(Lwt[22], 0),
     push_wakener = match$0[2],
     push_waiter = match$0[1],
     wakener_cell = [0, wakener],
     info = [0, waiter, 0, size, 0, 0, push_waiter, push_wakener, 0],
     t = from_source([3, info]);
    return [0,
            t,
            caml_call5
             (bounded_push_impl[1], 0, info, wakener_cell, t[5], t[2])];
   }
   function feed(s){
    var match = s[1];
    switch(match[0]){
      case 0:
       var from = match[1];
       if(caml_call1(Lwt[76], from[2])) return caml_call1(Lwt[25], from[2]);
       var
        _bj_ =
          function(x){
           enqueue$0(x, s);
           if(0 === x) caml_call2(Lwt[52], s[2], 0);
           return Lwt[36];
          },
        _bk_ = caml_call1(from[1], 0),
        thread = caml_call2(Lwt[33][1], _bk_, _bj_);
       from[2] = thread;
       return caml_call1(Lwt[25], thread);
      case 1:
       var f = match[1], x = caml_call1(f, 0);
       enqueue$0(x, s);
       if(0 === x) caml_call2(Lwt[52], s[2], 0);
       return Lwt[36];
      case 2:
       var push = match[1]; push[2] = 1; return caml_call1(Lwt[25], push[1]);
      default:
       var push$0 = match[1];
       push$0[2] = 1;
       return caml_call1(Lwt[25], push$0[1]);
    }
   }
   function consume(s, node){
    var _bi_ = node === s[4] ? 1 : 0;
    if(! _bi_) return _bi_;
    s[4] = node[1];
    var match = s[1];
    if(3 !== match[0]) return;
    var info = match[1];
    if(0 !== info[5]) return notify_pusher(info, s[5]);
    info[4] = info[4] - 1 | 0;
    return;
   }
   function peek_rec(s, node){
    if(node !== s[5][1]) return caml_call1(Lwt[4], node[2]);
    function _bg_(param){return peek_rec(s, node);}
    var _bh_ = feed(s);
    return caml_call2(Lwt[33][1], _bh_, _bg_);
   }
   function peek(s){return peek_rec(s, s[4]);}
   function npeek_rec(node, acc, n, s){
    var node$0 = node, acc$0 = acc, n$0 = n;
    for(;;){
     if(0 >= n$0){
      var _bf_ = caml_call1(Stdlib_List[9], acc$0);
      return caml_call1(Lwt[4], _bf_);
     }
     if(node$0 === s[5][1]){
      var
       _bc_ = function(param){return npeek_rec(node$0, acc$0, n$0, s);},
       _bd_ = feed(s);
      return caml_call2(Lwt[33][1], _bd_, _bc_);
     }
     var match = node$0[2];
     if(! match){
      var _be_ = caml_call1(Stdlib_List[9], acc$0);
      return caml_call1(Lwt[4], _be_);
     }
     var
      x = match[1],
      n$1 = n$0 - 1 | 0,
      acc$1 = [0, x, acc$0],
      node$1 = node$0[1],
      node$0 = node$1,
      acc$0 = acc$1,
      n$0 = n$1;
    }
   }
   function npeek(n, s){return npeek_rec(s[4], 0, n, s);}
   function get_rec(s, node){
    if(node === s[5][1]){
     var _ba_ = function(param){return get_rec(s, node);}, _bb_ = feed(s);
     return caml_call2(Lwt[33][1], _bb_, _ba_);
    }
    if(0 !== node[2]) consume(s, node);
    return caml_call1(Lwt[4], node[2]);
   }
   function get(s){return get_rec(s, s[4]);}
   function get_exn_rec(s, node){
    if(node === s[5][1]){
     var
      _a9_ = function(exn){return caml_call1(Lwt[4], [0, [1, exn]]);},
      _a__ = function(param){return get_exn_rec(s, node);},
      _a$_ = function(param){return feed(s);};
     return caml_call3(Lwt[9], _a$_, _a__, _a9_);
    }
    var match = node[2];
    if(! match) return Lwt[37];
    var value = match[1];
    consume(s, node);
    return caml_call1(Lwt[4], [0, [0, value]]);
   }
   function wrap_exn(s){
    return from(function(param){return get_exn_rec(s, s[4]);});
   }
   function nget_rec(node, acc, n, s){
    var node$0 = node, acc$0 = acc, n$0 = n;
    for(;;){
     if(0 >= n$0){
      var _a8_ = caml_call1(Stdlib_List[9], acc$0);
      return caml_call1(Lwt[4], _a8_);
     }
     if(node$0 === s[5][1]){
      var
       _a5_ = function(param){return nget_rec(node$0, acc$0, n$0, s);},
       _a6_ = feed(s);
      return caml_call2(Lwt[33][1], _a6_, _a5_);
     }
     var match = s[4][2];
     if(! match){
      var _a7_ = caml_call1(Stdlib_List[9], acc$0);
      return caml_call1(Lwt[4], _a7_);
     }
     var x = match[1];
     consume(s, node$0);
     var
      n$1 = n$0 - 1 | 0,
      acc$1 = [0, x, acc$0],
      node$1 = node$0[1],
      node$0 = node$1,
      acc$0 = acc$1,
      n$0 = n$1;
    }
   }
   function nget(n, s){return nget_rec(s[4], 0, n, s);}
   function get_while_rec(node, acc, f, s){
    var node$0 = node, acc$0 = acc;
    for(;;){
     if(node$0 === s[5][1]){
      var
       _a1_ = function(param){return get_while_rec(node$0, acc$0, f, s);},
       _a2_ = feed(s);
      return caml_call2(Lwt[33][1], _a2_, _a1_);
     }
     var match = node$0[2];
     if(! match){
      var _a4_ = caml_call1(Stdlib_List[9], acc$0);
      return caml_call1(Lwt[4], _a4_);
     }
     var x = match[1], test = caml_call1(f, x);
     if(! test){
      var _a3_ = caml_call1(Stdlib_List[9], acc$0);
      return caml_call1(Lwt[4], _a3_);
     }
     consume(s, node$0);
     var
      acc$1 = [0, x, acc$0],
      node$1 = node$0[1],
      node$0 = node$1,
      acc$0 = acc$1;
    }
   }
   function get_while(f, s){return get_while_rec(s[4], 0, f, s);}
   function get_while_s_rec(node, acc, f, s){
    if(node === s[5][1]){
     var
      _aV_ = function(param){return get_while_s_rec(node, acc, f, s);},
      _aW_ = feed(s);
     return caml_call2(Lwt[33][1], _aW_, _aV_);
    }
    var match = node[2];
    if(match){
     var
      x = match[1],
      _aX_ =
        function(param){
         if(param){
          consume(s, node);
          return get_while_s_rec(node[1], [0, x, acc], f, s);
         }
         var _a0_ = caml_call1(Stdlib_List[9], acc);
         return caml_call1(Lwt[4], _a0_);
        },
      _aY_ = caml_call1(f, x);
     return caml_call2(Lwt[33][1], _aY_, _aX_);
    }
    var _aZ_ = caml_call1(Stdlib_List[9], acc);
    return caml_call1(Lwt[4], _aZ_);
   }
   function get_while_s(f, s){return get_while_s_rec(s[4], 0, f, s);}
   function next_rec(s, node){
    if(node === s[5][1]){
     var _aT_ = function(param){return next_rec(s, node);}, _aU_ = feed(s);
     return caml_call2(Lwt[33][1], _aU_, _aT_);
    }
    var match = node[2];
    if(! match) return caml_call1(Lwt[5], Empty);
    var x = match[1];
    consume(s, node);
    return caml_call1(Lwt[4], x);
   }
   function next(s){return next_rec(s, s[4]);}
   function last_new_rec(node, x, s){
    var node$0 = node, x$0 = x;
    for(;;)
     if(node$0 === s[5][1]){
      var thread = feed(s), match = caml_call1(Lwt[48], thread);
      if(typeof match === "number") return caml_call1(Lwt[4], x$0);
      if(0 !== match[0]){var exn = match[1]; return caml_call1(Lwt[5], exn);}
     }
     else{
      var match$0 = node$0[2];
      if(! match$0) return caml_call1(Lwt[4], x$0);
      var x$1 = match$0[1];
      consume(s, node$0);
      var node$1 = node$0[1], node$0 = node$1, x$0 = x$1;
     }
   }
   function last_new(s){
    var node = s[4];
    if(node !== s[5][1]){
     var match$0 = node[2];
     if(! match$0) return caml_call1(Lwt[5], Empty);
     var x$0 = match$0[1];
     consume(s, node);
     return last_new_rec(node[1], x$0, s);
    }
    var thread = next(s), match = caml_call1(Lwt[48], thread);
    if(typeof match !== "number" && 0 === match[0]){
     var x = match[1];
     return last_new_rec(node, x, s);
    }
    return thread;
   }
   function to_list_rec(node, acc, s){
    var node$0 = node, acc$0 = acc;
    for(;;){
     if(node$0 === s[5][1]){
      var
       _aQ_ = function(param){return to_list_rec(node$0, acc$0, s);},
       _aR_ = feed(s);
      return caml_call2(Lwt[33][1], _aR_, _aQ_);
     }
     var match = node$0[2];
     if(! match){
      var _aS_ = caml_call1(Stdlib_List[9], acc$0);
      return caml_call1(Lwt[4], _aS_);
     }
     var x = match[1];
     consume(s, node$0);
     var
      acc$1 = [0, x, acc$0],
      node$1 = node$0[1],
      node$0 = node$1,
      acc$0 = acc$1;
    }
   }
   function to_list(s){return to_list_rec(s[4], 0, s);}
   function to_string_rec(node, buf, s){
    var node$0 = node;
    for(;;){
     if(node$0 === s[5][1]){
      var
       _aN_ = function(param){return to_string_rec(node$0, buf, s);},
       _aO_ = feed(s);
      return caml_call2(Lwt[33][1], _aO_, _aN_);
     }
     var match = node$0[2];
     if(! match){
      var _aP_ = caml_call1(Stdlib_Buffer[2], buf);
      return caml_call1(Lwt[4], _aP_);
     }
     var x = match[1];
     consume(s, node$0);
     caml_call2(Stdlib_Buffer[12], buf, x);
     var node$1 = node$0[1], node$0 = node$1;
    }
   }
   function to_string(s){
    var _aM_ = caml_call1(Stdlib_Buffer[1], 128);
    return to_string_rec(s[4], _aM_, s);
   }
   function junk(s){
    var node = s[4];
    if(node === s[5][1]){
     var
      _aK_ =
        function(param){if(0 !== node[2]) consume(s, node); return Lwt[36];},
      _aL_ = feed(s);
     return caml_call2(Lwt[33][1], _aL_, _aK_);
    }
    if(0 !== node[2]) consume(s, node);
    return Lwt[36];
   }
   function njunk_rec(node, n, s){
    var node$0 = node, n$0 = n;
    for(;;){
     if(0 >= n$0) return Lwt[36];
     if(node$0 === s[5][1]){
      var
       _aI_ = function(param){return njunk_rec(node$0, n$0, s);},
       _aJ_ = feed(s);
      return caml_call2(Lwt[33][1], _aJ_, _aI_);
     }
     if(! node$0[2]) return Lwt[36];
     consume(s, node$0);
     var n$1 = n$0 - 1 | 0, node$1 = node$0[1], node$0 = node$1, n$0 = n$1;
    }
   }
   function njunk(n, s){return njunk_rec(s[4], n, s);}
   function junk_while_rec(node, f, s){
    var node$0 = node;
    for(;;){
     if(node$0 === s[5][1]){
      var
       _aG_ = function(param){return junk_while_rec(node$0, f, s);},
       _aH_ = feed(s);
      return caml_call2(Lwt[33][1], _aH_, _aG_);
     }
     var match = node$0[2];
     if(! match) return Lwt[36];
     var x = match[1], test = caml_call1(f, x);
     if(! test) return Lwt[36];
     consume(s, node$0);
     var node$1 = node$0[1], node$0 = node$1;
    }
   }
   function junk_while(f, s){return junk_while_rec(s[4], f, s);}
   function junk_while_s_rec(node, f, s){
    if(node === s[5][1]){
     var
      _aC_ = function(param){return junk_while_s_rec(node, f, s);},
      _aD_ = feed(s);
     return caml_call2(Lwt[33][1], _aD_, _aC_);
    }
    var match = node[2];
    if(! match) return Lwt[36];
    var x = match[1];
    function _aE_(param){
     return param
             ? (consume(s, node), junk_while_s_rec(node[1], f, s))
             : Lwt[36];
    }
    var _aF_ = caml_call1(f, x);
    return caml_call2(Lwt[33][1], _aF_, _aE_);
   }
   function junk_while_s(f, s){return junk_while_s_rec(s[4], f, s);}
   function junk_old(s){
    var node$1 = s[4], node = node$1;
    for(;;)
     if(node === s[5][1]){
      var thread = feed(s), match = caml_call1(Lwt[48], thread);
      if(typeof match === "number") return Lwt[36];
      if(0 !== match[0]){var exn = match[1]; return caml_call1(Lwt[5], exn);}
     }
     else{
      if(! node[2]) return Lwt[36];
      consume(s, node);
      var node$0 = node[1], node = node$0;
     }
   }
   function get_available(s){
    var node$1 = s[4], node = node$1, acc = 0;
    for(;;)
     if(node === s[5][1]){
      var thread = feed(s), match = caml_call1(Lwt[48], thread);
      if(typeof match === "number") return caml_call1(Stdlib_List[9], acc);
      if(0 !== match[0]){
       var exn = match[1];
       throw caml_maybe_attach_backtrace(exn, 1);
      }
     }
     else{
      var match$0 = node[2];
      if(! match$0) return caml_call1(Stdlib_List[9], acc);
      var x = match$0[1];
      consume(s, node);
      var acc$0 = [0, x, acc], node$0 = node[1], node = node$0, acc = acc$0;
     }
   }
   function get_available_up_to(n$1, s){
    var node$1 = s[4], node = node$1, acc = 0, n = n$1;
    for(;;){
     if(0 >= n) return caml_call1(Stdlib_List[9], acc);
     if(node === s[5][1]){
      var thread = feed(s), match = caml_call1(Lwt[48], thread);
      if(typeof match === "number") return caml_call1(Stdlib_List[9], acc);
      if(0 !== match[0]){
       var exn = match[1];
       throw caml_maybe_attach_backtrace(exn, 1);
      }
     }
     else{
      var match$0 = s[4][2];
      if(! match$0) return caml_call1(Stdlib_List[9], acc);
      var x = match$0[1];
      consume(s, node);
      var
       n$0 = n - 1 | 0,
       acc$0 = [0, x, acc],
       node$0 = node[1],
       node = node$0,
       acc = acc$0,
       n = n$0;
     }
    }
   }
   function is_empty(s){
    if(s[4] !== s[5][1]) return caml_call1(Lwt[4], 0 === s[4][2] ? 1 : 0);
    function _aA_(param){return is_empty(s);}
    var _aB_ = feed(s);
    return caml_call2(Lwt[33][1], _aB_, _aA_);
   }
   function map(f, s){
    return from
            (function(param){
              function _ay_(param){
               if(! param) return 0;
               var x = param[1], x$0 = caml_call1(f, x);
               return [0, x$0];
              }
              var _az_ = get(s);
              return caml_call2(Lwt[33][2], _az_, _ay_);
             });
   }
   function map_s(f, s){
    return from
            (function(param){
              function _au_(param){
               if(! param) return Lwt[37];
               var x = param[1];
               function _aw_(x){return [0, x];}
               var _ax_ = caml_call1(f, x);
               return caml_call2(Lwt[33][2], _ax_, _aw_);
              }
              var _av_ = get(s);
              return caml_call2(Lwt[33][1], _av_, _au_);
             });
   }
   function filter(f, s){
    function next(param){
     var t = get(s);
     function _at_(param){
      if(! param) return Lwt[37];
      var x = param[1], test = caml_call1(f, x);
      return test ? t : next(0);
     }
     return caml_call2(Lwt[33][1], t, _at_);
    }
    return from(next);
   }
   function filter_s(f, s){
    function next(param){
     var t = get(s);
     function _aq_(param){
      if(! param) return t;
      var x = param[1];
      function _ar_(param){return param ? t : next(0);}
      var _as_ = caml_call1(f, x);
      return caml_call2(Lwt[33][1], _as_, _ar_);
     }
     return caml_call2(Lwt[33][1], t, _aq_);
    }
    return from(next);
   }
   function filter_map(f, s){
    function next(param){
     function _ao_(param){
      if(! param) return Lwt[37];
      var x = param[1], x$0 = caml_call1(f, x);
      return x$0 ? caml_call1(Lwt[4], x$0) : next(0);
     }
     var _ap_ = get(s);
     return caml_call2(Lwt[33][1], _ap_, _ao_);
    }
    return from(next);
   }
   function filter_map_s(f, s){
    function next(param){
     function _al_(param){
      if(! param) return Lwt[37];
      var x = param[1], t = caml_call1(f, x);
      function _an_(param){return param ? t : next(0);}
      return caml_call2(Lwt[33][1], t, _an_);
     }
     var _am_ = get(s);
     return caml_call2(Lwt[33][1], _am_, _al_);
    }
    return from(next);
   }
   function map_list(f, s){
    var pendings = [0, 0];
    function next(param){
     var match = pendings[1];
     if(match){
      var l = match[2], x = match[1];
      pendings[1] = l;
      return caml_call1(Lwt[4], [0, x]);
     }
     function _aj_(param){
      if(! param) return Lwt[37];
      var x = param[1], l = caml_call1(f, x);
      pendings[1] = l;
      return next(0);
     }
     var _ak_ = get(s);
     return caml_call2(Lwt[33][1], _ak_, _aj_);
    }
    return from(next);
   }
   function map_list_s(f, s){
    var pendings = [0, 0];
    function next(param){
     var match = pendings[1];
     if(match){
      var l = match[2], x = match[1];
      pendings[1] = l;
      return caml_call1(Lwt[4], [0, x]);
     }
     function _af_(param){
      if(! param) return Lwt[37];
      var x = param[1];
      function _ah_(l){pendings[1] = l; return next(0);}
      var _ai_ = caml_call1(f, x);
      return caml_call2(Lwt[33][1], _ai_, _ah_);
     }
     var _ag_ = get(s);
     return caml_call2(Lwt[33][1], _ag_, _af_);
    }
    return from(next);
   }
   function flatten(s){return map_list(function(l){return l;}, s);}
   function fold_rec(node, f, s, acc){
    var node$0 = node, acc$0 = acc;
    for(;;){
     if(node$0 === s[5][1]){
      var
       _ad_ = function(param){return fold_rec(node$0, f, s, acc$0);},
       _ae_ = feed(s);
      return caml_call2(Lwt[33][1], _ae_, _ad_);
     }
     var match = node$0[2];
     if(! match) return caml_call1(Lwt[4], acc$0);
     var x = match[1];
     consume(s, node$0);
     var
      acc$1 = caml_call2(f, x, acc$0),
      node$1 = node$0[1],
      node$0 = node$1,
      acc$0 = acc$1;
    }
   }
   function fold(f, s, acc){return fold_rec(s[4], f, s, acc);}
   function fold_s_rec(node, f, s, acc){
    if(node === s[5][1]){
     var
      _$_ = function(param){return fold_s_rec(node, f, s, acc);},
      _aa_ = feed(s);
     return caml_call2(Lwt[33][1], _aa_, _$_);
    }
    var match = node[2];
    if(! match) return caml_call1(Lwt[4], acc);
    var x = match[1];
    consume(s, node);
    function _ab_(acc){return fold_s_rec(node[1], f, s, acc);}
    var _ac_ = caml_call2(f, x, acc);
    return caml_call2(Lwt[33][1], _ac_, _ab_);
   }
   function fold_s(f, s, acc){return fold_s_rec(s[4], f, s, acc);}
   function iter_rec(node, f, s){
    var node$0 = node;
    for(;;){
     if(node$0 === s[5][1]){
      var
       _Z_ = function(param){return iter_rec(node$0, f, s);},
       ___ = feed(s);
      return caml_call2(Lwt[33][1], ___, _Z_);
     }
     var match = node$0[2];
     if(! match) return Lwt[36];
     var x = match[1];
     consume(s, node$0);
     caml_call1(f, x);
     var node$1 = node$0[1], node$0 = node$1;
    }
   }
   function iter(f, s){return iter_rec(s[4], f, s);}
   function iter_s_rec(node, f, s){
    if(node === s[5][1]){
     var _V_ = function(param){return iter_s_rec(node, f, s);}, _W_ = feed(s);
     return caml_call2(Lwt[33][1], _W_, _V_);
    }
    var match = node[2];
    if(! match) return Lwt[36];
    var x = match[1];
    consume(s, node);
    function _X_(param){return iter_s_rec(node[1], f, s);}
    var _Y_ = caml_call1(f, x);
    return caml_call2(Lwt[33][1], _Y_, _X_);
   }
   function iter_s(f, s){return iter_s_rec(s[4], f, s);}
   function iter_p_rec(node, f, s){
    if(node === s[5][1]){
     var _S_ = function(param){return iter_p_rec(node, f, s);}, _T_ = feed(s);
     return caml_call2(Lwt[33][1], _T_, _S_);
    }
    var match = node[2];
    if(! match) return Lwt[36];
    var x = match[1];
    consume(s, node);
    var res = caml_call1(f, x), rest = iter_p_rec(node[1], f, s);
    function _U_(param){return rest;}
    return caml_call2(Lwt[33][1], res, _U_);
   }
   function iter_p(f, s){return iter_p_rec(s[4], f, s);}
   function iter_n(opt, f, stream){
    if(opt)
     var sth = opt[1], max_concurrency = sth;
    else
     var max_concurrency = 1;
    if(max_concurrency <= 0){
     var message = caml_call2(Stdlib_Printf[4], _d_, max_concurrency);
     caml_call1(Stdlib[1], message);
    }
    function loop(running, available){
     function _L_(param){
      var available = param[2], running = param[1];
      function _Q_(param){
       if(! param) return caml_call1(Lwt[14], running);
       var elt = param[1];
       return loop([0, caml_call1(f, elt), running], available - 1 | 0);
      }
      var _R_ = get(stream);
      return caml_call2(Lwt[33][1], _R_, _Q_);
     }
     if(0 < available)
      var _M_ = caml_call1(Lwt[4], [0, running, available]);
     else
      var
       _N_ =
         function(param){
          var
           running = param[2],
           complete = param[1],
           _P_ =
             [0,
              running,
              available + caml_call1(Stdlib_List[1], complete) | 0];
          return caml_call1(Lwt[4], _P_);
         },
       _O_ = caml_call1(Lwt[20], running),
       _M_ = caml_call2(Lwt[33][1], _O_, _N_);
     return caml_call2(Lwt[33][1], _M_, _L_);
    }
    return loop(0, max_concurrency);
   }
   function find_rec(node, f, s){
    var node$0 = node;
    for(;;){
     if(node$0 === s[5][1]){
      var
       _J_ = function(param){return find_rec(node$0, f, s);},
       _K_ = feed(s);
      return caml_call2(Lwt[33][1], _K_, _J_);
     }
     var opt = node$0[2];
     if(! opt) return Lwt[37];
     var x = opt[1];
     consume(s, node$0);
     var test = caml_call1(f, x);
     if(test) return caml_call1(Lwt[4], opt);
     var node$1 = node$0[1], node$0 = node$1;
    }
   }
   function find(f, s){return find_rec(s[4], f, s);}
   function find_s_rec(node, f, s){
    if(node === s[5][1]){
     var _F_ = function(param){return find_s_rec(node, f, s);}, _G_ = feed(s);
     return caml_call2(Lwt[33][1], _G_, _F_);
    }
    var opt = node[2];
    if(! opt) return Lwt[37];
    var x = opt[1];
    consume(s, node);
    function _H_(param){
     return param ? caml_call1(Lwt[4], opt) : find_s_rec(node[1], f, s);
    }
    var _I_ = caml_call1(f, x);
    return caml_call2(Lwt[33][1], _I_, _H_);
   }
   function find_s(f, s){return find_s_rec(s[4], f, s);}
   function find_map_rec(node, f, s){
    var node$0 = node;
    for(;;){
     if(node$0 === s[5][1]){
      var
       _D_ = function(param){return find_map_rec(node$0, f, s);},
       _E_ = feed(s);
      return caml_call2(Lwt[33][1], _E_, _D_);
     }
     var match = node$0[2];
     if(! match) return Lwt[37];
     var x = match[1];
     consume(s, node$0);
     var x$0 = caml_call1(f, x);
     if(0 !== x$0) return caml_call1(Lwt[4], x$0);
     var node$1 = node$0[1], node$0 = node$1;
    }
   }
   function find_map(f, s){return find_map_rec(s[4], f, s);}
   function find_map_s_rec(node, f, s){
    if(node === s[5][1]){
     var
      _A_ = function(param){return find_map_s_rec(node, f, s);},
      _B_ = feed(s);
     return caml_call2(Lwt[33][1], _B_, _A_);
    }
    var match = node[2];
    if(! match) return Lwt[37];
    var x = match[1];
    consume(s, node);
    var t = caml_call1(f, x);
    function _C_(param){return param ? t : find_map_s_rec(node[1], f, s);}
    return caml_call2(Lwt[33][1], t, _C_);
   }
   function find_map_s(f, s){return find_map_s_rec(s[4], f, s);}
   function combine(s1, s2){
    function next(param){
     var t1 = get(s1), t2 = get(s2);
     function _y_(n1){
      function _z_(n2){
       if(n1 && n2){
        var x2 = n2[1], x1 = n1[1];
        return caml_call1(Lwt[4], [0, [0, x1, x2]]);
       }
       return Lwt[37];
      }
      return caml_call2(Lwt[33][1], t2, _z_);
     }
     return caml_call2(Lwt[33][1], t1, _y_);
    }
    return from(next);
   }
   function append(s1, s2){
    var current_s = [0, s1];
    function next(param){
     var t = get(current_s[1]);
     function _x_(param){
      return param
              ? t
              : current_s[1] === s2 ? Lwt[37] : (current_s[1] = s2, next(0));
     }
     return caml_call2(Lwt[33][1], t, _x_);
    }
    return from(next);
   }
   function concat(s_top){
    var current_s = [0, from(function(param){return Lwt[37];})];
    function next(param){
     var t = get(current_s[1]);
     function _u_(param){
      if(param) return t;
      function _v_(param){
       if(! param) return Lwt[37];
       var s = param[1];
       current_s[1] = s;
       return next(0);
      }
      var _w_ = get(s_top);
      return caml_call2(Lwt[33][1], _w_, _v_);
     }
     return caml_call2(Lwt[33][1], t, _u_);
    }
    return from(next);
   }
   function choose(streams){
    function source(s){
     function _s_(x){return [0, s, x];}
     var _t_ = get(s);
     return [0, s, caml_call2(Lwt[33][2], _t_, _s_)];
    }
    var streams$0 = [0, caml_call2(Stdlib_List[19], source, streams)];
    function next(param){
     var l = streams$0[1];
     if(! l) return Lwt[37];
     function _n_(param){
      var x = param[2], s = param[1], l$0 = caml_call2(Stdlib_List[53], s, l);
      return x
              ? (streams$0[1] = [0, source(s), l$0], caml_call1(Lwt[4], x))
              : (streams$0[1] = l$0, next(0));
     }
     function _o_(_r_){return _r_[2];}
     var
      _p_ = caml_call2(Stdlib_List[19], _o_, l),
      _q_ = caml_call1(Lwt[17], _p_);
     return caml_call2(Lwt[33][1], _q_, _n_);
    }
    return from(next);
   }
   function parse(s, f){
    if(3 === s[1][0]) caml_call1(Stdlib[1], cst_Lwt_stream_parse);
    var node = s[4];
    function _l_(exn){s[4] = node; return caml_call1(Lwt[5], exn);}
    function _m_(param){return caml_call1(f, s);}
    return caml_call2(Lwt[7], _m_, _l_);
   }
   function hexdump(stream){
    var buf = caml_call1(Stdlib_Buffer[1], 80), num = [0, 0];
    return from
            (function(param){
              function _g_(l){
               if(! l) return Lwt[37];
               caml_call1(Stdlib_Buffer[8], buf);
               caml_call3(Stdlib_Printf[5], buf, _e_, num[1]);
               num[1] = num[1] + 16 | 0;
               var pos = 0, param = l;
               for(;;){
                if(! param) break;
                var l$0 = param[2], x = param[1];
                if(8 === pos) caml_call2(Stdlib_Buffer[12], buf, 32);
                caml_call3(Stdlib_Printf[5], buf, _f_, x);
                var pos$0 = pos + 1 | 0, pos = pos$0, param = l$0;
               }
               var pos$1 = pos;
               for(;;){
                if(pos$1 >= 16){
                 caml_call2(Stdlib_Buffer[16], buf, cst$5);
                 var
                  _i_ =
                    function(ch){
                     a:
                     {
                      if(32 <= ch && 126 >= ch){var _k_ = ch; break a;}
                      var _k_ = 46;
                     }
                     return caml_call2(Stdlib_Buffer[12], buf, _k_);
                    };
                 caml_call2(Stdlib_List[17], _i_, l);
                 caml_call2(Stdlib_Buffer[12], buf, 124);
                 var _j_ = [0, caml_call1(Stdlib_Buffer[2], buf)];
                 return caml_call1(Lwt[4], _j_);
                }
                if(8 === pos$1)
                 caml_call2(Stdlib_Buffer[16], buf, cst$3);
                else
                 caml_call2(Stdlib_Buffer[16], buf, cst$4);
                var pos$2 = pos$1 + 1 | 0, pos$1 = pos$2;
               }
              }
              var _h_ = nget(16, stream);
              return caml_call2(Lwt[33][1], _h_, _g_);
             });
   }
   var
    Lwt_stream =
      [0,
       from,
       from_direct,
       Closed,
       create,
       create_with_reference,
       Full,
       create_bounded,
       return$0,
       return_lwt,
       of_seq,
       of_lwt_seq,
       of_list,
       of_array,
       of_string,
       clone,
       to_list,
       to_string,
       Empty,
       peek,
       npeek,
       get,
       nget,
       get_while,
       get_while_s,
       next,
       last_new,
       junk,
       njunk,
       junk_while,
       junk_while_s,
       junk_old,
       get_available,
       get_available_up_to,
       is_empty,
       is_closed,
       closed,
       choose,
       map,
       map_s,
       filter,
       filter_s,
       filter_map,
       filter_map_s,
       map_list,
       map_list_s,
       fold,
       fold_s,
       iter,
       iter_p,
       iter_s,
       iter_n,
       find,
       find_s,
       find_map,
       find_map_s,
       combine,
       append,
       concat,
       flatten,
       wrap_exn,
       parse,
       hexdump];
   runtime.caml_register_global(28, Lwt_stream, "Lwt_stream");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_result
//# unitInfo: Requires: Assert_failure, Lwt
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, "src/core/lwt_result.ml", 84, 14];
   function return$0(x){return caml_call1(Lwt[4], [0, x]);}
   function fail(e){return caml_call1(Lwt[4], [1, e]);}
   var lift = Lwt[4];
   function ok(x){
    function _r_(y){return [0, y];}
    return caml_call2(Lwt[28], _r_, x);
   }
   function error(x){
    function _q_(y){return [1, y];}
    return caml_call2(Lwt[28], _q_, x);
   }
   function map(f, e){
    function _p_(param){
     if(0 === param[0]){var x = param[1]; return [0, caml_call1(f, x)];}
     var e = param[1];
     return [1, e];
    }
    return caml_call2(Lwt[28], _p_, e);
   }
   function map_error(f, e){
    function _o_(param){
     if(0 === param[0]){var x = param[1]; return [0, x];}
     var e = param[1];
     return [1, caml_call1(f, e)];
    }
    return caml_call2(Lwt[28], _o_, e);
   }
   function map_err(f, e){return map_error(f, e);}
   function catch$0(e){
    function _n_(param){return ok(caml_call1(e, 0));}
    return caml_call2(Lwt[7], _n_, fail);
   }
   function get_exn(e){
    function _m_(param){
     if(0 === param[0]){var x = param[1]; return caml_call1(Lwt[4], x);}
     var e = param[1];
     return caml_call1(Lwt[5], e);
    }
    return caml_call2(Lwt[6], e, _m_);
   }
   function symbol_bind(e, f){
    function _l_(param){
     if(0 === param[0]){var x = param[1]; return caml_call1(f, x);}
     var e = param[1];
     return caml_call1(Lwt[4], [1, e]);
    }
    return caml_call2(Lwt[6], e, _l_);
   }
   function bind_error(e, f){
    function _k_(param){
     if(0 === param[0]){var x = param[1]; return caml_call1(Lwt[4], [0, x]);}
     var e = param[1];
     return caml_call1(f, e);
    }
    return caml_call2(Lwt[6], e, _k_);
   }
   function bind_lwt(e, f){
    function _j_(param){
     if(0 === param[0]){var x = param[1]; return ok(caml_call1(f, x));}
     var e = param[1];
     return fail(e);
    }
    return caml_call2(Lwt[6], e, _j_);
   }
   function bind_result(e, f){
    function _i_(param){
     if(0 === param[0]){var x = param[1]; return caml_call1(f, x);}
     var e = param[1];
     return [1, e];
    }
    return caml_call2(Lwt[28], _i_, e);
   }
   function bind_lwt_error(e, f){
    function _g_(param){
     if(0 === param[0]){var x = param[1]; return return$0(x);}
     var e = param[1], _h_ = caml_call1(f, e);
     return caml_call2(Lwt[6], _h_, fail);
    }
    return caml_call2(Lwt[6], e, _g_);
   }
   function bind_lwt_err(e, f){return bind_lwt_error(e, f);}
   function both(a, b){
    var s = [0, 0];
    function set_once(e){return s[1] ? 0 : (s[1] = [0, e], 0);}
    var
     b$0 = map_error(set_once, b),
     a$0 = map_error(set_once, a),
     _d_ = caml_call2(Lwt[13], a$0, b$0);
    function _e_(param){
     var _f_ = param[1];
     if(0 === _f_[0]){
      var match = param[2], x = _f_[1];
      if(0 === match[0]){var y = match[1]; return [0, [0, x, y]];}
     }
     var param$0 = s[1];
     if(! param$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     var e = param$0[1];
     return [1, e];
    }
    return caml_call2(Lwt[28], _e_, _d_);
   }
   function iter(f, r){
    function _c_(param){
     if(0 !== param[0]) return Lwt[36];
     var x = param[1];
     return caml_call1(f, x);
    }
    return caml_call2(Lwt[6], r, _c_);
   }
   function iter_error(f, r){
    function _b_(param){
     if(0 === param[0]) return Lwt[36];
     var e = param[1];
     return caml_call1(f, e);
    }
    return caml_call2(Lwt[6], r, _b_);
   }
   function symbol(e, f){return map(f, e);}
   function map$0(t, f){return map(f, t);}
   function bind(t, f){return symbol_bind(t, f);}
   var
    Open_on_rhs = [0],
    Let_syntax = [0, return$0, map$0, bind, both, Open_on_rhs],
    Let_syntax$0 = [0, Let_syntax];
   function let$0(x, f){return map(f, x);}
   var
    Syntax = [0, symbol_bind, both, let$0, both],
    Lwt_result =
      [0,
       return$0,
       fail,
       lift,
       ok,
       error,
       catch$0,
       get_exn,
       map,
       map_error,
       symbol_bind,
       bind_error,
       bind_lwt,
       bind_lwt_error,
       bind_result,
       both,
       iter,
       iter_error,
       [0, symbol, symbol_bind],
       Let_syntax$0,
       Syntax,
       symbol,
       symbol_bind,
       map_err,
       bind_lwt_err];
   runtime.caml_register_global(3, Lwt_result, "Lwt_result");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_pqueue
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    _a_ = [0, "src/core/lwt_pqueue.ml", 81, 15];
   function Make(Ord){
    function link(t1, t2){
     var
      c2 = t2[3],
      r2 = t2[2],
      x2 = t2[1],
      c1 = t1[3],
      r1 = t1[2],
      x1 = t1[1],
      c = caml_call2(Ord[1], x1, x2);
     return 0 < c
             ? [0, x2, r2 + 1 | 0, [0, t1, c2]]
             : [0, x1, r1 + 1 | 0, [0, t2, c1]];
    }
    function ins(t, ts){
     var t$0 = t, ts$0 = ts;
     for(;;){
      if(! ts$0) return [0, t$0, 0];
      var t$1 = ts$0[1];
      if(t$0[2] < t$1[2]) return [0, t$0, ts$0];
      var ts$1 = ts$0[2], t$2 = link(t$0, t$1), t$0 = t$2, ts$0 = ts$1;
     }
    }
    var empty = 0;
    function is_empty(ts){return 0 === ts ? 1 : 0;}
    function add(x, ts){return ins([0, x, 0, 0], ts);}
    function union(ts$0, ts){
     if(! ts$0) return ts;
     if(! ts) return ts$0;
     var ts2 = ts[2], t2 = ts[1], ts1 = ts$0[2], t1 = ts$0[1];
     if(t1[2] < t2[2]) return [0, t1, union(ts1, [0, t2, ts2])];
     if(t2[2] < t1[2]) return [0, t2, union([0, t1, ts1], ts2)];
     var _e_ = union(ts1, ts2);
     return ins(link(t1, t2), _e_);
    }
    function find_min(param){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var t = param[1];
     if(! param[2]) return t[1];
     var ts = param[2], x = find_min(ts), c = caml_call2(Ord[1], t[1], x);
     return 0 <= c ? x : t[1];
    }
    function lookup_min(param){
     if(! param) return 0;
     var t = param[1];
     if(! param[2]) return [0, t[1]];
     var ts = param[2], result = lookup_min(ts);
     if(! result) return 0;
     var x = result[1], c = caml_call2(Ord[1], t[1], x);
     return 0 <= c ? result : [0, t[1]];
    }
    function get_min(param){
     if(! param)
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     var t = param[1];
     if(! param[2]) return [0, t, 0];
     var
      ts = param[2],
      match = get_min(ts),
      ts$0 = match[2],
      t$0 = match[1],
      c = caml_call2(Ord[1], t[1], t$0[1]);
     return 0 <= c ? [0, t$0, [0, t, ts$0]] : [0, t, ts];
    }
    function remove_min(ts){
     if(! ts) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var _d_ = get_min(ts), ts$0 = _d_[2], c = _d_[1][3];
     return union(caml_call1(Stdlib_List[9], c), ts$0);
    }
    function size(l){
     var _b_ = 0;
     function _c_(s, t){var tl = t[3]; return s + (1 + size(tl) | 0) | 0;}
     return caml_call3(Stdlib_List[25], _c_, _b_, l);
    }
    return [0,
            empty,
            is_empty,
            add,
            union,
            find_min,
            lookup_min,
            remove_min,
            size];
   }
   var Lwt_pqueue = [0, Make];
   runtime.caml_register_global(4, Lwt_pqueue, "Lwt_pqueue");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_list
//# unitInfo: Requires: Lwt, Stdlib, Stdlib__List
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List;
   function tail_recursive_map(f, l){
    var _an_ = caml_call2(Stdlib_List[21], f, l);
    return caml_call1(Stdlib_List[9], _an_);
   }
   function tail_recursive_mapi_rev(f, l){
    var acc = 0, i = 0, param = l;
    for(;;){
     if(! param) return acc;
     var
      tl = param[2],
      hd = param[1],
      i$0 = i + 1 | 0,
      acc$0 = [0, caml_call2(f, i, hd), acc],
      acc = acc$0,
      i = i$0,
      param = tl;
    }
   }
   function iter_s(f, l){
    if(! l) return Lwt[36];
    var l$0 = l[2], x = l[1];
    function _al_(param){return iter_s(f, l$0);}
    var _am_ = caml_call2(Lwt[80], f, x);
    return caml_call2(Lwt[33][1], _am_, _al_);
   }
   function iter_p(f, l){
    var
     _ak_ = caml_call1(Lwt[80], f),
     ts = caml_call2(Stdlib_List[21], _ak_, l);
    return caml_call1(Lwt[14], ts);
   }
   function _a_(i, f, l){
    if(! l) return Lwt[36];
    var l$0 = l[2], x = l[1];
    function _ah_(param){return _a_(i + 1 | 0, f, l$0);}
    var _ai_ = caml_call1(f, i), _aj_ = caml_call2(Lwt[80], _ai_, x);
    return caml_call2(Lwt[33][1], _aj_, _ah_);
   }
   function iteri_s(f, l){return _a_(0, f, l);}
   function iteri_p(f, l){
    function f$0(i){
     var _ag_ = caml_call1(f, i);
     return caml_call1(Lwt[80], _ag_);
    }
    var ts = tail_recursive_mapi_rev(f$0, l);
    return caml_call1(Lwt[14], ts);
   }
   function map_s(f, l){
    function inner(acc, param){
     if(param){
      var
       tl = param[2],
       hd = param[1],
       _ad_ = function(r){return inner([0, r, acc], tl);},
       _ae_ = caml_call2(Lwt[80], f, hd);
      return caml_call2(Lwt[33][1], _ae_, _ad_);
     }
     var _af_ = caml_call1(Stdlib_List[9], acc);
     return caml_call1(Lwt[4], _af_);
    }
    return inner(0, l);
   }
   function collect_rev(acc, param){
    if(! param) return caml_call1(Lwt[4], acc);
    var ts = param[2], t = param[1];
    function _ac_(i){return collect_rev([0, i, acc], ts);}
    return caml_call2(Lwt[33][1], t, _ac_);
   }
   function map_p(f, l){
    var
     _ab_ = caml_call1(Lwt[80], f),
     ts = caml_call2(Stdlib_List[21], _ab_, l);
    return collect_rev(0, ts);
   }
   function filter_map_s(f, l){
    function inner(acc, param){
     if(param){
      var
       tl = param[2],
       hd = param[1],
       ___ =
         function(param){
          if(! param) return inner(acc, tl);
          var v = param[1];
          return inner([0, v, acc], tl);
         },
       _$_ = caml_call2(Lwt[80], f, hd);
      return caml_call2(Lwt[33][1], _$_, ___);
     }
     var _aa_ = caml_call1(Stdlib_List[9], acc);
     return caml_call1(Lwt[4], _aa_);
    }
    return inner(0, l);
   }
   function filter_map_p(f, l){
    function collect_optional_rev(acc, param){
     if(! param) return caml_call1(Lwt[4], acc);
     var ts = param[2], t = param[1];
     function _Z_(param){
      if(! param) return collect_optional_rev(acc, ts);
      var v = param[1];
      return collect_optional_rev([0, v, acc], ts);
     }
     return caml_call2(Lwt[33][1], t, _Z_);
    }
    var
     _Y_ = caml_call1(Lwt[80], f),
     ts = caml_call2(Stdlib_List[21], _Y_, l);
    return collect_optional_rev(0, ts);
   }
   function mapi_s(f, l){
    function inner(acc, i, param){
     if(param){
      var
       tl = param[2],
       hd = param[1],
       _U_ = function(v){return inner([0, v, acc], i + 1 | 0, tl);},
       _V_ = caml_call1(f, i),
       _W_ = caml_call2(Lwt[80], _V_, hd);
      return caml_call2(Lwt[33][1], _W_, _U_);
     }
     var _X_ = caml_call1(Stdlib_List[9], acc);
     return caml_call1(Lwt[4], _X_);
    }
    return inner(0, 0, l);
   }
   function mapi_p(f, l){
    function f$0(i){
     var _T_ = caml_call1(f, i);
     return caml_call1(Lwt[80], _T_);
    }
    var ts = tail_recursive_mapi_rev(f$0, l);
    return collect_rev(0, ts);
   }
   function rev_map_append_s(acc, f, l){
    if(! l) return caml_call1(Lwt[4], acc);
    var l$0 = l[2], x = l[1];
    function _R_(x){return rev_map_append_s([0, x, acc], f, l$0);}
    var _S_ = caml_call2(Lwt[80], f, x);
    return caml_call2(Lwt[33][1], _S_, _R_);
   }
   function rev_map_s(f, l){return rev_map_append_s(0, f, l);}
   function rev_map_p(f, l$1){
    var acc$1 = Lwt[38], acc = acc$1, l = l$1;
    for(;;){
     if(! l) return acc;
     var
      l$0 = l[2],
      x = l[1],
      _O_ =
        function(acc){
          return function(x){
           function _Q_(l){return [0, x, l];}
           return caml_call2(Lwt[33][2], acc, _Q_);};
         }
         (acc),
      _P_ = caml_call2(Lwt[80], f, x),
      acc$0 = caml_call2(Lwt[33][1], _P_, _O_),
      acc = acc$0,
      l = l$0;
    }
   }
   function fold_left_s(f, acc, l){
    if(! l) return caml_call1(Lwt[4], acc);
    var l$0 = l[2], x = l[1];
    function _L_(acc){return fold_left_s(f, acc, l$0);}
    var _M_ = caml_call1(f, acc), _N_ = caml_call2(Lwt[80], _M_, x);
    return caml_call2(Lwt[33][1], _N_, _L_);
   }
   function fold_right_s(f, l, acc){
    function inner(f, a, param){
     if(! param) return caml_call1(Lwt[4], a);
     var tl = param[2], hd = param[1];
     function _I_(a){return inner(f, a, tl);}
     var _J_ = caml_call1(f, hd), _K_ = caml_call2(Lwt[80], _J_, a);
     return caml_call2(Lwt[33][1], _K_, _I_);
    }
    return inner(f, acc, caml_call1(Stdlib_List[9], l));
   }
   function for_all_s(f, l){
    if(! l) return Lwt[39];
    var l$0 = l[2], x = l[1];
    function _G_(param){return param ? for_all_s(f, l$0) : Lwt[40];}
    var _H_ = caml_call2(Lwt[80], f, x);
    return caml_call2(Lwt[33][1], _H_, _G_);
   }
   function for_all_p(f, l){
    function _C_(bl){
     function _E_(x){return x;}
     var _F_ = caml_call2(Stdlib_List[32], _E_, bl);
     return caml_call1(Lwt[4], _F_);
    }
    var _D_ = map_p(f, l);
    return caml_call2(Lwt[33][1], _D_, _C_);
   }
   function exists_s(f, l){
    if(! l) return Lwt[40];
    var l$0 = l[2], x = l[1];
    function _A_(param){return param ? Lwt[39] : exists_s(f, l$0);}
    var _B_ = caml_call2(Lwt[80], f, x);
    return caml_call2(Lwt[33][1], _B_, _A_);
   }
   function exists_p(f, l){
    function _w_(bl){
     function _y_(x){return x;}
     var _z_ = caml_call2(Stdlib_List[33], _y_, bl);
     return caml_call1(Lwt[4], _z_);
    }
    var _x_ = map_p(f, l);
    return caml_call2(Lwt[33][1], _x_, _w_);
   }
   function find_s(f, l){
    if(! l) return caml_call1(Lwt[5], Stdlib[8]);
    var l$0 = l[2], x = l[1];
    function _u_(param){
     return param ? caml_call1(Lwt[4], x) : find_s(f, l$0);
    }
    var _v_ = caml_call2(Lwt[80], f, x);
    return caml_call2(Lwt[33][1], _v_, _u_);
   }
   function optionalize(f, x){
    function _s_(b){return b ? caml_call1(Lwt[4], [0, x]) : Lwt[37];}
    var _t_ = caml_call1(f, x);
    return caml_call2(Lwt[33][1], _t_, _s_);
   }
   function filter_s(f, l){
    return filter_map_s(function(_r_){return optionalize(f, _r_);}, l);
   }
   function filter_p(f, l){
    return filter_map_p(function(_q_){return optionalize(f, _q_);}, l);
   }
   function partition_s(f, l){
    function inner(acc1, acc2, param){
     if(param){
      var
       tl = param[2],
       hd = param[1],
       _m_ =
         function(b){
          return b
                  ? inner([0, hd, acc1], acc2, tl)
                  : inner(acc1, [0, hd, acc2], tl);
         },
       _n_ = caml_call2(Lwt[80], f, hd);
      return caml_call2(Lwt[33][1], _n_, _m_);
     }
     var
      _o_ = caml_call1(Stdlib_List[9], acc2),
      _p_ = [0, caml_call1(Stdlib_List[9], acc1), _o_];
     return caml_call1(Lwt[4], _p_);
    }
    return inner(0, 0, l);
   }
   function partition_p(f, l){
    function g(x){
     function _k_(b){return caml_call1(Lwt[4], [0, b, x]);}
     var _l_ = caml_call2(Lwt[80], f, x);
     return caml_call2(Lwt[33][1], _l_, _k_);
    }
    function _b_(tl){
     function _d_(_j_){return _j_[1];}
     var
      _e_ = caml_call2(Stdlib_List[41], _d_, tl),
      group1 = tail_recursive_map(function(_i_){return _i_[2];}, _e_);
     function _f_(x){return 1 - x[1];}
     var
      _g_ = caml_call2(Stdlib_List[41], _f_, tl),
      group2 = tail_recursive_map(function(_h_){return _h_[2];}, _g_);
     return caml_call1(Lwt[4], [0, group1, group2]);
    }
    var _c_ = map_p(g, l);
    return caml_call2(Lwt[33][1], _c_, _b_);
   }
   var
    Lwt_list =
      [0,
       iter_s,
       iter_p,
       iteri_s,
       iteri_p,
       map_s,
       map_p,
       mapi_s,
       mapi_p,
       rev_map_s,
       rev_map_p,
       fold_left_s,
       fold_right_s,
       for_all_s,
       for_all_p,
       exists_s,
       exists_p,
       find_s,
       filter_s,
       filter_p,
       filter_map_s,
       filter_map_p,
       partition_s,
       partition_p];
   runtime.caml_register_global(3, Lwt_list, "Lwt_list");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_pool
//# unitInfo: Requires: Lwt, Lwt_list, Lwt_sequence, Stdlib__Queue
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt_sequence = global_data.Lwt_sequence,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Lwt_list = global_data.Lwt_list,
    Lwt = global_data.Lwt;
   function create(m, opt, _H_, _G_, create){
    if(opt)
     var sth = opt[1], validate = sth;
    else
     var validate = function(param){return Lwt[39];};
    if(_H_)
     var sth$0 = _H_[1], check = sth$0;
    else
     var check = function(param, f){return caml_call1(f, 1);};
    if(_G_)
     var sth$1 = _G_[1], dispose = sth$1;
    else
     var dispose = function(param){return Lwt[36];};
    var _I_ = caml_call1(Lwt_sequence[4], 0);
    return [0,
            create,
            check,
            validate,
            dispose,
            [0, [0, 0]],
            m,
            0,
            caml_call1(Stdlib_Queue[2], 0),
            _I_];
   }
   function create_member(p){
    function _E_(exn){p[7] = p[7] - 1 | 0; return caml_call1(Lwt[5], exn);}
    function _F_(param){p[7] = p[7] + 1 | 0; return caml_call1(p[1], 0);}
    return caml_call2(Lwt[7], _F_, _E_);
   }
   function release(p, c){
    var match = caml_call1(Lwt_sequence[13], p[9]);
    if(! match) return caml_call2(Stdlib_Queue[4], c, p[8]);
    var wakener = match[1];
    return caml_call2(Lwt[2], wakener, c);
   }
   function dispose(p, c){
    function _C_(param){p[7] = p[7] - 1 | 0; return Lwt[36];}
    var _D_ = caml_call1(p[4], c);
    return caml_call2(Lwt[33][1], _D_, _C_);
   }
   function validate_and_return(p, c){
    function _s_(e){
     function _x_(param){
      var match = caml_call1(Lwt_sequence[13], p[9]);
      if(match){
       var
        wakener = match[1],
        _z_ = function(exn){return caml_call2(Lwt[3], wakener, exn);},
        _A_ = function(c){return caml_call2(Lwt[2], wakener, c);},
        _B_ = caml_call2(Lwt[80], p[1], 0);
       caml_call3(Lwt[32], _B_, _A_, _z_);
      }
      return caml_call1(Lwt[5], e);
     }
     var _y_ = dispose(p, c);
     return caml_call2(Lwt[33][1], _y_, _x_);
    }
    function _t_(param){
     if(param) return caml_call1(Lwt[4], c);
     function _v_(param){return create_member(p);}
     var _w_ = dispose(p, c);
     return caml_call2(Lwt[33][1], _w_, _v_);
    }
    function _u_(param){return caml_call1(p[3], c);}
    return caml_call3(Lwt[9], _u_, _t_, _s_);
   }
   function use(p, f){
    function _h_(c){
     var cleared = p[5][1];
     function _k_(e){
      function _q_(param){return caml_call1(Lwt[5], e);}
      var cleared$0 = cleared[1], ok = [0, 0];
      function _p_(result){ok[1] = result; return 0;}
      caml_call2(p[2], c, _p_);
      a:
      {
       if(! cleared$0 && ok[1]){release(p, c); var _r_ = Lwt[36]; break a;}
       var _r_ = dispose(p, c);
      }
      return caml_call2(Lwt[33][1], _r_, _q_);
     }
     function _l_(param){return caml_call1(f, c);}
     var promise = caml_call2(Lwt[7], _l_, _k_);
     function _m_(param){
      if(cleared[1]){
       var _n_ = function(param){return promise;}, _o_ = dispose(p, c);
       return caml_call2(Lwt[33][1], _o_, _n_);
      }
      release(p, c);
      return promise;
     }
     return caml_call2(Lwt[33][1], promise, _m_);
    }
    if(caml_call1(Stdlib_Queue[13], p[8]))
     if(p[7] < p[6])
      var _i_ = create_member(p);
     else
      var
       _f_ = function(_j_){return validate_and_return(p, _j_);},
       _g_ = caml_call1(Lwt[55], p[9]),
       _i_ = caml_call2(Lwt[33][1], _g_, _f_);
    else
     var
      c = caml_call1(Stdlib_Queue[5], p[8]),
      _i_ = validate_and_return(p, c);
    return caml_call2(Lwt[33][1], _i_, _h_);
   }
   function clear(p){
    var _a_ = p[8], _b_ = 0;
    function _c_(l, element){return [0, element, l];}
    var elements = caml_call3(Stdlib_Queue[16], _c_, _b_, _a_);
    caml_call1(Stdlib_Queue[11], p[8]);
    var old_cleared = p[5][1];
    old_cleared[1] = 1;
    p[5][1] = [0, 0];
    function _d_(_e_){return dispose(p, _e_);}
    return caml_call2(Lwt_list[1], _d_, elements);
   }
   function wait_queue_length(p){return caml_call1(Lwt_sequence[7], p[9]);}
   var Lwt_pool = [0, create, use, clear, wait_queue_length];
   runtime.caml_register_global(4, Lwt_pool, "Lwt_pool");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_mvar
//# unitInfo: Requires: Lwt, Lwt_sequence
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Lwt_sequence = global_data.Lwt_sequence;
   function create_empty(param){
    var _c_ = caml_call1(Lwt_sequence[4], 0);
    return [0, 0, caml_call1(Lwt_sequence[4], 0), _c_];
   }
   function create(v){
    var _b_ = caml_call1(Lwt_sequence[4], 0);
    return [0, [0, v], caml_call1(Lwt_sequence[4], 0), _b_];
   }
   function put(mvar, v){
    if(mvar[1]){
     var
      match = caml_call1(Lwt[22], 0),
      w = match[2],
      res = match[1],
      node = caml_call2(Lwt_sequence[9], [0, v, w], mvar[2]),
      _a_ = function(param){return caml_call1(Lwt_sequence[3], node);};
     caml_call2(Lwt[24], res, _a_);
     return res;
    }
    var match$0 = caml_call1(Lwt_sequence[13], mvar[3]);
    if(match$0){
     var w$0 = match$0[1];
     caml_call2(Lwt[2], w$0, v);
    }
    else
     mvar[1] = [0, v];
    return Lwt[36];
   }
   function take_available(mvar){
    var match$1 = mvar[1];
    if(! match$1) return 0;
    var v$0 = match$1[1], match = caml_call1(Lwt_sequence[13], mvar[2]);
    if(match){
     var match$0 = match[1], w = match$0[2], v = match$0[1];
     mvar[1] = [0, v];
     caml_call2(Lwt[2], w, 0);
    }
    else
     mvar[1] = 0;
    return [0, v$0];
   }
   function take(mvar){
    var match = take_available(mvar);
    if(! match) return caml_call1(Lwt[55], mvar[3]);
    var v = match[1];
    return caml_call1(Lwt[4], v);
   }
   function is_empty(mvar){return mvar[1] ? 0 : 1;}
   var
    Lwt_mvar = [0, create, create_empty, put, take, take_available, is_empty];
   runtime.caml_register_global(2, Lwt_mvar, "Lwt_mvar");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_mutex
//# unitInfo: Requires: Lwt, Lwt_sequence
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt_sequence = global_data.Lwt_sequence,
    Lwt = global_data.Lwt;
   function create(param){return [0, 0, caml_call1(Lwt_sequence[4], 0)];}
   function lock(m){
    return m[1] ? caml_call1(Lwt[55], m[2]) : (m[1] = 1, Lwt[36]);
   }
   function unlock(m){
    var _d_ = m[1];
    if(! _d_) return _d_;
    if(caml_call1(Lwt_sequence[6], m[2])){m[1] = 0; return 0;}
    var _e_ = caml_call1(Lwt_sequence[11], m[2]);
    return caml_call2(Lwt[2], _e_, 0);
   }
   function with_lock(m, f){
    function _a_(param){
     function _c_(param){unlock(m); return Lwt[36];}
     return caml_call2(Lwt[8], f, _c_);
    }
    var _b_ = lock(m);
    return caml_call2(Lwt[33][1], _b_, _a_);
   }
   function is_locked(m){return m[1];}
   function is_empty(m){return caml_call1(Lwt_sequence[6], m[2]);}
   var Lwt_mutex = [0, create, lock, unlock, is_locked, is_empty, with_lock];
   runtime.caml_register_global(2, Lwt_mutex, "Lwt_mutex");
   return;
  }
  (globalThis));

//# unitInfo: Provides: Lwt_condition
//# unitInfo: Requires: Lwt, Lwt_mutex, Lwt_sequence, Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Lwt = global_data.Lwt,
    Lwt_sequence = global_data.Lwt_sequence,
    Stdlib_List = global_data.Stdlib__List,
    Lwt_mutex = global_data.Lwt_mutex,
    create = Lwt_sequence[4];
   function wait(mutex, cvar){
    var waiter = caml_call1(Lwt[55], cvar);
    if(mutex){var m = mutex[1]; caml_call1(Lwt_mutex[3], m);}
    function _k_(param){
     if(! mutex) return Lwt[36];
     var m = mutex[1];
     return caml_call1(Lwt_mutex[2], m);
    }
    function _l_(param){return waiter;}
    return caml_call2(Lwt[8], _l_, _k_);
   }
   function signal(cvar, arg){
    try{
     var
      _h_ = caml_call1(Lwt_sequence[11], cvar),
      _i_ = caml_call2(Lwt[2], _h_, arg);
     return _i_;
    }
    catch(_j_){
     var _g_ = caml_wrap_exception(_j_);
     if(_g_ === Lwt_sequence[10]) return 0;
     throw caml_maybe_attach_backtrace(_g_, 0);
    }
   }
   function broadcast(cvar, arg){
    var _d_ = 0;
    function _e_(x, l){return [0, x, l];}
    var wakeners = caml_call3(Lwt_sequence[22], _e_, cvar, _d_);
    caml_call2(Lwt_sequence[19], Lwt_sequence[3], cvar);
    function _f_(wakener){return caml_call2(Lwt[2], wakener, arg);}
    return caml_call2(Stdlib_List[17], _f_, wakeners);
   }
   function broadcast_exn(cvar, exn){
    var _a_ = 0;
    function _b_(x, l){return [0, x, l];}
    var wakeners = caml_call3(Lwt_sequence[22], _b_, cvar, _a_);
    caml_call2(Lwt_sequence[19], Lwt_sequence[3], cvar);
    function _c_(wakener){return caml_call2(Lwt[3], wakener, exn);}
    return caml_call2(Stdlib_List[17], _c_, wakeners);
   }
   var Lwt_condition = [0, create, wait, signal, broadcast, broadcast_exn];
   runtime.caml_register_global(4, Lwt_condition, "Lwt_condition");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
